
code_F4_update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a324  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800a4b8  0800a4b8  0000b4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f8  0800a6f8  0000c014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6f8  0800a6f8  0000b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a700  0800a700  0000c014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a700  0800a700  0000b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a708  0800a708  0000b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800a70c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c014  2**0
                  CONTENTS
 10 .bss          000044dc  20000014  20000014  0000c014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044f0  200044f0  0000c014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd7e  00000000  00000000  0000c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ef3  00000000  00000000  0002bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  0002fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e1  00000000  00000000  00031380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d0d  00000000  00000000  00032561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d159  00000000  00000000  0005926e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dadd6  00000000  00000000  000763c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015119d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006404  00000000  00000000  001511e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  001575e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a49c 	.word	0x0800a49c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800a49c 	.word	0x0800a49c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <_Z11get_encoderPlS_P17TIM_HandleTypeDefs>:
int32_t speeden2 =0;

int32_t target_speed =0;
int32_t really_speed =0;

int32_t get_encoder(int32_t* value, int32_t* level_count, TIM_HandleTypeDef* htim, int16_t encoder_limit) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	807b      	strh	r3, [r7, #2]
    if (value == NULL || level_count == NULL || htim == NULL) {
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <_Z11get_encoderPlS_P17TIM_HandleTypeDefs+0x20>
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <_Z11get_encoderPlS_P17TIM_HandleTypeDefs+0x20>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <_Z11get_encoderPlS_P17TIM_HandleTypeDefs+0x24>
        return 0; // hoặc xử lý lỗi phù hợp
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e027      	b.n	8000ed0 <_Z11get_encoderPlS_P17TIM_HandleTypeDefs+0x74>
    }  // không cần thiết

    int32_t count_current = (int32_t)__HAL_TIM_GET_COUNTER(htim);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e86:	617b      	str	r3, [r7, #20]
    int32_t new_value = *level_count + count_current;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	4413      	add	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]

    if (new_value > encoder_limit || new_value < -encoder_limit) {
 8000e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dc05      	bgt.n	8000ea8 <_Z11get_encoderPlS_P17TIM_HandleTypeDefs+0x4c>
 8000e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ea0:	425b      	negs	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	da09      	bge.n	8000ebc <_Z11get_encoderPlS_P17TIM_HandleTypeDefs+0x60>
        *level_count += count_current;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	441a      	add	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
        // count_current = 0; // Không cần thiết vì đã tính new_value trước đó
    }

    *value = *level_count + (int32_t)__HAL_TIM_GET_COUNTER(htim);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000ec6:	441a      	add	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	601a      	str	r2, [r3, #0]
    return *value;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh>:
int32_t get_speed(int32_t *cnt, int32_t *realspeed, int32_t *level_count, TIM_HandleTypeDef *htim, uint32_t period_ms, uint8_t id_encoder) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
    if (!cnt || !realspeed || !level_count || !htim) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d008      	beq.n	8000f02 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x26>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x26>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x26>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x2a>
        return 0; // Hoặc xử lý lỗi phù hợp
 8000f02:	2300      	movs	r3, #0
 8000f04:	e030      	b.n	8000f68 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x8c>
    }

    static uint32_t time_last[2] = {0};
    uint32_t current_tick = HAL_GetTick();
 8000f06:	f002 fbf7 	bl	80036f8 <HAL_GetTick>
 8000f0a:	6178      	str	r0, [r7, #20]
    // Xử lý tràn tick (tick overflow)
    if (current_tick - time_last[id_encoder] >= period_ms || time_last[id_encoder] > current_tick) {
 8000f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f10:	4a17      	ldr	r2, [pc, #92]	@ (8000f70 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x94>)
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d907      	bls.n	8000f30 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x54>
 8000f20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x94>)
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d219      	bcs.n	8000f64 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x88>
        // Tính tốc độ (tránh chia nguyên nếu cần độ chính xác)
        *realspeed = (*cnt * 60) / 22500; // Hoặc nhân trước rồi chia sau
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x98>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	10d2      	asrs	r2, r2, #3
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad2      	subs	r2, r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	601a      	str	r2, [r3, #0]

        // Reset các giá trị
        time_last[id_encoder] = current_tick;
 8000f44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f48:	4909      	ldr	r1, [pc, #36]	@ (8000f70 <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh+0x94>)
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24
        *cnt = 0;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
        *level_count = 0; // Cân nhắc có nên reset level_count không?
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    }

    return (*realspeed);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000050 	.word	0x20000050
 8000f74:	057619f1 	.word	0x057619f1

08000f78 <_Z9pid_speedPlS_fff>:
int32_t error=0;
float i_term;
float p_term;
float d_term,output;
float dt;
int32_t pid_speed(int32_t* real_speed, int32_t* target_speed, float kp, float ki, float kd) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6178      	str	r0, [r7, #20]
 8000f80:	6139      	str	r1, [r7, #16]
 8000f82:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f86:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f8a:	ed87 1a01 	vstr	s2, [r7, #4]
//    static int32_t last_error = 0;
//    static float integral = 0;
//    static uint32_t last_time = 0;

    // Tính thời gian delta (dt) tự động
    uint32_t current_time = HAL_GetTick();
 8000f8e:	f002 fbb3 	bl	80036f8 <HAL_GetTick>
 8000f92:	61f8      	str	r0, [r7, #28]
     dt = (current_time - last_time) / 1000.0f; // Chuyển sang giây
 8000f94:	4b59      	ldr	r3, [pc, #356]	@ (80010fc <_Z9pid_speedPlS_fff+0x184>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fa4:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001100 <_Z9pid_speedPlS_fff+0x188>
 8000fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fac:	4b55      	ldr	r3, [pc, #340]	@ (8001104 <_Z9pid_speedPlS_fff+0x18c>)
 8000fae:	edc3 7a00 	vstr	s15, [r3]
    if (dt <= 0) dt = 0.01f; // Tránh chia 0 (default: 10ms)
 8000fb2:	4b54      	ldr	r3, [pc, #336]	@ (8001104 <_Z9pid_speedPlS_fff+0x18c>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d802      	bhi.n	8000fc8 <_Z9pid_speedPlS_fff+0x50>
 8000fc2:	4b50      	ldr	r3, [pc, #320]	@ (8001104 <_Z9pid_speedPlS_fff+0x18c>)
 8000fc4:	4a50      	ldr	r2, [pc, #320]	@ (8001108 <_Z9pid_speedPlS_fff+0x190>)
 8000fc6:	601a      	str	r2, [r3, #0]

    // Tính sai số
     error = *target_speed - *real_speed;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800110c <_Z9pid_speedPlS_fff+0x194>)
 8000fd4:	6013      	str	r3, [r2, #0]
//    if (error > 300 ){
//    	kp = 1; ki = 0.05; kd = 0.01;
//    }

    // Khâu P
     p_term = kp * error;
 8000fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800110c <_Z9pid_speedPlS_fff+0x194>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	4b49      	ldr	r3, [pc, #292]	@ (8001110 <_Z9pid_speedPlS_fff+0x198>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]

    // Khâu I (có anti-windup)
    integral += error * dt;
 8000ff0:	4b46      	ldr	r3, [pc, #280]	@ (800110c <_Z9pid_speedPlS_fff+0x194>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffc:	4b41      	ldr	r3, [pc, #260]	@ (8001104 <_Z9pid_speedPlS_fff+0x18c>)
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001006:	4b43      	ldr	r3, [pc, #268]	@ (8001114 <_Z9pid_speedPlS_fff+0x19c>)
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001010:	4b40      	ldr	r3, [pc, #256]	@ (8001114 <_Z9pid_speedPlS_fff+0x19c>)
 8001012:	edc3 7a00 	vstr	s15, [r3]
    integral = constrains(integral, -255.0f, 255.0f); // Giới hạn integral
 8001016:	4b3f      	ldr	r3, [pc, #252]	@ (8001114 <_Z9pid_speedPlS_fff+0x19c>)
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001020:	ee17 3a90 	vmov	r3, s15
 8001024:	b21b      	sxth	r3, r3
 8001026:	22ff      	movs	r2, #255	@ 0xff
 8001028:	f06f 01fe 	mvn.w	r1, #254	@ 0xfe
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fa4f 	bl	80014d0 <_Z10constrainssss>
 8001032:	4603      	mov	r3, r0
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <_Z9pid_speedPlS_fff+0x19c>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
    i_term = ki * integral;
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <_Z9pid_speedPlS_fff+0x19c>)
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	edd7 7a02 	vldr	s15, [r7, #8]
 800104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001050:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <_Z9pid_speedPlS_fff+0x1a0>)
 8001052:	edc3 7a00 	vstr	s15, [r3]

    // Khâu D
    derivative = (error - last_error) / dt;
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <_Z9pid_speedPlS_fff+0x194>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <_Z9pid_speedPlS_fff+0x1a4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001068:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <_Z9pid_speedPlS_fff+0x18c>)
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001072:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <_Z9pid_speedPlS_fff+0x1a8>)
 8001074:	edc3 7a00 	vstr	s15, [r3]
     d_term = kd * derivative;
 8001078:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <_Z9pid_speedPlS_fff+0x1a8>)
 800107a:	ed93 7a00 	vldr	s14, [r3]
 800107e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001086:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <_Z9pid_speedPlS_fff+0x1ac>)
 8001088:	edc3 7a00 	vstr	s15, [r3]

    // Tổng hợp PID
     output = p_term + i_term + d_term;
 800108c:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <_Z9pid_speedPlS_fff+0x198>)
 800108e:	ed93 7a00 	vldr	s14, [r3]
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <_Z9pid_speedPlS_fff+0x1a0>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <_Z9pid_speedPlS_fff+0x1ac>)
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <_Z9pid_speedPlS_fff+0x1b0>)
 80010a8:	edc3 7a00 	vstr	s15, [r3]
    output = constrains(output, -360.0f, 360.0f); // Giới hạn đầu ra
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <_Z9pid_speedPlS_fff+0x1b0>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b6:	ee17 3a90 	vmov	r3, s15
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80010c0:	491a      	ldr	r1, [pc, #104]	@ (800112c <_Z9pid_speedPlS_fff+0x1b4>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fa04 	bl	80014d0 <_Z10constrainssss>
 80010c8:	4603      	mov	r3, r0
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <_Z9pid_speedPlS_fff+0x1b0>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]

    // Cập nhật giá trị trước đó
    last_error = error;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <_Z9pid_speedPlS_fff+0x194>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0f      	ldr	r2, [pc, #60]	@ (800111c <_Z9pid_speedPlS_fff+0x1a4>)
 80010de:	6013      	str	r3, [r2, #0]
    last_time = current_time;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <_Z9pid_speedPlS_fff+0x184>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	6013      	str	r3, [r2, #0]

    return (int32_t)output;
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <_Z9pid_speedPlS_fff+0x1b0>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f0:	ee17 3a90 	vmov	r3, s15
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000064 	.word	0x20000064
 8001100:	447a0000 	.word	0x447a0000
 8001104:	2000007c 	.word	0x2000007c
 8001108:	3c23d70a 	.word	0x3c23d70a
 800110c:	20000068 	.word	0x20000068
 8001110:	20000070 	.word	0x20000070
 8001114:	2000005c 	.word	0x2000005c
 8001118:	2000006c 	.word	0x2000006c
 800111c:	20000058 	.word	0x20000058
 8001120:	20000060 	.word	0x20000060
 8001124:	20000074 	.word	0x20000074
 8001128:	20000078 	.word	0x20000078
 800112c:	fffffe98 	.word	0xfffffe98

08001130 <_Z7compassv>:
int16_t value_compass = 0;
int16_t delta_value_compass = 0;
uint8_t Buffer[2];
uint32_t deduggg2 =0;

int16_t compass(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
	static uint32_t time = 0;

	if(uart1_stages == STAGE_NO_READ_COMPASS){
 8001136:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <_Z7compassv+0x84>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <_Z7compassv+0x40>
		char data = 'z';
 800113e:	237a      	movs	r3, #122	@ 0x7a
 8001140:	71fb      	strb	r3, [r7, #7]
		if(HAL_UART_Transmit_IT(&huart2,(uint8_t *)&data, 1) == HAL_OK){
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	481b      	ldr	r0, [pc, #108]	@ (80011b8 <_Z7compassv+0x88>)
 800114a:	f004 fdf5 	bl	8005d38 <HAL_UART_Transmit_IT>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d01a      	beq.n	8001194 <_Z7compassv+0x64>
			time = HAL_GetTick();
 800115e:	f002 facb 	bl	80036f8 <HAL_GetTick>
 8001162:	4603      	mov	r3, r0
 8001164:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <_Z7compassv+0x8c>)
 8001166:	6013      	str	r3, [r2, #0]
			uart1_stages = STAGE_READ_START;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <_Z7compassv+0x84>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e011      	b.n	8001194 <_Z7compassv+0x64>
		}
	}else{
		if(HAL_GetTick() - time >= 1000){
 8001170:	f002 fac2 	bl	80036f8 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <_Z7compassv+0x8c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001180:	4293      	cmp	r3, r2
 8001182:	bf8c      	ite	hi
 8001184:	2301      	movhi	r3, #1
 8001186:	2300      	movls	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <_Z7compassv+0x64>
			uart1_stages = STAGE_NO_READ_COMPASS;
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <_Z7compassv+0x84>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
		}
	}
	return value_compass - delta_value_compass;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <_Z7compassv+0x90>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <_Z7compassv+0x94>)
 800119e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	b21b      	sxth	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000090 	.word	0x20000090
 80011b8:	20000634 	.word	0x20000634
 80011bc:	200000a0 	.word	0x200000a0
 80011c0:	20000092 	.word	0x20000092
 80011c4:	20000094 	.word	0x20000094

080011c8 <HAL_UART_RxCpltCallback>:
uint8_t rxBuffer[sizeof(DataPacket)];
uint8_t rxIndex = 0;
bool packetReady = false;
uint8_t receivedByte;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart4.Instance){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <HAL_UART_RxCpltCallback+0xc8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d140      	bne.n	800125e <HAL_UART_RxCpltCallback+0x96>

		 rxBuffer[rxIndex++] = receivedByte; // Lưu byte vào buffer
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_UART_RxCpltCallback+0xcc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	b2d1      	uxtb	r1, r2
 80011e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001294 <HAL_UART_RxCpltCallback+0xcc>)
 80011e6:	7011      	strb	r1, [r2, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <HAL_UART_RxCpltCallback+0xd0>)
 80011ec:	7819      	ldrb	r1, [r3, #0]
 80011ee:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <HAL_UART_RxCpltCallback+0xd4>)
 80011f0:	5499      	strb	r1, [r3, r2]



		 // Nếu nhận đủ struct
		 if (rxIndex >= sizeof(DataPacket)) {
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_UART_RxCpltCallback+0xcc>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d927      	bls.n	800124a <HAL_UART_RxCpltCallback+0x82>
		     memcpy((void*)&receivedPacket, (void*)rxBuffer, sizeof(DataPacket));
 80011fa:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <HAL_UART_RxCpltCallback+0xd8>)
 80011fc:	4a27      	ldr	r2, [pc, #156]	@ (800129c <HAL_UART_RxCpltCallback+0xd4>)
 80011fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001200:	c303      	stmia	r3!, {r0, r1}
 8001202:	701a      	strb	r2, [r3, #0]

		     // Kiểm tra checksum
		     uint8_t calcChecksum = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	75fb      	strb	r3, [r7, #23]
		     uint8_t* ptr = (uint8_t*)&receivedPacket;
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_UART_RxCpltCallback+0xd8>)
 800120a:	60fb      	str	r3, [r7, #12]
		     for (uint32_t i = 0; i < sizeof(DataPacket) - 1; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	e009      	b.n	8001226 <HAL_UART_RxCpltCallback+0x5e>
		            calcChecksum ^= ptr[i];
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	4053      	eors	r3, r2
 800121e:	75fb      	strb	r3, [r7, #23]
		     for (uint32_t i = 0; i < sizeof(DataPacket) - 1; i++) {
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3301      	adds	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b07      	cmp	r3, #7
 800122a:	d9f2      	bls.n	8001212 <HAL_UART_RxCpltCallback+0x4a>
		         }

		     if (calcChecksum == receivedPacket.checksum) {
 800122c:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <HAL_UART_RxCpltCallback+0xd8>)
 800122e:	7a1b      	ldrb	r3, [r3, #8]
 8001230:	7dfa      	ldrb	r2, [r7, #23]
 8001232:	429a      	cmp	r2, r3
 8001234:	d103      	bne.n	800123e <HAL_UART_RxCpltCallback+0x76>
		             packetReady = true; // Dữ liệu hợp lệ
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_UART_RxCpltCallback+0xdc>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e002      	b.n	8001244 <HAL_UART_RxCpltCallback+0x7c>
		     } else {
		           	 packetReady = false;
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_UART_RxCpltCallback+0xdc>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
		     }

		     rxIndex = 0; // Reset buffer
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <HAL_UART_RxCpltCallback+0xcc>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		  }

		        // Tiếp tục nhận byte tiếp theo
		 	 	debuggg++;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_UART_RxCpltCallback+0xe0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	4a15      	ldr	r2, [pc, #84]	@ (80012a8 <HAL_UART_RxCpltCallback+0xe0>)
 8001252:	6013      	str	r3, [r2, #0]
		        HAL_UART_Receive_IT(&huart4, (uint8_t*)&receivedByte, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	4910      	ldr	r1, [pc, #64]	@ (8001298 <HAL_UART_RxCpltCallback+0xd0>)
 8001258:	480d      	ldr	r0, [pc, #52]	@ (8001290 <HAL_UART_RxCpltCallback+0xc8>)
 800125a:	f004 fda3 	bl	8005da4 <HAL_UART_Receive_IT>
		    }
	if(huart->Instance == huart2.Instance){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_UART_RxCpltCallback+0xe4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d10d      	bne.n	8001286 <HAL_UART_RxCpltCallback+0xbe>

			//mPrintf("receive_okay \n ",0);
			value_compass = (int16_t)((Buffer[0] << 8) | Buffer[1]);
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_UART_RxCpltCallback+0xe8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_UART_RxCpltCallback+0xe8>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_UART_RxCpltCallback+0xec>)
 800127e:	801a      	strh	r2, [r3, #0]
			uart1_stages = STAGE_NO_READ_COMPASS;
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_UART_RxCpltCallback+0xf0>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart1, (uint8_t*)&Buffer, 2);
		}



}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200005a4 	.word	0x200005a4
 8001294:	200000b9 	.word	0x200000b9
 8001298:	200000bb 	.word	0x200000bb
 800129c:	200000b0 	.word	0x200000b0
 80012a0:	200000a4 	.word	0x200000a4
 80012a4:	200000ba 	.word	0x200000ba
 80012a8:	2000008c 	.word	0x2000008c
 80012ac:	20000634 	.word	0x20000634
 80012b0:	20000098 	.word	0x20000098
 80012b4:	20000092 	.word	0x20000092
 80012b8:	20000090 	.word	0x20000090

080012bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_UART_TxCpltCallback+0x58>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d10c      	bne.n	80012ea <HAL_UART_TxCpltCallback+0x2e>

		if(uart1_stages == STAGE_RESET_COMPASS){
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_UART_TxCpltCallback+0x5c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d103      	bne.n	80012e0 <HAL_UART_TxCpltCallback+0x24>
			//st_reset_angle = true;
			uart1_stages = STAGE_NO_READ_COMPASS;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_UART_TxCpltCallback+0x5c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
 80012de:	e004      	b.n	80012ea <HAL_UART_TxCpltCallback+0x2e>

		}else{

			//mPrintf("trans_okay \n ",0);
			HAL_UART_Receive_IT(&huart2, (uint8_t*)&Buffer, 2);
 80012e0:	2202      	movs	r2, #2
 80012e2:	490e      	ldr	r1, [pc, #56]	@ (800131c <HAL_UART_TxCpltCallback+0x60>)
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <HAL_UART_TxCpltCallback+0x58>)
 80012e6:	f004 fd5d 	bl	8005da4 <HAL_UART_Receive_IT>
		}

	}
	if(huart->Instance == huart4.Instance){
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_UART_TxCpltCallback+0x64>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d109      	bne.n	800130a <HAL_UART_TxCpltCallback+0x4e>
		deduggg2++;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_UART_TxCpltCallback+0x68>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_UART_TxCpltCallback+0x68>)
 80012fe:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart4,(uint8_t*)&receivedByte,1);
 8001300:	2201      	movs	r2, #1
 8001302:	4909      	ldr	r1, [pc, #36]	@ (8001328 <HAL_UART_TxCpltCallback+0x6c>)
 8001304:	4806      	ldr	r0, [pc, #24]	@ (8001320 <HAL_UART_TxCpltCallback+0x64>)
 8001306:	f004 fd4d 	bl	8005da4 <HAL_UART_Receive_IT>
	}
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000634 	.word	0x20000634
 8001318:	20000090 	.word	0x20000090
 800131c:	20000098 	.word	0x20000098
 8001320:	200005a4 	.word	0x200005a4
 8001324:	2000009c 	.word	0x2000009c
 8001328:	200000bb 	.word	0x200000bb
 800132c:	00000000 	.word	0x00000000

08001330 <_Z5uart2v>:
			status_read = true;
		}
	}

}
void uart2() {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    static uint32_t time = 0;
    trans_data.v_goc = 15;
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <_Z5uart2v+0x98>)
 8001336:	220f      	movs	r2, #15
 8001338:	601a      	str	r2, [r3, #0]
    trans_data.v_dai = (really_speed*7.0)/6000;
 800133a:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <_Z5uart2v+0x9c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f898 	bl	8000474 <__aeabi_i2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <_Z5uart2v+0xa0>)
 800134a:	f7ff f8fd 	bl	8000548 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	a31a      	add	r3, pc, #104	@ (adr r3, 80013c0 <_Z5uart2v+0x90>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff fa1e 	bl	800079c <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fb88 	bl	8000a7c <__aeabi_d2iz>
 800136c:	4603      	mov	r3, r0
 800136e:	4a16      	ldr	r2, [pc, #88]	@ (80013c8 <_Z5uart2v+0x98>)
 8001370:	6053      	str	r3, [r2, #4]
    if (status_read) {
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <_Z5uart2v+0xa4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00d      	beq.n	8001396 <_Z5uart2v+0x66>
        // Gửi toàn bộ struct
        HAL_UART_Transmit_IT(&huart4, (uint8_t*)&trans_data, sizeof(trans_data));
 800137a:	2208      	movs	r2, #8
 800137c:	4912      	ldr	r1, [pc, #72]	@ (80013c8 <_Z5uart2v+0x98>)
 800137e:	4816      	ldr	r0, [pc, #88]	@ (80013d8 <_Z5uart2v+0xa8>)
 8001380:	f004 fcda 	bl	8005d38 <HAL_UART_Transmit_IT>

        time = HAL_GetTick();
 8001384:	f002 f9b8 	bl	80036f8 <HAL_GetTick>
 8001388:	4603      	mov	r3, r0
 800138a:	4a14      	ldr	r2, [pc, #80]	@ (80013dc <_Z5uart2v+0xac>)
 800138c:	6013      	str	r3, [r2, #0]
        status_read = false;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <_Z5uart2v+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    else {
        if (HAL_GetTick() - time >= 100) {
            status_read = true;
        }
    }
}
 8001394:	e00f      	b.n	80013b6 <_Z5uart2v+0x86>
        if (HAL_GetTick() - time >= 100) {
 8001396:	f002 f9af 	bl	80036f8 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <_Z5uart2v+0xac>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b63      	cmp	r3, #99	@ 0x63
 80013a4:	bf8c      	ite	hi
 80013a6:	2301      	movhi	r3, #1
 80013a8:	2300      	movls	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <_Z5uart2v+0x86>
            status_read = true;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <_Z5uart2v+0xa4>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40b77000 	.word	0x40b77000
 80013c8:	20000084 	.word	0x20000084
 80013cc:	2000004c 	.word	0x2000004c
 80013d0:	401c0000 	.word	0x401c0000
 80013d4:	20000000 	.word	0x20000000
 80013d8:	200005a4 	.word	0x200005a4
 80013dc:	200000bc 	.word	0x200000bc

080013e0 <_ZN5Motor9goForwardEm>:
			HAL_GPIO_WritePin(IN1_Port,IN1,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(IN2_Port,IN2,GPIO_PIN_RESET);
			__HAL_TIM_SET_COMPARE(htim,Channel,0);
			HAL_TIM_PWM_Start(htim,Channel);
		}
		void goForward(uint32_t pwm){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
			HAL_GPIO_WritePin(IN1_Port,IN1,GPIO_PIN_SET);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6898      	ldr	r0, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	899b      	ldrh	r3, [r3, #12]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	f002 fc9b 	bl	8003d30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_Port,IN2,GPIO_PIN_RESET);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6918      	ldr	r0, [r3, #16]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	8a9b      	ldrh	r3, [r3, #20]
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f002 fc93 	bl	8003d30 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <_ZN5Motor9goForwardEm+0x3e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
 800141c:	e018      	b.n	8001450 <_ZN5Motor9goForwardEm+0x70>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d105      	bne.n	8001432 <_ZN5Motor9goForwardEm+0x52>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
 8001430:	e00e      	b.n	8001450 <_ZN5Motor9goForwardEm+0x70>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b08      	cmp	r3, #8
 8001438:	d105      	bne.n	8001446 <_ZN5Motor9goForwardEm+0x66>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
 8001444:	e004      	b.n	8001450 <_ZN5Motor9goForwardEm+0x70>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	641a      	str	r2, [r3, #64]	@ 0x40
		}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <_ZN5Motor9goReverseEm>:
		void goReverse(uint32_t pwm){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
			HAL_GPIO_WritePin(IN1_Port,IN1,GPIO_PIN_RESET);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6898      	ldr	r0, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	899b      	ldrh	r3, [r3, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	f002 fc5f 	bl	8003d30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_Port,IN2,GPIO_PIN_SET);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6918      	ldr	r0, [r3, #16]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	8a9b      	ldrh	r3, [r3, #20]
 800147a:	2201      	movs	r2, #1
 800147c:	4619      	mov	r1, r3
 800147e:	f002 fc57 	bl	8003d30 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <_ZN5Motor9goReverseEm+0x3e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	635a      	str	r2, [r3, #52]	@ 0x34
		}
 8001494:	e018      	b.n	80014c8 <_ZN5Motor9goReverseEm+0x70>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b04      	cmp	r3, #4
 800149c:	d105      	bne.n	80014aa <_ZN5Motor9goReverseEm+0x52>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	639a      	str	r2, [r3, #56]	@ 0x38
		}
 80014a8:	e00e      	b.n	80014c8 <_ZN5Motor9goReverseEm+0x70>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d105      	bne.n	80014be <_ZN5Motor9goReverseEm+0x66>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
 80014bc:	e004      	b.n	80014c8 <_ZN5Motor9goReverseEm+0x70>
			__HAL_TIM_SET_COMPARE(htim,Channel,pwm);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40
		}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_Z10constrainssss>:
int pwm0, pwm1, pwm2, pwm3;
int debug0,debug1,debug2,debug3;
int bug0,bug1,bug2,bug3;
int real_v_rotate;
int db_agrot;
int16_t constrains(int16_t value, int16_t down, int16_t up ){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
 80014da:	460b      	mov	r3, r1
 80014dc:	80bb      	strh	r3, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	807b      	strh	r3, [r7, #2]
	if(value >= up) return up;
 80014e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	db02      	blt.n	80014f4 <_Z10constrainssss+0x24>
 80014ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014f2:	e00a      	b.n	800150a <_Z10constrainssss+0x3a>
	if(value < down) return down;
 80014f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	da02      	bge.n	8001506 <_Z10constrainssss+0x36>
 8001500:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001504:	e001      	b.n	800150a <_Z10constrainssss+0x3a>
	return value;
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_Z10soft_speedPsPmsmh>:
}
uint16_t speed = 300;
// PID algorithm
double PI_const = 3.141592654;
int16_t angle_update = 0;
void soft_speed(int16_t* variable,uint32_t * last_time, int16_t speed,uint32_t time_out,uint8_t delta_speed){ // tốc độ và thời gian khởi động
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4613      	mov	r3, r2
 8001524:	80fb      	strh	r3, [r7, #6]
  if(HAL_GetTick() - (*last_time) >= time_out) {
 8001526:	f002 f8e7 	bl	80036f8 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	bf94      	ite	ls
 8001538:	2301      	movls	r3, #1
 800153a:	2300      	movhi	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d041      	beq.n	80015c6 <_Z10soft_speedPsPmsmh+0xb0>
    if((*variable) < speed){
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800154c:	429a      	cmp	r2, r3
 800154e:	dd15      	ble.n	800157c <_Z10soft_speedPsPmsmh+0x66>
    	(*variable) += delta_speed;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	b29a      	uxth	r2, r3
 8001558:	7e3b      	ldrb	r3, [r7, #24]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29b      	uxth	r3, r3
 8001560:	b21a      	sxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	801a      	strh	r2, [r3, #0]
    	if((*variable) > speed) *variable = speed;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001570:	429a      	cmp	r2, r3
 8001572:	da23      	bge.n	80015bc <_Z10soft_speedPsPmsmh+0xa6>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	e01f      	b.n	80015bc <_Z10soft_speedPsPmsmh+0xa6>
    }else if((*variable) > speed){
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001586:	429a      	cmp	r2, r3
 8001588:	da15      	bge.n	80015b6 <_Z10soft_speedPsPmsmh+0xa0>
    	(*variable) -= delta_speed;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	b29a      	uxth	r2, r3
 8001592:	7e3b      	ldrb	r3, [r7, #24]
 8001594:	b29b      	uxth	r3, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	b21a      	sxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	801a      	strh	r2, [r3, #0]
		if((*variable) < speed) *variable = speed;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dd06      	ble.n	80015bc <_Z10soft_speedPsPmsmh+0xa6>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	88fa      	ldrh	r2, [r7, #6]
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	e002      	b.n	80015bc <_Z10soft_speedPsPmsmh+0xa6>
    }else{
    	(*variable) = speed;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	88fa      	ldrh	r2, [r7, #6]
 80015ba:	801a      	strh	r2, [r3, #0]
    }

    (*last_time) = HAL_GetTick();
 80015bc:	f002 f89c 	bl	80036f8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	601a      	str	r2, [r3, #0]
  }
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <_Z9get_angles>:
int16_t get_angle(int16_t angle){ // resolution(độ phân giải) : -1800 -> 1800
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  angle = angle % 3600;
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	4a17      	ldr	r2, [pc, #92]	@ (800163c <_Z9get_angles+0x6c>)
 80015e0:	fb82 1203 	smull	r1, r2, r2, r3
 80015e4:	441a      	add	r2, r3
 80015e6:	12d1      	asrs	r1, r2, #11
 80015e8:	17da      	asrs	r2, r3, #31
 80015ea:	1a8a      	subs	r2, r1, r2
 80015ec:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80015f0:	fb01 f202 	mul.w	r2, r1, r2
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
  if(angle >= 1800) return angle -= 3600;
 80015f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fc:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001600:	db07      	blt.n	8001612 <_Z9get_angles+0x42>
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	f5a3 6361 	sub.w	r3, r3, #3600	@ 0xe10
 8001608:	b29b      	uxth	r3, r3
 800160a:	80fb      	strh	r3, [r7, #6]
 800160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001610:	e00e      	b.n	8001630 <_Z9get_angles+0x60>
  if(angle < -1800) return angle += 3600;
 8001612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001616:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 800161a:	da07      	bge.n	800162c <_Z9get_angles+0x5c>
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8001622:	b29b      	uxth	r3, r3
 8001624:	80fb      	strh	r3, [r7, #6]
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	e001      	b.n	8001630 <_Z9get_angles+0x60>
  return angle;
 800162c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]

}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	91a2b3c5 	.word	0x91a2b3c5

08001640 <_Z10PID_rotatess>:
int16_t PID_rotate(int16_t angle_set,int16_t speed_rot){ // góc muốn đến , giới hạn tốc độ
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	80fb      	strh	r3, [r7, #6]
 800164c:	4613      	mov	r3, r2
 800164e:	80bb      	strh	r3, [r7, #4]
  float kp, ki, kd;
  static int16_t error  = 0,last_error = 0;
  int16_t output = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

    error = get_angle(angle_set) - get_angle(compass());
 8001654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ffb9 	bl	80015d0 <_Z9get_angles>
 800165e:	4603      	mov	r3, r0
 8001660:	b29c      	uxth	r4, r3
 8001662:	f7ff fd65 	bl	8001130 <_Z7compassv>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffb1 	bl	80015d0 <_Z9get_angles>
 800166e:	4603      	mov	r3, r0
 8001670:	b29b      	uxth	r3, r3
 8001672:	1ae3      	subs	r3, r4, r3
 8001674:	b29b      	uxth	r3, r3
 8001676:	b21a      	sxth	r2, r3
 8001678:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <_Z10PID_rotatess+0xe0>)
 800167a:	801a      	strh	r2, [r3, #0]
    //error = angle_set - compass();

//    if(abs(error) >= 1000){
        kp = 0.65, ki = 0.35, kd = 0.01;
 800167c:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <_Z10PID_rotatess+0xe4>)
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <_Z10PID_rotatess+0xe8>)
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <_Z10PID_rotatess+0xec>)
 8001686:	60bb      	str	r3, [r7, #8]
//    } else{
//        kp = 0.2, ki = 0.1,  kd = 0.04;
//
//    }

    output = kp * error + ki * (error + last_error) + kd * (error - last_error);
 8001688:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <_Z10PID_rotatess+0xe0>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001696:	edd7 7a04 	vldr	s15, [r7, #16]
 800169a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <_Z10PID_rotatess+0xe0>)
 80016a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <_Z10PID_rotatess+0xf0>)
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	4413      	add	r3, r2
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <_Z10PID_rotatess+0xe0>)
 80016c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <_Z10PID_rotatess+0xf0>)
 80016cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016da:	edd7 7a02 	vldr	s15, [r7, #8]
 80016de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
 80016ee:	82fb      	strh	r3, [r7, #22]
    output = constrains(output, -speed_rot, speed_rot);
 80016f0:	88bb      	ldrh	r3, [r7, #4]
 80016f2:	425b      	negs	r3, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	b219      	sxth	r1, r3
 80016f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fee5 	bl	80014d0 <_Z10constrainssss>
 8001706:	4603      	mov	r3, r0
 8001708:	82fb      	strh	r3, [r7, #22]
    //Serial.println(output);
    last_error = error;
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <_Z10PID_rotatess+0xe0>)
 800170c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001710:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <_Z10PID_rotatess+0xf0>)
 8001712:	801a      	strh	r2, [r3, #0]

  return output;
 8001714:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001718:	4618      	mov	r0, r3
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd90      	pop	{r4, r7, pc}
 8001720:	200000e4 	.word	0x200000e4
 8001724:	3f266666 	.word	0x3f266666
 8001728:	3eb33333 	.word	0x3eb33333
 800172c:	3c23d70a 	.word	0x3c23d70a
 8001730:	200000e6 	.word	0x200000e6

08001734 <_Z6run_dchs>:


void run_dc(uint8_t num_dc,int16_t speed){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	460a      	mov	r2, r1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	80bb      	strh	r3, [r7, #4]
  if(speed >= 0){
 8001744:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0d      	blt.n	8001768 <_Z6run_dchs+0x34>
    DC[num_dc].goForward(speed);
 800174c:	79fa      	ldrb	r2, [r7, #7]
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <_Z6run_dchs+0x60>)
 8001758:	4413      	add	r3, r2
 800175a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe3d 	bl	80013e0 <_ZN5Motor9goForwardEm>
  }else{
    DC[num_dc].goReverse(abs(speed));
  }
}
 8001766:	e010      	b.n	800178a <_Z6run_dchs+0x56>
    DC[num_dc].goReverse(abs(speed));
 8001768:	79fa      	ldrb	r2, [r7, #7]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <_Z6run_dchs+0x60>)
 8001774:	441a      	add	r2, r3
 8001776:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	bfb8      	it	lt
 800177e:	425b      	neglt	r3, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	4619      	mov	r1, r3
 8001784:	4610      	mov	r0, r2
 8001786:	f7ff fe67 	bl	8001458 <_ZN5Motor9goReverseEm>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200006cc 	.word	0x200006cc

08001798 <_Z14move_directionssssmh>:

  return speed_run;

}
*/
int16_t move_direction(int16_t angle_set, int16_t speed_rot,int16_t angle_tt, int16_t speed_tt,uint32_t time_soft,uint8_t delta_speed){
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	@ 0x2c
 800179c:	af02      	add	r7, sp, #8
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	4603      	mov	r3, r0
 80017ac:	80bb      	strh	r3, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	803b      	strh	r3, [r7, #0]

  static int16_t pwm[4];
  static int16_t speed_run = 0; // 0-360
  static uint32_t time_soft_speed = 0;
  soft_speed(&speed_run,&time_soft_speed,speed_tt,time_soft,delta_speed);
 80017b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c2:	49bf      	ldr	r1, [pc, #764]	@ (8001ac0 <_Z14move_directionssssmh+0x328>)
 80017c4:	48bf      	ldr	r0, [pc, #764]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 80017c6:	f7ff fea6 	bl	8001516 <_Z10soft_speedPsPmsmh>
//										gioi han  time nhay	buoc nhay
  static int16_t speed_rotate = 0;
  speed_rotate = PID_rotate(angle_set,speed_rot);
 80017ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff33 	bl	8001640 <_Z10PID_rotatess>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4bba      	ldr	r3, [pc, #744]	@ (8001ac8 <_Z14move_directionssssmh+0x330>)
 80017e0:	801a      	strh	r2, [r3, #0]
  int16_t angle = compass();
 80017e2:	f7ff fca5 	bl	8001130 <_Z7compassv>
 80017e6:	4603      	mov	r3, r0
 80017e8:	83bb      	strh	r3, [r7, #28]

  float alpha[4];

  for(uint8_t i = 0; i < 4; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	77fb      	strb	r3, [r7, #31]
 80017ee:	e03b      	b.n	8001868 <_Z14move_directionssssmh+0xd0>
    alpha[i] = cos((DC[i].angle[0] - angle_tt + angle) * DEG_TO_RAD / 10);
 80017f0:	7ffa      	ldrb	r2, [r7, #31]
 80017f2:	49b6      	ldr	r1, [pc, #728]	@ (8001acc <_Z14move_directionssssmh+0x334>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3316      	adds	r3, #22
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	461a      	mov	r2, r3
 8001806:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800180a:	1ad2      	subs	r2, r2, r3
 800180c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe2e 	bl	8000474 <__aeabi_i2d>
 8001818:	a3a7      	add	r3, pc, #668	@ (adr r3, 8001ab8 <_Z14move_directionssssmh+0x320>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7fe fe93 	bl	8000548 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4ba8      	ldr	r3, [pc, #672]	@ (8001ad0 <_Z14move_directionssssmh+0x338>)
 8001830:	f7fe ffb4 	bl	800079c <__aeabi_ddiv>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	ec43 2b17 	vmov	d7, r2, r3
 800183c:	eeb0 0a47 	vmov.f32	s0, s14
 8001840:	eef0 0a67 	vmov.f32	s1, s15
 8001844:	f007 fdc0 	bl	80093c8 <cos>
 8001848:	ec53 2b10 	vmov	r2, r3, d0
 800184c:	7ffc      	ldrb	r4, [r7, #31]
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f93b 	bl	8000acc <__aeabi_d2f>
 8001856:	4602      	mov	r2, r0
 8001858:	00a3      	lsls	r3, r4, #2
 800185a:	3320      	adds	r3, #32
 800185c:	443b      	add	r3, r7
 800185e:	3b14      	subs	r3, #20
 8001860:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < 4; i++)
 8001862:	7ffb      	ldrb	r3, [r7, #31]
 8001864:	3301      	adds	r3, #1
 8001866:	77fb      	strb	r3, [r7, #31]
 8001868:	7ffb      	ldrb	r3, [r7, #31]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d9c0      	bls.n	80017f0 <_Z14move_directionssssmh+0x58>
#endif

#if 1
  //right robot : DC[0], DC[3]

  pwm[0] = speed_rotate + speed_run  * alpha[0]; // căn 2 hết
 800186e:	4b96      	ldr	r3, [pc, #600]	@ (8001ac8 <_Z14move_directionssssmh+0x330>)
 8001870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187c:	4b91      	ldr	r3, [pc, #580]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 800187e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 3a90 	vmov	r3, s15
 800189e:	b21a      	sxth	r2, r3
 80018a0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80018a2:	801a      	strh	r2, [r3, #0]
  pwm[3] = speed_rotate + speed_run  * alpha[3];
 80018a4:	4b88      	ldr	r3, [pc, #544]	@ (8001ac8 <_Z14move_directionssssmh+0x330>)
 80018a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b2:	4b84      	ldr	r3, [pc, #528]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d0:	ee17 3a90 	vmov	r3, s15
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80018d8:	80da      	strh	r2, [r3, #6]


  // left robot : DC[1] DC[2]
  pwm[1] =  speed_rotate - speed_run *  alpha[1];
 80018da:	4b7b      	ldr	r3, [pc, #492]	@ (8001ac8 <_Z14move_directionssssmh+0x330>)
 80018dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e8:	4b76      	ldr	r3, [pc, #472]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80018fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001906:	ee17 3a90 	vmov	r3, s15
 800190a:	b21a      	sxth	r2, r3
 800190c:	4b71      	ldr	r3, [pc, #452]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 800190e:	805a      	strh	r2, [r3, #2]
  pwm[2] =  speed_rotate - speed_run *  alpha[2];
 8001910:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac8 <_Z14move_directionssssmh+0x330>)
 8001912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191e:	4b69      	ldr	r3, [pc, #420]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 8001920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800192c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193c:	ee17 3a90 	vmov	r3, s15
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b64      	ldr	r3, [pc, #400]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001944:	809a      	strh	r2, [r3, #4]

#endif


  pwm[0] = constrains(pwm[0], -255, 255);
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	22ff      	movs	r2, #255	@ 0xff
 800194e:	f06f 01fe 	mvn.w	r1, #254	@ 0xfe
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fdbc 	bl	80014d0 <_Z10constrainssss>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 800195e:	801a      	strh	r2, [r3, #0]
  pwm[1] = constrains(pwm[1], -255, 255);
 8001960:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001962:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001966:	22ff      	movs	r2, #255	@ 0xff
 8001968:	f06f 01fe 	mvn.w	r1, #254	@ 0xfe
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fdaf 	bl	80014d0 <_Z10constrainssss>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b57      	ldr	r3, [pc, #348]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001978:	805a      	strh	r2, [r3, #2]
  pwm[2] = constrains(pwm[2], -255, 255);
 800197a:	4b56      	ldr	r3, [pc, #344]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 800197c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001980:	22ff      	movs	r2, #255	@ 0xff
 8001982:	f06f 01fe 	mvn.w	r1, #254	@ 0xfe
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fda2 	bl	80014d0 <_Z10constrainssss>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001992:	809a      	strh	r2, [r3, #4]
  pwm[3] = constrains(pwm[3], -255, 255);
 8001994:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001996:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800199a:	22ff      	movs	r2, #255	@ 0xff
 800199c:	f06f 01fe 	mvn.w	r1, #254	@ 0xfe
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fd95 	bl	80014d0 <_Z10constrainssss>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80019ac:	80da      	strh	r2, [r3, #6]

  run_dc(0,pwm[0]);
 80019ae:	4b49      	ldr	r3, [pc, #292]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	4619      	mov	r1, r3
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff febc 	bl	8001734 <_Z6run_dchs>
  run_dc(1,pwm[1]);
 80019bc:	4b45      	ldr	r3, [pc, #276]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80019be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019c2:	4619      	mov	r1, r3
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff feb5 	bl	8001734 <_Z6run_dchs>
  run_dc(2,pwm[2]);
 80019ca:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80019cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d0:	4619      	mov	r1, r3
 80019d2:	2002      	movs	r0, #2
 80019d4:	f7ff feae 	bl	8001734 <_Z6run_dchs>
  run_dc(3,pwm[3]);
 80019d8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80019da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019de:	4619      	mov	r1, r3
 80019e0:	2003      	movs	r0, #3
 80019e2:	f7ff fea7 	bl	8001734 <_Z6run_dchs>
#if 1 // for debug

  pwm0 = pwm[0];
 80019e6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80019e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad8 <_Z14move_directionssssmh+0x340>)
 80019f0:	601a      	str	r2, [r3, #0]
  pwm1 = pwm[1];
 80019f2:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 80019f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <_Z14move_directionssssmh+0x344>)
 80019fc:	601a      	str	r2, [r3, #0]
  pwm2 = pwm[2];
 80019fe:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <_Z14move_directionssssmh+0x348>)
 8001a08:	601a      	str	r2, [r3, #0]
  pwm3 = pwm[3];
 8001a0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <_Z14move_directionssssmh+0x33c>)
 8001a0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <_Z14move_directionssssmh+0x34c>)
 8001a14:	601a      	str	r2, [r3, #0]
  debug0 = speed_run  * alpha[0];
 8001a16:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 8001a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a30:	ee17 2a90 	vmov	r2, s15
 8001a34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <_Z14move_directionssssmh+0x350>)
 8001a36:	601a      	str	r2, [r3, #0]
  debug1 = speed_run  * alpha[1];
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a52:	ee17 2a90 	vmov	r2, s15
 8001a56:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <_Z14move_directionssssmh+0x354>)
 8001a58:	601a      	str	r2, [r3, #0]
  debug2 = speed_run  * alpha[2];
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a74:	ee17 2a90 	vmov	r2, s15
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <_Z14move_directionssssmh+0x358>)
 8001a7a:	601a      	str	r2, [r3, #0]
  debug3 = speed_run  * alpha[3];
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a96:	ee17 2a90 	vmov	r2, s15
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <_Z14move_directionssssmh+0x35c>)
 8001a9c:	601a      	str	r2, [r3, #0]
  real_v_rotate = speed_rotate;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <_Z14move_directionssssmh+0x330>)
 8001aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <_Z14move_directionssssmh+0x360>)
 8001aa8:	601a      	str	r2, [r3, #0]
  //run_dc(0,pwm[0]);
  //Debug("pwm[0] = %d pwm[1] = %d  pwm[2] = %d  pwm[3] = %d",pwm[0],pwm[1],pwm[2],pwm[3] );

//  Send_speed_UART(&huart3, DC[0].address_DC, pwm[0], DC[1].address_DC, pwm[1], DC[2].address_DC, pwm[2], DC[3].address_DC, pwm[3]);

  return speed_run;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <_Z14move_directionssssmh+0x32c>)
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]

}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3724      	adds	r7, #36	@ 0x24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}
 8001ab8:	a2529d39 	.word	0xa2529d39
 8001abc:	3f91df46 	.word	0x3f91df46
 8001ac0:	200000f4 	.word	0x200000f4
 8001ac4:	200000f0 	.word	0x200000f0
 8001ac8:	200000f8 	.word	0x200000f8
 8001acc:	200006cc 	.word	0x200006cc
 8001ad0:	40240000 	.word	0x40240000
 8001ad4:	200000e8 	.word	0x200000e8
 8001ad8:	200000c0 	.word	0x200000c0
 8001adc:	200000c4 	.word	0x200000c4
 8001ae0:	200000c8 	.word	0x200000c8
 8001ae4:	200000cc 	.word	0x200000cc
 8001ae8:	200000d0 	.word	0x200000d0
 8001aec:	200000d4 	.word	0x200000d4
 8001af0:	200000d8 	.word	0x200000d8
 8001af4:	200000dc 	.word	0x200000dc
 8001af8:	200000e0 	.word	0x200000e0

08001afc <_Z14ps3_pid_doublel>:
		stop_all();
		//angle_rot = compass();
	}
}

void ps3_pid_double(int32_t pwm){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	6078      	str	r0, [r7, #4]
	static int16_t ag_rot = 0;
	static int16_t ag_tt = 0;
	static uint32_t time_delay =0;
	//move_direction(ag_rot,70,ag_tt,100,1,1);

		ag_tt = ag_rot;
 8001b04:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <_Z14ps3_pid_doublel+0x6c>)
 8001b06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <_Z14ps3_pid_doublel+0x70>)
 8001b0c:	801a      	strh	r2, [r3, #0]
		move_direction(ag_rot,250,ag_tt,pwm,10,10); // dùng như hàm move
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <_Z14ps3_pid_doublel+0x6c>)
 8001b10:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <_Z14ps3_pid_doublel+0x70>)
 8001b16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	210a      	movs	r1, #10
 8001b20:	9101      	str	r1, [sp, #4]
 8001b22:	210a      	movs	r1, #10
 8001b24:	9100      	str	r1, [sp, #0]
 8001b26:	21fa      	movs	r1, #250	@ 0xfa
 8001b28:	f7ff fe36 	bl	8001798 <_Z14move_directionssssmh>
		}
	   else if (but_data == button_R1){
		xoay_trai(250);
		}
		*/
		if (HAL_GetTick() - time_delay  >= 10000){
 8001b2c:	f001 fde4 	bl	80036f8 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <_Z14ps3_pid_doublel+0x74>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf8c      	ite	hi
 8001b40:	2301      	movhi	r3, #1
 8001b42:	2300      	movls	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <_Z14ps3_pid_doublel+0x64>
		time_delay = HAL_GetTick();
 8001b4a:	f001 fdd5 	bl	80036f8 <HAL_GetTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <_Z14ps3_pid_doublel+0x74>)
 8001b52:	6013      	str	r3, [r2, #0]

		ag_rot = compass();
 8001b54:	f7ff faec 	bl	8001130 <_Z7compassv>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b02      	ldr	r3, [pc, #8]	@ (8001b68 <_Z14ps3_pid_doublel+0x6c>)
 8001b5e:	801a      	strh	r2, [r3, #0]
		}
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200000fa 	.word	0x200000fa
 8001b6c:	200000fc 	.word	0x200000fc
 8001b70:	20000100 	.word	0x20000100

08001b74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <vApplicationGetIdleTaskMemory+0x30>)
 8001b8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000104 	.word	0x20000104
 8001ba4:	20000158 	.word	0x20000158

08001ba8 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bfb8      	it	lt
 8001bb6:	425b      	neglt	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_ts>:
		Motor(TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *IN1_Port, uint16_t IN1, GPIO_TypeDef *IN2_Port, uint16_t IN2,int16_t angle_val):
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
			htim(htim),Channel(Channel),IN1_Port(IN1_Port),IN1(IN1),IN2_Port(IN2_Port),IN2(IN2){
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8b3a      	ldrh	r2, [r7, #24]
 8001be8:	819a      	strh	r2, [r3, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8c3a      	ldrh	r2, [r7, #32]
 8001bf4:	829a      	strh	r2, [r3, #20]
			angle[0] = angle_val;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bfa:	82da      	strh	r2, [r3, #22]
			if(angle[0] > 0) angle[1] = angle[0] - 900;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	dd09      	ble.n	8001c1a <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_ts+0x56>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	831a      	strh	r2, [r3, #24]
			if(angle[0] < 0) angle[1] = angle[0] + 900;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	da09      	bge.n	8001c38 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_ts+0x74>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	831a      	strh	r2, [r3, #24]
		}
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b094      	sub	sp, #80	@ 0x50
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4e:	f001 fd1d 	bl	800368c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c52:	f000 faa7 	bl	80021a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c56:	f000 ff91 	bl	8002b7c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001c5a:	f000 fb17 	bl	800228c <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 8001c5e:	f000 fb49 	bl	80022f4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001c62:	f000 fba9 	bl	80023b8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8001c66:	f000 fc05 	bl	8002474 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001c6a:	f000 fc61 	bl	8002530 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8001c6e:	f000 fcbd 	bl	80025ec <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8001c72:	f000 fd7b 	bl	800276c <_ZL12MX_TIM8_Initv>
  MX_TIM9_Init();
 8001c76:	f000 fe43 	bl	8002900 <_ZL12MX_TIM9_Initv>
  MX_UART4_Init();
 8001c7a:	f000 fec7 	bl	8002a0c <_ZL13MX_UART4_Initv>
  MX_USART1_UART_Init();
 8001c7e:	f000 fef3 	bl	8002a68 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8001c82:	f000 ff1f 	bl	8002ac4 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8001c86:	f000 ff4b 	bl	8002b20 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4858      	ldr	r0, [pc, #352]	@ (8001df0 <main+0x1a8>)
 8001c8e:	f002 ff47 	bl	8004b20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 8001c92:	2104      	movs	r1, #4
 8001c94:	4856      	ldr	r0, [pc, #344]	@ (8001df0 <main+0x1a8>)
 8001c96:	f002 ff43 	bl	8004b20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_3);
 8001c9a:	2108      	movs	r1, #8
 8001c9c:	4854      	ldr	r0, [pc, #336]	@ (8001df0 <main+0x1a8>)
 8001c9e:	f002 ff3f 	bl	8004b20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);
 8001ca2:	210c      	movs	r1, #12
 8001ca4:	4852      	ldr	r0, [pc, #328]	@ (8001df0 <main+0x1a8>)
 8001ca6:	f002 ff3b 	bl	8004b20 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001caa:	2100      	movs	r1, #0
 8001cac:	4851      	ldr	r0, [pc, #324]	@ (8001df4 <main+0x1ac>)
 8001cae:	f002 ff37 	bl	8004b20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	484f      	ldr	r0, [pc, #316]	@ (8001df4 <main+0x1ac>)
 8001cb6:	f002 ff33 	bl	8004b20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_3);
 8001cba:	2108      	movs	r1, #8
 8001cbc:	484d      	ldr	r0, [pc, #308]	@ (8001df4 <main+0x1ac>)
 8001cbe:	f002 ff2f 	bl	8004b20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8001cc2:	210c      	movs	r1, #12
 8001cc4:	484b      	ldr	r0, [pc, #300]	@ (8001df4 <main+0x1ac>)
 8001cc6:	f002 ff2b 	bl	8004b20 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	484a      	ldr	r0, [pc, #296]	@ (8001df8 <main+0x1b0>)
 8001cce:	f002 ff27 	bl	8004b20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_2);
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	4848      	ldr	r0, [pc, #288]	@ (8001df8 <main+0x1b0>)
 8001cd6:	f002 ff23 	bl	8004b20 <HAL_TIM_PWM_Start>


	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001cda:	213c      	movs	r1, #60	@ 0x3c
 8001cdc:	4847      	ldr	r0, [pc, #284]	@ (8001dfc <main+0x1b4>)
 8001cde:	f003 f88d 	bl	8004dfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001ce2:	213c      	movs	r1, #60	@ 0x3c
 8001ce4:	4846      	ldr	r0, [pc, #280]	@ (8001e00 <main+0x1b8>)
 8001ce6:	f003 f889 	bl	8004dfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001cea:	213c      	movs	r1, #60	@ 0x3c
 8001cec:	4845      	ldr	r0, [pc, #276]	@ (8001e04 <main+0x1bc>)
 8001cee:	f003 f885 	bl	8004dfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001cf2:	213c      	movs	r1, #60	@ 0x3c
 8001cf4:	4844      	ldr	r0, [pc, #272]	@ (8001e08 <main+0x1c0>)
 8001cf6:	f003 f881 	bl	8004dfc <HAL_TIM_Encoder_Start_IT>

	HAL_TIM_Base_Start_IT(&htim1);
 8001cfa:	4840      	ldr	r0, [pc, #256]	@ (8001dfc <main+0x1b4>)
 8001cfc:	f002 fe50 	bl	80049a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d00:	483f      	ldr	r0, [pc, #252]	@ (8001e00 <main+0x1b8>)
 8001d02:	f002 fe4d 	bl	80049a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001d06:	483f      	ldr	r0, [pc, #252]	@ (8001e04 <main+0x1bc>)
 8001d08:	f002 fe4a 	bl	80049a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001d0c:	483e      	ldr	r0, [pc, #248]	@ (8001e08 <main+0x1c0>)
 8001d0e:	f002 fe47 	bl	80049a0 <HAL_TIM_Base_Start_IT>

	__HAL_RCC_TIM1_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <main+0x1c4>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e0c <main+0x1c4>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b3a      	ldr	r3, [pc, #232]	@ (8001e0c <main+0x1c4>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <main+0x1c4>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a35      	ldr	r2, [pc, #212]	@ (8001e0c <main+0x1c4>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <main+0x1c4>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e0c <main+0x1c4>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a2e      	ldr	r2, [pc, #184]	@ (8001e0c <main+0x1c4>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <main+0x1c4>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM4_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <main+0x1c4>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <main+0x1c4>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d76:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <main+0x1c4>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(pidMutex);
 8001d82:	2300      	movs	r3, #0
 8001d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d86:	2300      	movs	r3, #0
 8001d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
	pidMutex = osMutexCreate(osMutex(pidMutex));
 8001d8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 ffb3 	bl	8006cfa <osMutexCreate>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a1e      	ldr	r2, [pc, #120]	@ (8001e10 <main+0x1c8>)
 8001d98:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task01 */
  osThreadDef(task01, StartTask01, osPriorityRealtime, 0, 128);
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <main+0x1cc>)
 8001d9c:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001da0:	461d      	mov	r5, r3
 8001da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    task01Handle = osThreadCreate(osThread(task01), NULL);
 8001dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 ff40 	bl	8006c3a <osThreadCreate>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a16      	ldr	r2, [pc, #88]	@ (8001e18 <main+0x1d0>)
 8001dbe:	6013      	str	r3, [r2, #0]
  /* definition and creation of task02 */
  osThreadDef(task02, StartTask02, osPriorityHigh, 0, 128);
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <main+0x1d4>)
 8001dc2:	f107 0410 	add.w	r4, r7, #16
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task01Handle = osThreadCreate(osThread(task02), NULL);
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 ff2d 	bl	8006c3a <osThreadCreate>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <main+0x1d0>)
 8001de4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001de6:	f004 ff21 	bl	8006c2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dea:	bf00      	nop
 8001dec:	e7fd      	b.n	8001dea <main+0x1a2>
 8001dee:	bf00      	nop
 8001df0:	200004cc 	.word	0x200004cc
 8001df4:	20000514 	.word	0x20000514
 8001df8:	2000055c 	.word	0x2000055c
 8001dfc:	200003ac 	.word	0x200003ac
 8001e00:	200003f4 	.word	0x200003f4
 8001e04:	2000043c 	.word	0x2000043c
 8001e08:	20000484 	.word	0x20000484
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	200006c8 	.word	0x200006c8
 8001e14:	0800a4c0 	.word	0x0800a4c0
 8001e18:	200006c4 	.word	0x200006c4
 8001e1c:	0800a4e4 	.word	0x0800a4e4

08001e20 <_Z11StartTask01PKv>:
  * @brief System Clock Configuration
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartTask01(void const * argument)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
  {
	  if(osMutexWait(pidMutex, osWaitForever) == osOK) {
 8001e28:	4b3a      	ldr	r3, [pc, #232]	@ (8001f14 <_Z11StartTask01PKv+0xf4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 ff7b 	bl	8006d2c <osMutexWait>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d061      	beq.n	8001f0a <_Z11StartTask01PKv+0xea>
		  cnt2 = get_encoder(&cnt2,&level_count2,&htim2,10000);
 8001e46:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e4a:	4a33      	ldr	r2, [pc, #204]	@ (8001f18 <_Z11StartTask01PKv+0xf8>)
 8001e4c:	4933      	ldr	r1, [pc, #204]	@ (8001f1c <_Z11StartTask01PKv+0xfc>)
 8001e4e:	4834      	ldr	r0, [pc, #208]	@ (8001f20 <_Z11StartTask01PKv+0x100>)
 8001e50:	f7ff f804 	bl	8000e5c <_Z11get_encoderPlS_P17TIM_HandleTypeDefs>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a32      	ldr	r2, [pc, #200]	@ (8001f20 <_Z11StartTask01PKv+0x100>)
 8001e58:	6013      	str	r3, [r2, #0]
		  	        speeden2 = get_speed(&cnt2,&speeden2,&level_count2,&htim2,1000,0);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <_Z11StartTask01PKv+0xf8>)
 8001e66:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <_Z11StartTask01PKv+0xfc>)
 8001e68:	492e      	ldr	r1, [pc, #184]	@ (8001f24 <_Z11StartTask01PKv+0x104>)
 8001e6a:	482d      	ldr	r0, [pc, #180]	@ (8001f20 <_Z11StartTask01PKv+0x100>)
 8001e6c:	f7ff f836 	bl	8000edc <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a2c      	ldr	r2, [pc, #176]	@ (8001f24 <_Z11StartTask01PKv+0x104>)
 8001e74:	6013      	str	r3, [r2, #0]
	       cnt1 = get_encoder(&cnt1,&level_count1,&htim1,10000);
 8001e76:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001f28 <_Z11StartTask01PKv+0x108>)
 8001e7c:	492b      	ldr	r1, [pc, #172]	@ (8001f2c <_Z11StartTask01PKv+0x10c>)
 8001e7e:	482c      	ldr	r0, [pc, #176]	@ (8001f30 <_Z11StartTask01PKv+0x110>)
 8001e80:	f7fe ffec 	bl	8000e5c <_Z11get_encoderPlS_P17TIM_HandleTypeDefs>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4a2a      	ldr	r2, [pc, #168]	@ (8001f30 <_Z11StartTask01PKv+0x110>)
 8001e88:	6013      	str	r3, [r2, #0]
	        		speeden1 = get_speed(&cnt1,&speeden1,&level_count1,&htim1,1000,1);
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <_Z11StartTask01PKv+0x108>)
 8001e96:	4a25      	ldr	r2, [pc, #148]	@ (8001f2c <_Z11StartTask01PKv+0x10c>)
 8001e98:	4926      	ldr	r1, [pc, #152]	@ (8001f34 <_Z11StartTask01PKv+0x114>)
 8001e9a:	4825      	ldr	r0, [pc, #148]	@ (8001f30 <_Z11StartTask01PKv+0x110>)
 8001e9c:	f7ff f81e 	bl	8000edc <_Z9get_speedPlS_S_P17TIM_HandleTypeDefmh>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <_Z11StartTask01PKv+0x114>)
 8001ea4:	6013      	str	r3, [r2, #0]
	       really_speed = abs((int32_t)((speeden1 - speeden2) / 2.0));
 8001ea6:	4b23      	ldr	r3, [pc, #140]	@ (8001f34 <_Z11StartTask01PKv+0x114>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <_Z11StartTask01PKv+0x104>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fadf 	bl	8000474 <__aeabi_i2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ebe:	f7fe fc6d 	bl	800079c <__aeabi_ddiv>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fdd7 	bl	8000a7c <__aeabi_d2iz>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fe69 	bl	8001ba8 <_ZSt3absl>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <_Z11StartTask01PKv+0x118>)
 8001eda:	6013      	str	r3, [r2, #0]
	       //target_speed = (6000/7)*receivedPacket.var1;
	       target_speed = (int32_t)(6000/7)*0.25;
 8001edc:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <_Z11StartTask01PKv+0x11c>)
 8001ede:	22d6      	movs	r2, #214	@ 0xd6
 8001ee0:	601a      	str	r2, [r3, #0]
	        pwm_out = pid_speed(&really_speed,&target_speed,0.9,0.7,0.03);
 8001ee2:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8001f40 <_Z11StartTask01PKv+0x120>
 8001ee6:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8001f44 <_Z11StartTask01PKv+0x124>
 8001eea:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001f48 <_Z11StartTask01PKv+0x128>
 8001eee:	4913      	ldr	r1, [pc, #76]	@ (8001f3c <_Z11StartTask01PKv+0x11c>)
 8001ef0:	4811      	ldr	r0, [pc, #68]	@ (8001f38 <_Z11StartTask01PKv+0x118>)
 8001ef2:	f7ff f841 	bl	8000f78 <_Z9pid_speedPlS_fff>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <_Z11StartTask01PKv+0x12c>)
 8001efa:	6013      	str	r3, [r2, #0]
	        osMutexRelease(pidMutex);
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <_Z11StartTask01PKv+0xf4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 ff61 	bl	8006dc8 <osMutexRelease>
	        uart2();
 8001f06:	f7ff fa13 	bl	8001330 <_Z5uart2v>
	      }

      osDelay(100);
 8001f0a:	2064      	movs	r0, #100	@ 0x64
 8001f0c:	f004 fee1 	bl	8006cd2 <osDelay>
	  if(osMutexWait(pidMutex, osWaitForever) == osOK) {
 8001f10:	e78a      	b.n	8001e28 <_Z11StartTask01PKv+0x8>
 8001f12:	bf00      	nop
 8001f14:	200006c8 	.word	0x200006c8
 8001f18:	200003f4 	.word	0x200003f4
 8001f1c:	20000040 	.word	0x20000040
 8001f20:	2000003c 	.word	0x2000003c
 8001f24:	20000044 	.word	0x20000044
 8001f28:	200003ac 	.word	0x200003ac
 8001f2c:	20000034 	.word	0x20000034
 8001f30:	20000030 	.word	0x20000030
 8001f34:	20000038 	.word	0x20000038
 8001f38:	2000004c 	.word	0x2000004c
 8001f3c:	20000048 	.word	0x20000048
 8001f40:	3cf5c28f 	.word	0x3cf5c28f
 8001f44:	3f333333 	.word	0x3f333333
 8001f48:	3f666666 	.word	0x3f666666
 8001f4c:	20000740 	.word	0x20000740

08001f50 <_Z11StartTask02PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask02(void const * argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  while(1)
  {
	 if(osMutexWait(pidMutex, osWaitForever) == osOK) {
 8001f58:	4b89      	ldr	r3, [pc, #548]	@ (8002180 <_Z11StartTask02PKv+0x230>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fee3 	bl	8006d2c <osMutexWait>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <_Z11StartTask02PKv+0x8>
		 ps3_pid_double(abs(pwm_out));
 8001f76:	4b83      	ldr	r3, [pc, #524]	@ (8002184 <_Z11StartTask02PKv+0x234>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fe14 	bl	8001ba8 <_ZSt3absl>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fdba 	bl	8001afc <_Z14ps3_pid_doublel>
		 angle_goc = compass();
 8001f88:	f7ff f8d2 	bl	8001130 <_Z7compassv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b7d      	ldr	r3, [pc, #500]	@ (8002188 <_Z11StartTask02PKv+0x238>)
 8001f92:	801a      	strh	r2, [r3, #0]
		 //ps3_pid();

			 static bool flag = true;
			  if (but_data == button_L1 && flag ){
 8001f94:	4b7d      	ldr	r3, [pc, #500]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d11a      	bne.n	8001fd2 <_Z11StartTask02PKv+0x82>
 8001f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d016      	beq.n	8001fd2 <_Z11StartTask02PKv+0x82>
				  	kp += 0.05;
 8001fa4:	4b7b      	ldr	r3, [pc, #492]	@ (8002194 <_Z11StartTask02PKv+0x244>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa75 	bl	8000498 <__aeabi_f2d>
 8001fae:	a370      	add	r3, pc, #448	@ (adr r3, 8002170 <_Z11StartTask02PKv+0x220>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe f912 	bl	80001dc <__adddf3>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f7fe fd84 	bl	8000acc <__aeabi_d2f>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a73      	ldr	r2, [pc, #460]	@ (8002194 <_Z11StartTask02PKv+0x244>)
 8001fc8:	6013      	str	r3, [r2, #0]
				  	flag = false;
 8001fca:	4b71      	ldr	r3, [pc, #452]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e0c7      	b.n	8002162 <_Z11StartTask02PKv+0x212>
			  }
			  else if (but_data == button_L2 && flag){
 8001fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	2b40      	cmp	r3, #64	@ 0x40
 8001fd8:	d11a      	bne.n	8002010 <_Z11StartTask02PKv+0xc0>
 8001fda:	4b6d      	ldr	r3, [pc, #436]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <_Z11StartTask02PKv+0xc0>
			  		kp-= 0.05;
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8002194 <_Z11StartTask02PKv+0x244>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa56 	bl	8000498 <__aeabi_f2d>
 8001fec:	a360      	add	r3, pc, #384	@ (adr r3, 8002170 <_Z11StartTask02PKv+0x220>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe f8f1 	bl	80001d8 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd65 	bl	8000acc <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	4a63      	ldr	r2, [pc, #396]	@ (8002194 <_Z11StartTask02PKv+0x244>)
 8002006:	6013      	str	r3, [r2, #0]
			  		flag = false;
 8002008:	4b61      	ldr	r3, [pc, #388]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e0a8      	b.n	8002162 <_Z11StartTask02PKv+0x212>
			  }
			  else if (but_data == button_right && flag ){
 8002010:	4b5e      	ldr	r3, [pc, #376]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11a      	bne.n	800204e <_Z11StartTask02PKv+0xfe>
 8002018:	4b5d      	ldr	r3, [pc, #372]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d016      	beq.n	800204e <_Z11StartTask02PKv+0xfe>
			  		  	ki += 0.01;
 8002020:	4b5d      	ldr	r3, [pc, #372]	@ (8002198 <_Z11StartTask02PKv+0x248>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fa37 	bl	8000498 <__aeabi_f2d>
 800202a:	a353      	add	r3, pc, #332	@ (adr r3, 8002178 <_Z11StartTask02PKv+0x228>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe f8d4 	bl	80001dc <__adddf3>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd46 	bl	8000acc <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	4a55      	ldr	r2, [pc, #340]	@ (8002198 <_Z11StartTask02PKv+0x248>)
 8002044:	6013      	str	r3, [r2, #0]
			  		  	flag = false;
 8002046:	4b52      	ldr	r3, [pc, #328]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e089      	b.n	8002162 <_Z11StartTask02PKv+0x212>
			  	  }
			  else if (but_data == button_left && flag){
 800204e:	4b4f      	ldr	r3, [pc, #316]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11a      	bne.n	800208c <_Z11StartTask02PKv+0x13c>
 8002056:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <_Z11StartTask02PKv+0x13c>
			  	  		ki-= 0.01;
 800205e:	4b4e      	ldr	r3, [pc, #312]	@ (8002198 <_Z11StartTask02PKv+0x248>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa18 	bl	8000498 <__aeabi_f2d>
 8002068:	a343      	add	r3, pc, #268	@ (adr r3, 8002178 <_Z11StartTask02PKv+0x228>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe f8b3 	bl	80001d8 <__aeabi_dsub>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fd27 	bl	8000acc <__aeabi_d2f>
 800207e:	4603      	mov	r3, r0
 8002080:	4a45      	ldr	r2, [pc, #276]	@ (8002198 <_Z11StartTask02PKv+0x248>)
 8002082:	6013      	str	r3, [r2, #0]
			  	  		flag = false;
 8002084:	4b42      	ldr	r3, [pc, #264]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e06a      	b.n	8002162 <_Z11StartTask02PKv+0x212>
			  	  }
			 else if (but_data == button_triangle && flag ){
 800208c:	4b3f      	ldr	r3, [pc, #252]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002094:	d11a      	bne.n	80020cc <_Z11StartTask02PKv+0x17c>
 8002096:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <_Z11StartTask02PKv+0x17c>
			  		  	kd += 0.01;
 800209e:	4b3f      	ldr	r3, [pc, #252]	@ (800219c <_Z11StartTask02PKv+0x24c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe f9f8 	bl	8000498 <__aeabi_f2d>
 80020a8:	a333      	add	r3, pc, #204	@ (adr r3, 8002178 <_Z11StartTask02PKv+0x228>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe f895 	bl	80001dc <__adddf3>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7fe fd07 	bl	8000acc <__aeabi_d2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a36      	ldr	r2, [pc, #216]	@ (800219c <_Z11StartTask02PKv+0x24c>)
 80020c2:	6013      	str	r3, [r2, #0]
			  		  	flag = false;
 80020c4:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e04a      	b.n	8002162 <_Z11StartTask02PKv+0x212>
			  	  }
			else if (but_data == button_cross && flag){
 80020cc:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d4:	d11a      	bne.n	800210c <_Z11StartTask02PKv+0x1bc>
 80020d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <_Z11StartTask02PKv+0x1bc>
			  	  		kd-= 0.01;
 80020de:	4b2f      	ldr	r3, [pc, #188]	@ (800219c <_Z11StartTask02PKv+0x24c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f9d8 	bl	8000498 <__aeabi_f2d>
 80020e8:	a323      	add	r3, pc, #140	@ (adr r3, 8002178 <_Z11StartTask02PKv+0x228>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe f873 	bl	80001d8 <__aeabi_dsub>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fce7 	bl	8000acc <__aeabi_d2f>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a26      	ldr	r2, [pc, #152]	@ (800219c <_Z11StartTask02PKv+0x24c>)
 8002102:	6013      	str	r3, [r2, #0]
			  	  		flag = false;
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e02a      	b.n	8002162 <_Z11StartTask02PKv+0x212>
			  	  }
			 else if (but_data == button_square && flag ){
 800210c:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002114:	d10c      	bne.n	8002130 <_Z11StartTask02PKv+0x1e0>
 8002116:	4b1e      	ldr	r3, [pc, #120]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <_Z11StartTask02PKv+0x1e0>
				  		  	target_speed += 10;
 800211e:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <_Z11StartTask02PKv+0x250>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330a      	adds	r3, #10
 8002124:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <_Z11StartTask02PKv+0x250>)
 8002126:	6013      	str	r3, [r2, #0]
				  		  	flag = false;
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e018      	b.n	8002162 <_Z11StartTask02PKv+0x212>
				  	  }
				else if (but_data == button_circle && flag){
 8002130:	4b16      	ldr	r3, [pc, #88]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002138:	d10c      	bne.n	8002154 <_Z11StartTask02PKv+0x204>
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <_Z11StartTask02PKv+0x204>
							target_speed-= 10;
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <_Z11StartTask02PKv+0x250>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3b0a      	subs	r3, #10
 8002148:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <_Z11StartTask02PKv+0x250>)
 800214a:	6013      	str	r3, [r2, #0]
				  	  		flag = false;
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e006      	b.n	8002162 <_Z11StartTask02PKv+0x212>
				  	  }

			else if (but_data == 0 )flag = true;
 8002154:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <_Z11StartTask02PKv+0x23c>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <_Z11StartTask02PKv+0x212>
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <_Z11StartTask02PKv+0x240>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]

	      osMutexRelease(pidMutex);
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <_Z11StartTask02PKv+0x230>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fe2e 	bl	8006dc8 <osMutexRelease>
	 }


    //osDelay(1);
  }
 800216c:	e6f4      	b.n	8001f58 <_Z11StartTask02PKv+0x8>
 800216e:	bf00      	nop
 8002170:	9999999a 	.word	0x9999999a
 8002174:	3fa99999 	.word	0x3fa99999
 8002178:	47ae147b 	.word	0x47ae147b
 800217c:	3f847ae1 	.word	0x3f847ae1
 8002180:	200006c8 	.word	0x200006c8
 8002184:	20000740 	.word	0x20000740
 8002188:	2000073c 	.word	0x2000073c
 800218c:	20000080 	.word	0x20000080
 8002190:	20000001 	.word	0x20000001
 8002194:	20000744 	.word	0x20000744
 8002198:	20000748 	.word	0x20000748
 800219c:	2000074c 	.word	0x2000074c
 80021a0:	20000048 	.word	0x20000048

080021a4 <_Z18SystemClock_Configv>:
  /* USER CODE END StartTask01 */
}

void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	@ 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2230      	movs	r2, #48	@ 0x30
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f008 f938 	bl	800a428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <_Z18SystemClock_Configv+0xe0>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002284 <_Z18SystemClock_Configv+0xe0>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <_Z18SystemClock_Configv+0xe0>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <_Z18SystemClock_Configv+0xe4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a26      	ldr	r2, [pc, #152]	@ (8002288 <_Z18SystemClock_Configv+0xe4>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <_Z18SystemClock_Configv+0xe4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002200:	2302      	movs	r3, #2
 8002202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002204:	2301      	movs	r3, #1
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002208:	2310      	movs	r3, #16
 800220a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220c:	2302      	movs	r3, #2
 800220e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002210:	2300      	movs	r3, #0
 8002212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002214:	2308      	movs	r3, #8
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002218:	23a8      	movs	r3, #168	@ 0xa8
 800221a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002220:	2304      	movs	r3, #4
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4618      	mov	r0, r3
 800222a:	f001 fedf 	bl	8003fec <HAL_RCC_OscConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800223e:	f000 fd43 	bl	8002cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002242:	230f      	movs	r3, #15
 8002244:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002246:	2302      	movs	r3, #2
 8002248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800224e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002258:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	2105      	movs	r1, #5
 8002260:	4618      	mov	r0, r3
 8002262:	f002 f93b 	bl	80044dc <HAL_RCC_ClockConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002276:	f000 fd27 	bl	8002cc8 <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3750      	adds	r7, #80	@ 0x50
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000

0800228c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002292:	4a16      	ldr	r2, [pc, #88]	@ (80022ec <_ZL12MX_I2C1_Initv+0x60>)
 8002294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002296:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002298:	4a15      	ldr	r2, [pc, #84]	@ (80022f0 <_ZL12MX_I2C1_Initv+0x64>)
 800229a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022a2:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80022aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022b0:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022bc:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c8:	4807      	ldr	r0, [pc, #28]	@ (80022e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80022ca:	f001 fd4b 	bl	8003d64 <HAL_I2C_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80022de:	f000 fcf3 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000358 	.word	0x20000358
 80022ec:	40005400 	.word	0x40005400
 80022f0:	000186a0 	.word	0x000186a0

080022f4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	@ 0x30
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	2224      	movs	r2, #36	@ 0x24
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f008 f890 	bl	800a428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002310:	4b27      	ldr	r3, [pc, #156]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002312:	4a28      	ldr	r2, [pc, #160]	@ (80023b4 <_ZL12MX_TIM1_Initv+0xc0>)
 8002314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002316:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b24      	ldr	r3, [pc, #144]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002322:	4b23      	ldr	r3, [pc, #140]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002324:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002328:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232a:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002330:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002332:	2200      	movs	r2, #0
 8002334:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800233c:	2301      	movs	r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002344:	2301      	movs	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002354:	2301      	movs	r3, #1
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	4619      	mov	r1, r3
 8002366:	4812      	ldr	r0, [pc, #72]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002368:	f002 fca2 	bl	8004cb0 <HAL_TIM_Encoder_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 800237c:	f000 fca4 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002380:	2300      	movs	r3, #0
 8002382:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	4619      	mov	r1, r3
 800238c:	4808      	ldr	r0, [pc, #32]	@ (80023b0 <_ZL12MX_TIM1_Initv+0xbc>)
 800238e:	f003 fba1 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf14      	ite	ne
 8002398:	2301      	movne	r3, #1
 800239a:	2300      	moveq	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 80023a2:	f000 fc91 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	3730      	adds	r7, #48	@ 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200003ac 	.word	0x200003ac
 80023b4:	40010000 	.word	0x40010000

080023b8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	@ 0x30
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	2224      	movs	r2, #36	@ 0x24
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f008 f82e 	bl	800a428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023d4:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 80023d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023dc:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e2:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023e8:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 80023ea:	f04f 32ff 	mov.w	r2, #4294967295
 80023ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80023fc:	2302      	movs	r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002404:	2301      	movs	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002414:	2301      	movs	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4619      	mov	r1, r3
 8002426:	4812      	ldr	r0, [pc, #72]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 8002428:	f002 fc42 	bl	8004cb0 <HAL_TIM_Encoder_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800243c:	f000 fc44 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	4619      	mov	r1, r3
 800244c:	4808      	ldr	r0, [pc, #32]	@ (8002470 <_ZL12MX_TIM2_Initv+0xb8>)
 800244e:	f003 fb41 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002462:	f000 fc31 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	3730      	adds	r7, #48	@ 0x30
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200003f4 	.word	0x200003f4

08002474 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	@ 0x30
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	2224      	movs	r2, #36	@ 0x24
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f007 ffd0 	bl	800a428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 8002492:	4a26      	ldr	r2, [pc, #152]	@ (800252c <_ZL12MX_TIM3_Initv+0xb8>)
 8002494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002496:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024a2:	4b21      	ldr	r3, [pc, #132]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 80024a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024be:	2301      	movs	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ce:	2301      	movs	r3, #1
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	4619      	mov	r1, r3
 80024e0:	4811      	ldr	r0, [pc, #68]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 80024e2:	f002 fbe5 	bl	8004cb0 <HAL_TIM_Encoder_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80024f6:	f000 fbe7 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4808      	ldr	r0, [pc, #32]	@ (8002528 <_ZL12MX_TIM3_Initv+0xb4>)
 8002508:	f003 fae4 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800251c:	f000 fbd4 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	@ 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000043c 	.word	0x2000043c
 800252c:	40000400 	.word	0x40000400

08002530 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	@ 0x30
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	2224      	movs	r2, #36	@ 0x24
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f007 ff72 	bl	800a428 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800254c:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 800254e:	4a26      	ldr	r2, [pc, #152]	@ (80025e8 <_ZL12MX_TIM4_Initv+0xb8>)
 8002550:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002552:	4b24      	ldr	r3, [pc, #144]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002558:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800255e:	4b21      	ldr	r3, [pc, #132]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 8002560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002564:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002566:	4b1f      	ldr	r3, [pc, #124]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002572:	2301      	movs	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800257a:	2301      	movs	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	4619      	mov	r1, r3
 800259c:	4811      	ldr	r0, [pc, #68]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 800259e:	f002 fb87 	bl	8004cb0 <HAL_TIM_Encoder_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 80025b2:	f000 fb89 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4808      	ldr	r0, [pc, #32]	@ (80025e4 <_ZL12MX_TIM4_Initv+0xb4>)
 80025c4:	f003 fa86 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 80025d8:	f000 fb76 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	@ 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000484 	.word	0x20000484
 80025e8:	40000800 	.word	0x40000800

080025ec <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08e      	sub	sp, #56	@ 0x38
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
 8002618:	615a      	str	r2, [r3, #20]
 800261a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800261c:	4b51      	ldr	r3, [pc, #324]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 800261e:	4a52      	ldr	r2, [pc, #328]	@ (8002768 <_ZL12MX_TIM5_Initv+0x17c>)
 8002620:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 327;
 8002622:	4b50      	ldr	r3, [pc, #320]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 8002624:	f240 1247 	movw	r2, #327	@ 0x147
 8002628:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262a:	4b4e      	ldr	r3, [pc, #312]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8002630:	4b4c      	ldr	r3, [pc, #304]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 8002632:	22ff      	movs	r2, #255	@ 0xff
 8002634:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	4b4b      	ldr	r3, [pc, #300]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263c:	4b49      	ldr	r3, [pc, #292]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002642:	4848      	ldr	r0, [pc, #288]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 8002644:	f002 f95c 	bl	8004900 <HAL_TIM_Base_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 8002658:	f000 fb36 	bl	8002cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002666:	4619      	mov	r1, r3
 8002668:	483e      	ldr	r0, [pc, #248]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 800266a:	f002 fe27 	bl	80052bc <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 800267e:	f000 fb23 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002682:	4838      	ldr	r0, [pc, #224]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 8002684:	f002 f9fc 	bl	8004a80 <HAL_TIM_PWM_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 8002698:	f000 fb16 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026a4:	f107 0320 	add.w	r3, r7, #32
 80026a8:	4619      	mov	r1, r3
 80026aa:	482e      	ldr	r0, [pc, #184]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 80026ac:	f003 fa12 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 80026c0:	f000 fb02 	bl	8002cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c4:	2360      	movs	r3, #96	@ 0x60
 80026c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2200      	movs	r2, #0
 80026d8:	4619      	mov	r1, r3
 80026da:	4822      	ldr	r0, [pc, #136]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 80026dc:	f002 fd2c 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 80026f0:	f000 faea 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2204      	movs	r2, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	481a      	ldr	r0, [pc, #104]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 80026fc:	f002 fd1c 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <_ZL12MX_TIM5_Initv+0x128>
  {
    Error_Handler();
 8002710:	f000 fada 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	2208      	movs	r2, #8
 8002718:	4619      	mov	r1, r3
 800271a:	4812      	ldr	r0, [pc, #72]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 800271c:	f002 fd0c 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <_ZL12MX_TIM5_Initv+0x148>
  {
    Error_Handler();
 8002730:	f000 faca 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	220c      	movs	r2, #12
 8002738:	4619      	mov	r1, r3
 800273a:	480a      	ldr	r0, [pc, #40]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 800273c:	f002 fcfc 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf14      	ite	ne
 8002746:	2301      	movne	r3, #1
 8002748:	2300      	moveq	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <_ZL12MX_TIM5_Initv+0x168>
  {
    Error_Handler();
 8002750:	f000 faba 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002754:	4803      	ldr	r0, [pc, #12]	@ (8002764 <_ZL12MX_TIM5_Initv+0x178>)
 8002756:	f000 fcfd 	bl	8003154 <HAL_TIM_MspPostInit>

}
 800275a:	bf00      	nop
 800275c:	3738      	adds	r7, #56	@ 0x38
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200004cc 	.word	0x200004cc
 8002768:	40000c00 	.word	0x40000c00

0800276c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b092      	sub	sp, #72	@ 0x48
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002772:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800277c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	615a      	str	r2, [r3, #20]
 800278e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	2220      	movs	r2, #32
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f007 fe46 	bl	800a428 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800279c:	4b56      	ldr	r3, [pc, #344]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 800279e:	4a57      	ldr	r2, [pc, #348]	@ (80028fc <_ZL12MX_TIM8_Initv+0x190>)
 80027a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80027a2:	4b55      	ldr	r3, [pc, #340]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027a4:	2253      	movs	r2, #83	@ 0x53
 80027a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	4b53      	ldr	r3, [pc, #332]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80027ae:	4b52      	ldr	r3, [pc, #328]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027b0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80027b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b6:	4b50      	ldr	r3, [pc, #320]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027bc:	4b4e      	ldr	r3, [pc, #312]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c2:	4b4d      	ldr	r3, [pc, #308]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027c8:	484b      	ldr	r0, [pc, #300]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027ca:	f002 f959 	bl	8004a80 <HAL_TIM_PWM_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <_ZL12MX_TIM8_Initv+0x76>
  {
    Error_Handler();
 80027de:	f000 fa73 	bl	8002cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027ee:	4619      	mov	r1, r3
 80027f0:	4841      	ldr	r0, [pc, #260]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80027f2:	f003 f96f 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <_ZL12MX_TIM8_Initv+0x9e>
  {
    Error_Handler();
 8002806:	f000 fa5f 	bl	8002cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280a:	2360      	movs	r3, #96	@ 0x60
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002816:	2300      	movs	r3, #0
 8002818:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282a:	2200      	movs	r2, #0
 800282c:	4619      	mov	r1, r3
 800282e:	4832      	ldr	r0, [pc, #200]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 8002830:	f002 fc82 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <_ZL12MX_TIM8_Initv+0xdc>
  {
    Error_Handler();
 8002844:	f000 fa40 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284c:	2204      	movs	r2, #4
 800284e:	4619      	mov	r1, r3
 8002850:	4829      	ldr	r0, [pc, #164]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 8002852:	f002 fc71 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf14      	ite	ne
 800285c:	2301      	movne	r3, #1
 800285e:	2300      	moveq	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <_ZL12MX_TIM8_Initv+0xfe>
  {
    Error_Handler();
 8002866:	f000 fa2f 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800286a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800286e:	2208      	movs	r2, #8
 8002870:	4619      	mov	r1, r3
 8002872:	4821      	ldr	r0, [pc, #132]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 8002874:	f002 fc60 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <_ZL12MX_TIM8_Initv+0x120>
  {
    Error_Handler();
 8002888:	f000 fa1e 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800288c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002890:	220c      	movs	r2, #12
 8002892:	4619      	mov	r1, r3
 8002894:	4818      	ldr	r0, [pc, #96]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 8002896:	f002 fc4f 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <_ZL12MX_TIM8_Initv+0x142>
  {
    Error_Handler();
 80028aa:	f000 fa0d 	bl	8002cc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	4809      	ldr	r0, [pc, #36]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80028d2:	f003 f97b 	bl	8005bcc <HAL_TIMEx_ConfigBreakDeadTime>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <_ZL12MX_TIM8_Initv+0x17e>
  {
    Error_Handler();
 80028e6:	f000 f9ef 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80028ea:	4803      	ldr	r0, [pc, #12]	@ (80028f8 <_ZL12MX_TIM8_Initv+0x18c>)
 80028ec:	f000 fc32 	bl	8003154 <HAL_TIM_MspPostInit>

}
 80028f0:	bf00      	nop
 80028f2:	3748      	adds	r7, #72	@ 0x48
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000514 	.word	0x20000514
 80028fc:	40010400 	.word	0x40010400

08002900 <_ZL12MX_TIM9_Initv>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	@ 0x30
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	615a      	str	r2, [r3, #20]
 8002924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002926:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 8002928:	4a37      	ldr	r2, [pc, #220]	@ (8002a08 <_ZL12MX_TIM9_Initv+0x108>)
 800292a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 83;
 800292c:	4b35      	ldr	r3, [pc, #212]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 800292e:	2253      	movs	r2, #83	@ 0x53
 8002930:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002932:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19999;
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 800293a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800293e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002940:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002946:	4b2f      	ldr	r3, [pc, #188]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800294c:	482d      	ldr	r0, [pc, #180]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 800294e:	f001 ffd7 	bl	8004900 <HAL_TIM_Base_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <_ZL12MX_TIM9_Initv+0x66>
  {
    Error_Handler();
 8002962:	f000 f9b1 	bl	8002cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800296c:	f107 0320 	add.w	r3, r7, #32
 8002970:	4619      	mov	r1, r3
 8002972:	4824      	ldr	r0, [pc, #144]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 8002974:	f002 fca2 	bl	80052bc <HAL_TIM_ConfigClockSource>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <_ZL12MX_TIM9_Initv+0x8c>
  {
    Error_Handler();
 8002988:	f000 f99e 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800298c:	481d      	ldr	r0, [pc, #116]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 800298e:	f002 f877 	bl	8004a80 <HAL_TIM_PWM_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <_ZL12MX_TIM9_Initv+0xa6>
  {
    Error_Handler();
 80029a2:	f000 f991 	bl	8002cc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a6:	2360      	movs	r3, #96	@ 0x60
 80029a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2200      	movs	r2, #0
 80029ba:	4619      	mov	r1, r3
 80029bc:	4811      	ldr	r0, [pc, #68]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 80029be:	f002 fbbb 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <_ZL12MX_TIM9_Initv+0xd6>
  {
    Error_Handler();
 80029d2:	f000 f979 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2204      	movs	r2, #4
 80029da:	4619      	mov	r1, r3
 80029dc:	4809      	ldr	r0, [pc, #36]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 80029de:	f002 fbab 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <_ZL12MX_TIM9_Initv+0xf6>
  {
    Error_Handler();
 80029f2:	f000 f969 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZL12MX_TIM9_Initv+0x104>)
 80029f8:	f000 fbac 	bl	8003154 <HAL_TIM_MspPostInit>

}
 80029fc:	bf00      	nop
 80029fe:	3730      	adds	r7, #48	@ 0x30
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2000055c 	.word	0x2000055c
 8002a08:	40014000 	.word	0x40014000

08002a0c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a10:	4b13      	ldr	r3, [pc, #76]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a12:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <_ZL13MX_UART4_Initv+0x58>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a42:	4807      	ldr	r0, [pc, #28]	@ (8002a60 <_ZL13MX_UART4_Initv+0x54>)
 8002a44:	f003 f928 	bl	8005c98 <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002a58:	f000 f936 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200005a4 	.word	0x200005a4
 8002a64:	40004c00 	.word	0x40004c00

08002a68 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a6e:	4a14      	ldr	r2, [pc, #80]	@ (8002ac0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a9e:	4807      	ldr	r0, [pc, #28]	@ (8002abc <_ZL19MX_USART1_UART_Initv+0x54>)
 8002aa0:	f003 f8fa 	bl	8005c98 <HAL_UART_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002ab4:	f000 f908 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200005ec 	.word	0x200005ec
 8002ac0:	40011000 	.word	0x40011000

08002ac4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ac8:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aca:	4a14      	ldr	r2, [pc, #80]	@ (8002b1c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aea:	220c      	movs	r2, #12
 8002aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002af4:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002afa:	4807      	ldr	r0, [pc, #28]	@ (8002b18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002afc:	f003 f8cc 	bl	8005c98 <HAL_UART_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002b10:	f000 f8da 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000634 	.word	0x20000634
 8002b1c:	40004400 	.word	0x40004400

08002b20 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b26:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b08      	ldr	r3, [pc, #32]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b56:	4807      	ldr	r0, [pc, #28]	@ (8002b74 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b58:	f003 f89e 	bl	8005c98 <HAL_UART_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002b6c:	f000 f8ac 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000067c 	.word	0x2000067c
 8002b78:	40004800 	.word	0x40004800

08002b7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	@ 0x30
 8002b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	4b40      	ldr	r3, [pc, #256]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002b9c:	f043 0310 	orr.w	r3, r3, #16
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	4b39      	ldr	r3, [pc, #228]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbe:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	4b32      	ldr	r3, [pc, #200]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a31      	ldr	r2, [pc, #196]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b2f      	ldr	r3, [pc, #188]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b2b      	ldr	r3, [pc, #172]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	4a2a      	ldr	r2, [pc, #168]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf6:	4b28      	ldr	r3, [pc, #160]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b24      	ldr	r3, [pc, #144]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	4a23      	ldr	r2, [pc, #140]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c12:	4b21      	ldr	r3, [pc, #132]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c98 <_ZL12MX_GPIO_Initv+0x11c>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MR0_in1_Pin|MR0_in2_Pin|MR1_in1_Pin|MR1_in2_Pin, GPIO_PIN_RESET);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002c40:	4816      	ldr	r0, [pc, #88]	@ (8002c9c <_ZL12MX_GPIO_Initv+0x120>)
 8002c42:	f001 f875 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|MR2_in2_Pin|MR3_in1_Pin|MR3_in2_Pin, GPIO_PIN_RESET);
 8002c46:	2200      	movs	r2, #0
 8002c48:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8002c4c:	4814      	ldr	r0, [pc, #80]	@ (8002ca0 <_ZL12MX_GPIO_Initv+0x124>)
 8002c4e:	f001 f86f 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MR0_in1_Pin MR0_in2_Pin MR1_in1_Pin MR1_in2_Pin */
  GPIO_InitStruct.Pin = MR0_in1_Pin|MR0_in2_Pin|MR1_in1_Pin|MR1_in2_Pin;
 8002c52:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	480c      	ldr	r0, [pc, #48]	@ (8002c9c <_ZL12MX_GPIO_Initv+0x120>)
 8002c6c:	f000 fec4 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 MR2_in2_Pin MR3_in1_Pin MR3_in2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|MR2_in2_Pin|MR3_in1_Pin|MR3_in2_Pin;
 8002c70:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c76:	2301      	movs	r3, #1
 8002c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4619      	mov	r1, r3
 8002c88:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <_ZL12MX_GPIO_Initv+0x124>)
 8002c8a:	f000 feb5 	bl	80039f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c8e:	bf00      	nop
 8002c90:	3730      	adds	r7, #48	@ 0x30
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020c00 	.word	0x40020c00

08002ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cb6:	f000 fd0b 	bl	80036d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40001000 	.word	0x40001000

08002cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ccc:	b672      	cpsid	i
}
 8002cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <Error_Handler+0x8>

08002cd4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af04      	add	r7, sp, #16
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d14a      	bne.n	8002d7a <_Z41__static_initialization_and_destruction_0ii+0xa6>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d145      	bne.n	8002d7a <_Z41__static_initialization_and_destruction_0ii+0xa6>
};
 8002cee:	4c25      	ldr	r4, [pc, #148]	@ (8002d84 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002cf0:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8002cf4:	9303      	str	r3, [sp, #12]
 8002cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	4b22      	ldr	r3, [pc, #136]	@ (8002d88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4920      	ldr	r1, [pc, #128]	@ (8002d8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7fe ff59 	bl	8001bc4 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_ts>
 8002d12:	341c      	adds	r4, #28
 8002d14:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002d16:	9303      	str	r3, [sp, #12]
 8002d18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	4b17      	ldr	r3, [pc, #92]	@ (8002d88 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4917      	ldr	r1, [pc, #92]	@ (8002d8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7fe ff48 	bl	8001bc4 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_ts>
 8002d34:	341c      	adds	r4, #28
 8002d36:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8002d3a:	9303      	str	r3, [sp, #12]
 8002d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d40:	9302      	str	r3, [sp, #8]
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002d4e:	2208      	movs	r2, #8
 8002d50:	490e      	ldr	r1, [pc, #56]	@ (8002d8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fe ff36 	bl	8001bc4 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_ts>
 8002d58:	f104 001c 	add.w	r0, r4, #28
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002d5e:	9303      	str	r3, [sp, #12]
 8002d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002d72:	220c      	movs	r2, #12
 8002d74:	4905      	ldr	r1, [pc, #20]	@ (8002d8c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002d76:	f7fe ff25 	bl	8001bc4 <_ZN5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftS3_ts>
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd90      	pop	{r4, r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200006cc 	.word	0x200006cc
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	200004cc 	.word	0x200004cc
 8002d90:	fffffe3e 	.word	0xfffffe3e
 8002d94:	40020c00 	.word	0x40020c00

08002d98 <_GLOBAL__sub_I_hi2c1>:
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7ff ff97 	bl	8002cd4 <_Z41__static_initialization_and_destruction_0ii>
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <HAL_MspInit+0x54>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	4a11      	ldr	r2, [pc, #68]	@ (8002dfc <HAL_MspInit+0x54>)
 8002db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <HAL_MspInit+0x54>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_MspInit+0x54>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <HAL_MspInit+0x54>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <HAL_MspInit+0x54>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	210f      	movs	r1, #15
 8002dea:	f06f 0001 	mvn.w	r0, #1
 8002dee:	f000 fd47 	bl	8003880 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800

08002e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08a      	sub	sp, #40	@ 0x28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	@ (8002e84 <HAL_I2C_MspInit+0x84>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d12b      	bne.n	8002e7a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <HAL_I2C_MspInit+0x88>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	4a17      	ldr	r2, [pc, #92]	@ (8002e88 <HAL_I2C_MspInit+0x88>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_I2C_MspInit+0x88>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e3e:	23c0      	movs	r3, #192	@ 0xc0
 8002e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e42:	2312      	movs	r3, #18
 8002e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	480c      	ldr	r0, [pc, #48]	@ (8002e8c <HAL_I2C_MspInit+0x8c>)
 8002e5a:	f000 fdcd 	bl	80039f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_I2C_MspInit+0x88>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <HAL_I2C_MspInit+0x88>)
 8002e68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_I2C_MspInit+0x88>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e7a:	bf00      	nop
 8002e7c:	3728      	adds	r7, #40	@ 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40005400 	.word	0x40005400
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020400 	.word	0x40020400

08002e90 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b090      	sub	sp, #64	@ 0x40
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a74      	ldr	r2, [pc, #464]	@ (8003080 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d12d      	bne.n	8002f0e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb6:	4b73      	ldr	r3, [pc, #460]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	4a72      	ldr	r2, [pc, #456]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec2:	4b70      	ldr	r3, [pc, #448]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ed8:	f043 0310 	orr.w	r3, r3, #16
 8002edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ede:	4b69      	ldr	r3, [pc, #420]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN0A_Pin|EN0B_Pin;
 8002eea:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f04:	4619      	mov	r1, r3
 8002f06:	4860      	ldr	r0, [pc, #384]	@ (8003088 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002f08:	f000 fd76 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f0c:	e0b3      	b.n	8003076 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f16:	d14a      	bne.n	8002fae <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f18:	2300      	movs	r3, #0
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	4a58      	ldr	r2, [pc, #352]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f28:	4b56      	ldr	r3, [pc, #344]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	4b52      	ldr	r3, [pc, #328]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3c:	4a51      	ldr	r2, [pc, #324]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f44:	4b4f      	ldr	r3, [pc, #316]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	4b4b      	ldr	r3, [pc, #300]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	4a4a      	ldr	r2, [pc, #296]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f60:	4b48      	ldr	r3, [pc, #288]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = EN1A_Pin;
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(EN1A_GPIO_Port, &GPIO_InitStruct);
 8002f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f84:	4619      	mov	r1, r3
 8002f86:	4841      	ldr	r0, [pc, #260]	@ (800308c <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002f88:	f000 fd36 	bl	80039f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN1B_Pin;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(EN1B_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	483a      	ldr	r0, [pc, #232]	@ (8003090 <HAL_TIM_Encoder_MspInit+0x200>)
 8002fa8:	f000 fd26 	bl	80039f8 <HAL_GPIO_Init>
}
 8002fac:	e063      	b.n	8003076 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM3)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a38      	ldr	r2, [pc, #224]	@ (8003094 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d12c      	bne.n	8003012 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc0:	4a30      	ldr	r2, [pc, #192]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002fc2:	f043 0302 	orr.w	r3, r3, #2
 8002fc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	4a29      	ldr	r2, [pc, #164]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe4:	4b27      	ldr	r3, [pc, #156]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = EN2A_Pin|EN2B_Pin;
 8002ff0:	23c0      	movs	r3, #192	@ 0xc0
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003000:	2302      	movs	r3, #2
 8003002:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003008:	4619      	mov	r1, r3
 800300a:	4820      	ldr	r0, [pc, #128]	@ (800308c <HAL_TIM_Encoder_MspInit+0x1fc>)
 800300c:	f000 fcf4 	bl	80039f8 <HAL_GPIO_Init>
}
 8003010:	e031      	b.n	8003076 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM4)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <HAL_TIM_Encoder_MspInit+0x208>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d12c      	bne.n	8003076 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	4b18      	ldr	r3, [pc, #96]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	4a17      	ldr	r2, [pc, #92]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6413      	str	r3, [r2, #64]	@ 0x40
 800302c:	4b15      	ldr	r3, [pc, #84]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	4a10      	ldr	r2, [pc, #64]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6313      	str	r3, [r2, #48]	@ 0x30
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EN3A_Pin|EN3B_Pin;
 8003054:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003066:	2302      	movs	r3, #2
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800306e:	4619      	mov	r1, r3
 8003070:	480a      	ldr	r0, [pc, #40]	@ (800309c <HAL_TIM_Encoder_MspInit+0x20c>)
 8003072:	f000 fcc1 	bl	80039f8 <HAL_GPIO_Init>
}
 8003076:	bf00      	nop
 8003078:	3740      	adds	r7, #64	@ 0x40
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000
 8003084:	40023800 	.word	0x40023800
 8003088:	40021000 	.word	0x40021000
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40020c00 	.word	0x40020c00

080030a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <HAL_TIM_Base_MspInit+0x64>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <HAL_TIM_Base_MspInit+0x68>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	4a13      	ldr	r2, [pc, #76]	@ (8003108 <HAL_TIM_Base_MspInit+0x68>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <HAL_TIM_Base_MspInit+0x68>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80030ce:	e012      	b.n	80030f6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <HAL_TIM_Base_MspInit+0x6c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10d      	bne.n	80030f6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <HAL_TIM_Base_MspInit+0x68>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4a09      	ldr	r2, [pc, #36]	@ (8003108 <HAL_TIM_Base_MspInit+0x68>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <HAL_TIM_Base_MspInit+0x68>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40000c00 	.word	0x40000c00
 8003108:	40023800 	.word	0x40023800
 800310c:	40014000 	.word	0x40014000

08003110 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0b      	ldr	r2, [pc, #44]	@ (800314c <HAL_TIM_PWM_MspInit+0x3c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10d      	bne.n	800313e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <HAL_TIM_PWM_MspInit+0x40>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	4a09      	ldr	r2, [pc, #36]	@ (8003150 <HAL_TIM_PWM_MspInit+0x40>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6453      	str	r3, [r2, #68]	@ 0x44
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_TIM_PWM_MspInit+0x40>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40010400 	.word	0x40010400
 8003150:	40023800 	.word	0x40023800

08003154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	@ 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a36      	ldr	r2, [pc, #216]	@ (800324c <HAL_TIM_MspPostInit+0xf8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d11e      	bne.n	80031b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	4b35      	ldr	r3, [pc, #212]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6313      	str	r3, [r2, #48]	@ 0x30
 8003186:	4b32      	ldr	r3, [pc, #200]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin|PWM_2_Pin|PWM_3_Pin;
 8003192:	230f      	movs	r3, #15
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031a2:	2302      	movs	r3, #2
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	4829      	ldr	r0, [pc, #164]	@ (8003254 <HAL_TIM_MspPostInit+0x100>)
 80031ae:	f000 fc23 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80031b2:	e047      	b.n	8003244 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM8)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a27      	ldr	r2, [pc, #156]	@ (8003258 <HAL_TIM_MspPostInit+0x104>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d11f      	bne.n	80031fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S2_Pin|S1_Pin|S4_Pin|S3_Pin;
 80031da:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80031de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e8:	2300      	movs	r3, #0
 80031ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031ec:	2303      	movs	r3, #3
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	4819      	ldr	r0, [pc, #100]	@ (800325c <HAL_TIM_MspPostInit+0x108>)
 80031f8:	f000 fbfe 	bl	80039f8 <HAL_GPIO_Init>
}
 80031fc:	e022      	b.n	8003244 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM9)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <HAL_TIM_MspPostInit+0x10c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d11d      	bne.n	8003244 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003210:	4a0f      	ldr	r2, [pc, #60]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 8003212:	f043 0310 	orr.w	r3, r3, #16
 8003216:	6313      	str	r3, [r2, #48]	@ 0x30
 8003218:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <HAL_TIM_MspPostInit+0xfc>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = S5_Pin|S6_Pin;
 8003224:	2360      	movs	r3, #96	@ 0x60
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003234:	2303      	movs	r3, #3
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	4619      	mov	r1, r3
 800323e:	4809      	ldr	r0, [pc, #36]	@ (8003264 <HAL_TIM_MspPostInit+0x110>)
 8003240:	f000 fbda 	bl	80039f8 <HAL_GPIO_Init>
}
 8003244:	bf00      	nop
 8003246:	3728      	adds	r7, #40	@ 0x28
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40023800 	.word	0x40023800
 8003254:	40020000 	.word	0x40020000
 8003258:	40010400 	.word	0x40010400
 800325c:	40020800 	.word	0x40020800
 8003260:	40014000 	.word	0x40014000
 8003264:	40021000 	.word	0x40021000

08003268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b090      	sub	sp, #64	@ 0x40
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003270:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a75      	ldr	r2, [pc, #468]	@ (800345c <HAL_UART_MspInit+0x1f4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d135      	bne.n	80032f6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800328e:	4b74      	ldr	r3, [pc, #464]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	4a73      	ldr	r2, [pc, #460]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003294:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003298:	6413      	str	r3, [r2, #64]	@ 0x40
 800329a:	4b71      	ldr	r3, [pc, #452]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 80032b0:	f043 0304 	orr.w	r3, r3, #4
 80032b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032d4:	2308      	movs	r3, #8
 80032d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032dc:	4619      	mov	r1, r3
 80032de:	4861      	ldr	r0, [pc, #388]	@ (8003464 <HAL_UART_MspInit+0x1fc>)
 80032e0:	f000 fb8a 	bl	80039f8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2105      	movs	r1, #5
 80032e8:	2034      	movs	r0, #52	@ 0x34
 80032ea:	f000 fac9 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80032ee:	2034      	movs	r0, #52	@ 0x34
 80032f0:	f000 fae2 	bl	80038b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032f4:	e0ae      	b.n	8003454 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003468 <HAL_UART_MspInit+0x200>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d135      	bne.n	800336c <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	4b56      	ldr	r3, [pc, #344]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	4a55      	ldr	r2, [pc, #340]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003310:	4b53      	ldr	r3, [pc, #332]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	4b4f      	ldr	r3, [pc, #316]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	4a4e      	ldr	r2, [pc, #312]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6313      	str	r3, [r2, #48]	@ 0x30
 800332c:	4b4c      	ldr	r3, [pc, #304]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003338:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800333c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800334a:	2307      	movs	r3, #7
 800334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003352:	4619      	mov	r1, r3
 8003354:	4845      	ldr	r0, [pc, #276]	@ (800346c <HAL_UART_MspInit+0x204>)
 8003356:	f000 fb4f 	bl	80039f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	2105      	movs	r1, #5
 800335e:	2025      	movs	r0, #37	@ 0x25
 8003360:	f000 fa8e 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003364:	2025      	movs	r0, #37	@ 0x25
 8003366:	f000 faa7 	bl	80038b8 <HAL_NVIC_EnableIRQ>
}
 800336a:	e073      	b.n	8003454 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3f      	ldr	r2, [pc, #252]	@ (8003470 <HAL_UART_MspInit+0x208>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d134      	bne.n	80033e0 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	4b39      	ldr	r3, [pc, #228]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	4a38      	ldr	r2, [pc, #224]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003384:	6413      	str	r3, [r2, #64]	@ 0x40
 8003386:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	4b32      	ldr	r3, [pc, #200]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	4a31      	ldr	r2, [pc, #196]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 800339c:	f043 0308 	orr.w	r3, r3, #8
 80033a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80033ae:	2360      	movs	r3, #96	@ 0x60
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033be:	2307      	movs	r3, #7
 80033c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033c6:	4619      	mov	r1, r3
 80033c8:	482a      	ldr	r0, [pc, #168]	@ (8003474 <HAL_UART_MspInit+0x20c>)
 80033ca:	f000 fb15 	bl	80039f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2105      	movs	r1, #5
 80033d2:	2026      	movs	r0, #38	@ 0x26
 80033d4:	f000 fa54 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033d8:	2026      	movs	r0, #38	@ 0x26
 80033da:	f000 fa6d 	bl	80038b8 <HAL_NVIC_EnableIRQ>
}
 80033de:	e039      	b.n	8003454 <HAL_UART_MspInit+0x1ec>
  else if(huart->Instance==USART3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a24      	ldr	r2, [pc, #144]	@ (8003478 <HAL_UART_MspInit+0x210>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d134      	bne.n	8003454 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fa:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	4a14      	ldr	r2, [pc, #80]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	6313      	str	r3, [r2, #48]	@ 0x30
 8003416:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <HAL_UART_MspInit+0x1f8>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003422:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	2303      	movs	r3, #3
 8003432:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003434:	2307      	movs	r3, #7
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003438:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800343c:	4619      	mov	r1, r3
 800343e:	480f      	ldr	r0, [pc, #60]	@ (800347c <HAL_UART_MspInit+0x214>)
 8003440:	f000 fada 	bl	80039f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2105      	movs	r1, #5
 8003448:	2027      	movs	r0, #39	@ 0x27
 800344a:	f000 fa19 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800344e:	2027      	movs	r0, #39	@ 0x27
 8003450:	f000 fa32 	bl	80038b8 <HAL_NVIC_EnableIRQ>
}
 8003454:	bf00      	nop
 8003456:	3740      	adds	r7, #64	@ 0x40
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40004c00 	.word	0x40004c00
 8003460:	40023800 	.word	0x40023800
 8003464:	40020800 	.word	0x40020800
 8003468:	40011000 	.word	0x40011000
 800346c:	40020000 	.word	0x40020000
 8003470:	40004400 	.word	0x40004400
 8003474:	40020c00 	.word	0x40020c00
 8003478:	40004800 	.word	0x40004800
 800347c:	40020400 	.word	0x40020400

08003480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08e      	sub	sp, #56	@ 0x38
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <HAL_InitTick+0xe4>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	4a32      	ldr	r2, [pc, #200]	@ (8003564 <HAL_InitTick+0xe4>)
 800349a:	f043 0310 	orr.w	r3, r3, #16
 800349e:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a0:	4b30      	ldr	r3, [pc, #192]	@ (8003564 <HAL_InitTick+0xe4>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034ac:	f107 0210 	add.w	r2, r7, #16
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 f9f0 	bl	800489c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034c6:	f001 f9c1 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 80034ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80034cc:	e004      	b.n	80034d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034ce:	f001 f9bd 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 80034d2:	4603      	mov	r3, r0
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034da:	4a23      	ldr	r2, [pc, #140]	@ (8003568 <HAL_InitTick+0xe8>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	0c9b      	lsrs	r3, r3, #18
 80034e2:	3b01      	subs	r3, #1
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034e6:	4b21      	ldr	r3, [pc, #132]	@ (800356c <HAL_InitTick+0xec>)
 80034e8:	4a21      	ldr	r2, [pc, #132]	@ (8003570 <HAL_InitTick+0xf0>)
 80034ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034ec:	4b1f      	ldr	r3, [pc, #124]	@ (800356c <HAL_InitTick+0xec>)
 80034ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034f4:	4a1d      	ldr	r2, [pc, #116]	@ (800356c <HAL_InitTick+0xec>)
 80034f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034fa:	4b1c      	ldr	r3, [pc, #112]	@ (800356c <HAL_InitTick+0xec>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003500:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <HAL_InitTick+0xec>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003506:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_InitTick+0xec>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800350c:	4817      	ldr	r0, [pc, #92]	@ (800356c <HAL_InitTick+0xec>)
 800350e:	f001 f9f7 	bl	8004900 <HAL_TIM_Base_Init>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003518:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11b      	bne.n	8003558 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003520:	4812      	ldr	r0, [pc, #72]	@ (800356c <HAL_InitTick+0xec>)
 8003522:	f001 fa3d 	bl	80049a0 <HAL_TIM_Base_Start_IT>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800352c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003530:	2b00      	cmp	r3, #0
 8003532:	d111      	bne.n	8003558 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003534:	2036      	movs	r0, #54	@ 0x36
 8003536:	f000 f9bf 	bl	80038b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b0f      	cmp	r3, #15
 800353e:	d808      	bhi.n	8003552 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003540:	2200      	movs	r2, #0
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	2036      	movs	r0, #54	@ 0x36
 8003546:	f000 f99b 	bl	8003880 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800354a:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <HAL_InitTick+0xf4>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e002      	b.n	8003558 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003558:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800355c:	4618      	mov	r0, r3
 800355e:	3738      	adds	r7, #56	@ 0x38
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	431bde83 	.word	0x431bde83
 800356c:	20000750 	.word	0x20000750
 8003570:	40001000 	.word	0x40001000
 8003574:	20000008 	.word	0x20000008

08003578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <NMI_Handler+0x4>

08003580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <HardFault_Handler+0x4>

08003588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <MemManage_Handler+0x4>

08003590 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <BusFault_Handler+0x4>

08003598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <UsageFault_Handler+0x4>

080035a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035b4:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <USART1_IRQHandler+0x10>)
 80035b6:	f002 fc1b 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200005ec 	.word	0x200005ec

080035c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035c8:	4802      	ldr	r0, [pc, #8]	@ (80035d4 <USART2_IRQHandler+0x10>)
 80035ca:	f002 fc11 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000634 	.word	0x20000634

080035d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035dc:	4802      	ldr	r0, [pc, #8]	@ (80035e8 <USART3_IRQHandler+0x10>)
 80035de:	f002 fc07 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000067c 	.word	0x2000067c

080035ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80035f0:	4802      	ldr	r0, [pc, #8]	@ (80035fc <UART4_IRQHandler+0x10>)
 80035f2:	f002 fbfd 	bl	8005df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200005a4 	.word	0x200005a4

08003600 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003604:	4802      	ldr	r0, [pc, #8]	@ (8003610 <TIM6_DAC_IRQHandler+0x10>)
 8003606:	f001 fca7 	bl	8004f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000750 	.word	0x20000750

08003614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <SystemInit+0x20>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	4a05      	ldr	r2, [pc, #20]	@ (8003634 <SystemInit+0x20>)
 8003620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003638:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003670 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800363c:	f7ff ffea 	bl	8003614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003640:	480c      	ldr	r0, [pc, #48]	@ (8003674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003642:	490d      	ldr	r1, [pc, #52]	@ (8003678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003644:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003648:	e002      	b.n	8003650 <LoopCopyDataInit>

0800364a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800364c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364e:	3304      	adds	r3, #4

08003650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003654:	d3f9      	bcc.n	800364a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003658:	4c0a      	ldr	r4, [pc, #40]	@ (8003684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800365c:	e001      	b.n	8003662 <LoopFillZerobss>

0800365e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003660:	3204      	adds	r2, #4

08003662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003664:	d3fb      	bcc.n	800365e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003666:	f006 fee7 	bl	800a438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800366a:	f7fe faed 	bl	8001c48 <main>
  bx  lr    
 800366e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003678:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800367c:	0800a70c 	.word	0x0800a70c
  ldr r2, =_sbss
 8003680:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003684:	200044f0 	.word	0x200044f0

08003688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003688:	e7fe      	b.n	8003688 <ADC_IRQHandler>
	...

0800368c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003690:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <HAL_Init+0x40>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <HAL_Init+0x40>)
 8003696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800369a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_Init+0x40>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <HAL_Init+0x40>)
 80036a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a8:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <HAL_Init+0x40>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <HAL_Init+0x40>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b4:	2003      	movs	r0, #3
 80036b6:	f000 f8d8 	bl	800386a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ba:	200f      	movs	r0, #15
 80036bc:	f7ff fee0 	bl	8003480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c0:	f7ff fb72 	bl	8002da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	2000000c 	.word	0x2000000c
 80036f4:	20000798 	.word	0x20000798

080036f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000798 	.word	0x20000798

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	@ (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	@ (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	@ (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	@ 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff4c 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003892:	f7ff ff61 	bl	8003758 <__NVIC_GetPriorityGrouping>
 8003896:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f7ff ffb1 	bl	8003804 <NVIC_EncodePriority>
 80038a2:	4602      	mov	r2, r0
 80038a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff80 	bl	80037b0 <__NVIC_SetPriority>
}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff ff54 	bl	8003774 <__NVIC_EnableIRQ>
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038e2:	f7ff ff09 	bl	80036f8 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d008      	beq.n	8003906 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e052      	b.n	80039ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0216 	bic.w	r2, r2, #22
 8003914:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003924:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_DMA_Abort+0x62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0208 	bic.w	r2, r2, #8
 8003944:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003956:	e013      	b.n	8003980 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003958:	f7ff fece 	bl	80036f8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b05      	cmp	r3, #5
 8003964:	d90c      	bls.n	8003980 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2203      	movs	r2, #3
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e015      	b.n	80039ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e4      	bne.n	8003958 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	223f      	movs	r2, #63	@ 0x3f
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d004      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00c      	b.n	80039ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2205      	movs	r2, #5
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e16b      	b.n	8003cec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f040 815a 	bne.w	8003ce6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d005      	beq.n	8003a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d130      	bne.n	8003aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	2203      	movs	r2, #3
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a80:	2201      	movs	r2, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 0201 	and.w	r2, r3, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d017      	beq.n	8003ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d123      	bne.n	8003b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	08da      	lsrs	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3208      	adds	r2, #8
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0203 	and.w	r2, r3, #3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80b4 	beq.w	8003ce6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b60      	ldr	r3, [pc, #384]	@ (8003d04 <HAL_GPIO_Init+0x30c>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	4a5f      	ldr	r2, [pc, #380]	@ (8003d04 <HAL_GPIO_Init+0x30c>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8003d04 <HAL_GPIO_Init+0x30c>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d08 <HAL_GPIO_Init+0x310>)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	@ (8003d0c <HAL_GPIO_Init+0x314>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x226>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a51      	ldr	r2, [pc, #324]	@ (8003d10 <HAL_GPIO_Init+0x318>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x222>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a50      	ldr	r2, [pc, #320]	@ (8003d14 <HAL_GPIO_Init+0x31c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x21e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8003d18 <HAL_GPIO_Init+0x320>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x21a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4e      	ldr	r2, [pc, #312]	@ (8003d1c <HAL_GPIO_Init+0x324>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x216>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4d      	ldr	r2, [pc, #308]	@ (8003d20 <HAL_GPIO_Init+0x328>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x212>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8003d24 <HAL_GPIO_Init+0x32c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x20e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8003d28 <HAL_GPIO_Init+0x330>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x20a>
 8003bfe:	2307      	movs	r3, #7
 8003c00:	e00e      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c02:	2308      	movs	r3, #8
 8003c04:	e00c      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c06:	2306      	movs	r3, #6
 8003c08:	e00a      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c0a:	2305      	movs	r3, #5
 8003c0c:	e008      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c0e:	2304      	movs	r3, #4
 8003c10:	e006      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c12:	2303      	movs	r3, #3
 8003c14:	e004      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e002      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_GPIO_Init+0x228>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	f002 0203 	and.w	r2, r2, #3
 8003c26:	0092      	lsls	r2, r2, #2
 8003c28:	4093      	lsls	r3, r2
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c30:	4935      	ldr	r1, [pc, #212]	@ (8003d08 <HAL_GPIO_Init+0x310>)
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	3302      	adds	r3, #2
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c62:	4a32      	ldr	r2, [pc, #200]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c68:	4b30      	ldr	r3, [pc, #192]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c8c:	4a27      	ldr	r2, [pc, #156]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c92:	4b26      	ldr	r3, [pc, #152]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce0:	4a12      	ldr	r2, [pc, #72]	@ (8003d2c <HAL_GPIO_Init+0x334>)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b0f      	cmp	r3, #15
 8003cf0:	f67f ae90 	bls.w	8003a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	3724      	adds	r7, #36	@ 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40021400 	.word	0x40021400
 8003d24:	40021800 	.word	0x40021800
 8003d28:	40021c00 	.word	0x40021c00
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d4c:	e003      	b.n	8003d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e12b      	b.n	8003fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7ff f838 	bl	8002e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	@ 0x24
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f000 fd40 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a81      	ldr	r2, [pc, #516]	@ (8003fd8 <HAL_I2C_Init+0x274>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d807      	bhi.n	8003de8 <HAL_I2C_Init+0x84>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a80      	ldr	r2, [pc, #512]	@ (8003fdc <HAL_I2C_Init+0x278>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf94      	ite	ls
 8003de0:	2301      	movls	r3, #1
 8003de2:	2300      	movhi	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e006      	b.n	8003df6 <HAL_I2C_Init+0x92>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a7d      	ldr	r2, [pc, #500]	@ (8003fe0 <HAL_I2C_Init+0x27c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bf94      	ite	ls
 8003df0:	2301      	movls	r3, #1
 8003df2:	2300      	movhi	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0e7      	b.n	8003fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a78      	ldr	r2, [pc, #480]	@ (8003fe4 <HAL_I2C_Init+0x280>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0c9b      	lsrs	r3, r3, #18
 8003e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8003fd8 <HAL_I2C_Init+0x274>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d802      	bhi.n	8003e38 <HAL_I2C_Init+0xd4>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3301      	adds	r3, #1
 8003e36:	e009      	b.n	8003e4c <HAL_I2C_Init+0xe8>
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <HAL_I2C_Init+0x284>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	099b      	lsrs	r3, r3, #6
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	495c      	ldr	r1, [pc, #368]	@ (8003fd8 <HAL_I2C_Init+0x274>)
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	d819      	bhi.n	8003ea0 <HAL_I2C_Init+0x13c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e59      	subs	r1, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e80:	400b      	ands	r3, r1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_I2C_Init+0x138>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1e59      	subs	r1, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9a:	e051      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	e04f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d111      	bne.n	8003ecc <HAL_I2C_Init+0x168>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e012      	b.n	8003ef2 <HAL_I2C_Init+0x18e>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1e58      	subs	r0, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	0099      	lsls	r1, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Init+0x196>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e022      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10e      	bne.n	8003f20 <HAL_I2C_Init+0x1bc>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1e58      	subs	r0, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	440b      	add	r3, r1
 8003f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f14:	3301      	adds	r3, #1
 8003f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f1e:	e00f      	b.n	8003f40 <HAL_I2C_Init+0x1dc>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1e58      	subs	r0, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	0099      	lsls	r1, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	6809      	ldr	r1, [r1, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6911      	ldr	r1, [r2, #16]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	000186a0 	.word	0x000186a0
 8003fdc:	001e847f 	.word	0x001e847f
 8003fe0:	003d08ff 	.word	0x003d08ff
 8003fe4:	431bde83 	.word	0x431bde83
 8003fe8:	10624dd3 	.word	0x10624dd3

08003fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e267      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d075      	beq.n	80040f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800400a:	4b88      	ldr	r3, [pc, #544]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00c      	beq.n	8004030 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004016:	4b85      	ldr	r3, [pc, #532]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800401e:	2b08      	cmp	r3, #8
 8004020:	d112      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b82      	ldr	r3, [pc, #520]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800402a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800402e:	d10b      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	4b7e      	ldr	r3, [pc, #504]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05b      	beq.n	80040f4 <HAL_RCC_OscConfig+0x108>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d157      	bne.n	80040f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e242      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0x74>
 8004052:	4b76      	ldr	r3, [pc, #472]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a75      	ldr	r2, [pc, #468]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e01d      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x98>
 800406a:	4b70      	ldr	r3, [pc, #448]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6f      	ldr	r2, [pc, #444]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b6d      	ldr	r3, [pc, #436]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6c      	ldr	r2, [pc, #432]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004084:	4b69      	ldr	r3, [pc, #420]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a68      	ldr	r2, [pc, #416]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b66      	ldr	r3, [pc, #408]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a65      	ldr	r2, [pc, #404]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7ff fb28 	bl	80036f8 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7ff fb24 	bl	80036f8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	@ 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e207      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b5b      	ldr	r3, [pc, #364]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0xc0>
 80040ca:	e014      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7ff fb14 	bl	80036f8 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d4:	f7ff fb10 	bl	80036f8 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	@ 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1f3      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	4b51      	ldr	r3, [pc, #324]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0xe8>
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d063      	beq.n	80041ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004102:	4b4a      	ldr	r3, [pc, #296]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410e:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004116:	2b08      	cmp	r3, #8
 8004118:	d11c      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b44      	ldr	r3, [pc, #272]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d116      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	4b41      	ldr	r3, [pc, #260]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d001      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1c7      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413e:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4937      	ldr	r1, [pc, #220]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	e03a      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800415c:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <HAL_RCC_OscConfig+0x244>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7ff fac9 	bl	80036f8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416a:	f7ff fac5 	bl	80036f8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1a8      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	4b2b      	ldr	r3, [pc, #172]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004188:	4b28      	ldr	r3, [pc, #160]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4925      	ldr	r1, [pc, #148]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	e015      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <HAL_RCC_OscConfig+0x244>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7ff faa8 	bl	80036f8 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ac:	f7ff faa4 	bl	80036f8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e187      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d036      	beq.n	8004244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041de:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <HAL_RCC_OscConfig+0x248>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7ff fa88 	bl	80036f8 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ec:	f7ff fa84 	bl	80036f8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e167      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x200>
 800420a:	e01b      	b.n	8004244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_OscConfig+0x248>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7ff fa71 	bl	80036f8 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004218:	e00e      	b.n	8004238 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421a:	f7ff fa6d 	bl	80036f8 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d907      	bls.n	8004238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e150      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800422c:	40023800 	.word	0x40023800
 8004230:	42470000 	.word	0x42470000
 8004234:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	4b88      	ldr	r3, [pc, #544]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800423a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ea      	bne.n	800421a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8097 	beq.w	8004380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004256:	4b81      	ldr	r3, [pc, #516]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	4b7d      	ldr	r3, [pc, #500]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	4a7c      	ldr	r2, [pc, #496]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004270:	6413      	str	r3, [r2, #64]	@ 0x40
 8004272:	4b7a      	ldr	r3, [pc, #488]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b77      	ldr	r3, [pc, #476]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d118      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428e:	4b74      	ldr	r3, [pc, #464]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a73      	ldr	r2, [pc, #460]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429a:	f7ff fa2d 	bl	80036f8 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a2:	f7ff fa29 	bl	80036f8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e10c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x2ea>
 80042c8:	4b64      	ldr	r3, [pc, #400]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a63      	ldr	r2, [pc, #396]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	e01c      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x30c>
 80042de:	4b5f      	ldr	r3, [pc, #380]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	4a5e      	ldr	r2, [pc, #376]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ea:	4b5c      	ldr	r3, [pc, #368]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	4a5b      	ldr	r2, [pc, #364]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042f8:	4b58      	ldr	r3, [pc, #352]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	4a57      	ldr	r2, [pc, #348]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	@ 0x70
 8004304:	4b55      	ldr	r3, [pc, #340]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	4a54      	ldr	r2, [pc, #336]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800430a:	f023 0304 	bic.w	r3, r3, #4
 800430e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7ff f9ee 	bl	80036f8 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7ff f9ea 	bl	80036f8 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0cb      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	4b49      	ldr	r3, [pc, #292]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0ee      	beq.n	8004320 <HAL_RCC_OscConfig+0x334>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004344:	f7ff f9d8 	bl	80036f8 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7ff f9d4 	bl	80036f8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0b5      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004362:	4b3e      	ldr	r3, [pc, #248]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1ee      	bne.n	800434c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800436e:	7dfb      	ldrb	r3, [r7, #23]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b39      	ldr	r3, [pc, #228]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	4a38      	ldr	r2, [pc, #224]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800437e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a1 	beq.w	80044cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800438a:	4b34      	ldr	r3, [pc, #208]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b08      	cmp	r3, #8
 8004394:	d05c      	beq.n	8004450 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d141      	bne.n	8004422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b31      	ldr	r3, [pc, #196]	@ (8004464 <HAL_RCC_OscConfig+0x478>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7ff f9a8 	bl	80036f8 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7ff f9a4 	bl	80036f8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e087      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b27      	ldr	r3, [pc, #156]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	491b      	ldr	r1, [pc, #108]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004464 <HAL_RCC_OscConfig+0x478>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7ff f97d 	bl	80036f8 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7ff f979 	bl	80036f8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e05c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x416>
 8004420:	e054      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <HAL_RCC_OscConfig+0x478>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7ff f966 	bl	80036f8 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7ff f962 	bl	80036f8 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e045      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x444>
 800444e:	e03d      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e038      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000
 8004464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004468:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <HAL_RCC_OscConfig+0x4ec>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d028      	beq.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d121      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d11a      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800449e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0cc      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b68      	ldr	r3, [pc, #416]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d90c      	bls.n	8004518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b65      	ldr	r3, [pc, #404]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a58      	ldr	r2, [pc, #352]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800453a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a52      	ldr	r2, [pc, #328]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d119      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b3f      	ldr	r3, [pc, #252]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e067      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b37      	ldr	r3, [pc, #220]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4934      	ldr	r1, [pc, #208]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7ff f894 	bl	80036f8 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7ff f890 	bl	80036f8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b25      	ldr	r3, [pc, #148]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d20c      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b22      	ldr	r3, [pc, #136]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b12      	ldr	r3, [pc, #72]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f821 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fefc 	bl	8003480 <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	40023800 	.word	0x40023800
 800469c:	0800a508 	.word	0x0800a508
 80046a0:	20000004 	.word	0x20000004
 80046a4:	20000008 	.word	0x20000008

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b090      	sub	sp, #64	@ 0x40
 80046ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c0:	4b59      	ldr	r3, [pc, #356]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x40>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	f200 80a1 	bhi.w	8004814 <HAL_RCC_GetSysClockFreq+0x16c>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x34>
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046da:	e09b      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b53      	ldr	r3, [pc, #332]	@ (800482c <HAL_RCC_GetSysClockFreq+0x184>)
 80046de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046e0:	e09b      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e2:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046e6:	e098      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d028      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	2200      	movs	r2, #0
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	627a      	str	r2, [r7, #36]	@ 0x24
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004710:	2100      	movs	r1, #0
 8004712:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x188>)
 8004714:	fb03 f201 	mul.w	r2, r3, r1
 8004718:	2300      	movs	r3, #0
 800471a:	fb00 f303 	mul.w	r3, r0, r3
 800471e:	4413      	add	r3, r2
 8004720:	4a43      	ldr	r2, [pc, #268]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x188>)
 8004722:	fba0 1202 	umull	r1, r2, r0, r2
 8004726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004728:	460a      	mov	r2, r1
 800472a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800472c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800472e:	4413      	add	r3, r2
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004734:	2200      	movs	r2, #0
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	61fa      	str	r2, [r7, #28]
 800473a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004742:	f7fc fa13 	bl	8000b6c <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4613      	mov	r3, r2
 800474c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800474e:	e053      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004750:	4b35      	ldr	r3, [pc, #212]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	099b      	lsrs	r3, r3, #6
 8004756:	2200      	movs	r2, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	617a      	str	r2, [r7, #20]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004762:	f04f 0b00 	mov.w	fp, #0
 8004766:	4652      	mov	r2, sl
 8004768:	465b      	mov	r3, fp
 800476a:	f04f 0000 	mov.w	r0, #0
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	0159      	lsls	r1, r3, #5
 8004774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004778:	0150      	lsls	r0, r2, #5
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	ebb2 080a 	subs.w	r8, r2, sl
 8004782:	eb63 090b 	sbc.w	r9, r3, fp
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004792:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004796:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800479a:	ebb2 0408 	subs.w	r4, r2, r8
 800479e:	eb63 0509 	sbc.w	r5, r3, r9
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	00eb      	lsls	r3, r5, #3
 80047ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b0:	00e2      	lsls	r2, r4, #3
 80047b2:	4614      	mov	r4, r2
 80047b4:	461d      	mov	r5, r3
 80047b6:	eb14 030a 	adds.w	r3, r4, sl
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	eb45 030b 	adc.w	r3, r5, fp
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047ce:	4629      	mov	r1, r5
 80047d0:	028b      	lsls	r3, r1, #10
 80047d2:	4621      	mov	r1, r4
 80047d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047d8:	4621      	mov	r1, r4
 80047da:	028a      	lsls	r2, r1, #10
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e2:	2200      	movs	r2, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ec:	f7fc f9be 	bl	8000b6c <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4613      	mov	r3, r2
 80047f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x180>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	3301      	adds	r3, #1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004808:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_GetSysClockFreq+0x184>)
 8004816:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800481c:	4618      	mov	r0, r3
 800481e:	3740      	adds	r7, #64	@ 0x40
 8004820:	46bd      	mov	sp, r7
 8004822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	00f42400 	.word	0x00f42400
 8004830:	017d7840 	.word	0x017d7840

08004834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004838:	4b03      	ldr	r3, [pc, #12]	@ (8004848 <HAL_RCC_GetHCLKFreq+0x14>)
 800483a:	681b      	ldr	r3, [r3, #0]
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000004 	.word	0x20000004

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004850:	f7ff fff0 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0a9b      	lsrs	r3, r3, #10
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	@ (8004870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	0800a518 	.word	0x0800a518

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004878:	f7ff ffdc 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	0b5b      	lsrs	r3, r3, #13
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	@ (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40023800 	.word	0x40023800
 8004898:	0800a518 	.word	0x0800a518

0800489c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	220f      	movs	r2, #15
 80048aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048ac:	4b12      	ldr	r3, [pc, #72]	@ (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0203 	and.w	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048b8:	4b0f      	ldr	r3, [pc, #60]	@ (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048d0:	4b09      	ldr	r3, [pc, #36]	@ (80048f8 <HAL_RCC_GetClockConfig+0x5c>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048de:	4b07      	ldr	r3, [pc, #28]	@ (80048fc <HAL_RCC_GetClockConfig+0x60>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0207 	and.w	r2, r3, #7
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40023c00 	.word	0x40023c00

08004900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e041      	b.n	8004996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fe fbba 	bl	80030a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 fdac 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e04e      	b.n	8004a56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a23      	ldr	r2, [pc, #140]	@ (8004a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d022      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e2:	d01d      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d018      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00e      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1b      	ldr	r2, [pc, #108]	@ (8004a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d009      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a19      	ldr	r2, [pc, #100]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a18      	ldr	r2, [pc, #96]	@ (8004a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d111      	bne.n	8004a44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d010      	beq.n	8004a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	e007      	b.n	8004a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40001800 	.word	0x40001800

08004a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e041      	b.n	8004b16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fe fb32 	bl	8003110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 fcec 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_TIM_PWM_Start+0x24>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e022      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d109      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x3e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e015      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d109      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x58>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e008      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e07c      	b.n	8004c8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x82>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba0:	e013      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x92>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	e00b      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xa2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc0:	e003      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 ff58 	bl	8005a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <HAL_TIM_PWM_Start+0x174>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_PWM_Start+0xcc>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c98 <HAL_TIM_PWM_Start+0x178>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0xd0>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_TIM_PWM_Start+0xd2>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a22      	ldr	r2, [pc, #136]	@ (8004c94 <HAL_TIM_PWM_Start+0x174>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c18:	d01d      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c9c <HAL_TIM_PWM_Start+0x17c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <HAL_TIM_PWM_Start+0x180>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca4 <HAL_TIM_PWM_Start+0x184>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	@ (8004c98 <HAL_TIM_PWM_Start+0x178>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	@ (8004ca8 <HAL_TIM_PWM_Start+0x188>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <HAL_TIM_PWM_Start+0x18c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d111      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b06      	cmp	r3, #6
 8004c66:	d010      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	e007      	b.n	8004c8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40001800 	.word	0x40001800

08004cb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e097      	b.n	8004df4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d106      	bne.n	8004cde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7fe f8d9 	bl	8002e90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cf4:	f023 0307 	bic.w	r3, r3, #7
 8004cf8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f000 fbc9 	bl	800549c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	4313      	orrs	r3, r2
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d50:	f023 030c 	bic.w	r3, r3, #12
 8004d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	011a      	lsls	r2, r3, #4
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	031b      	lsls	r3, r3, #12
 8004d80:	4313      	orrs	r3, r2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	4313      	orrs	r3, r2
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d110      	bne.n	8004e4e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d102      	bne.n	8004e38 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e32:	7b7b      	ldrb	r3, [r7, #13]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d001      	beq.n	8004e3c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e089      	b.n	8004f50 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e4c:	e031      	b.n	8004eb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d110      	bne.n	8004e76 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e5a:	7b3b      	ldrb	r3, [r7, #12]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d001      	beq.n	8004e64 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e075      	b.n	8004f50 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e74:	e01d      	b.n	8004eb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d108      	bne.n	8004e8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e82:	7b7b      	ldrb	r3, [r7, #13]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d102      	bne.n	8004e8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e88:	7b3b      	ldrb	r3, [r7, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e05e      	b.n	8004f50 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d010      	beq.n	8004ee0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004ebe:	e01f      	b.n	8004f00 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fddd 	bl	8005a88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0202 	orr.w	r2, r2, #2
 8004edc:	60da      	str	r2, [r3, #12]
      break;
 8004ede:	e02e      	b.n	8004f3e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fdcd 	bl	8005a88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0204 	orr.w	r2, r2, #4
 8004efc:	60da      	str	r2, [r3, #12]
      break;
 8004efe:	e01e      	b.n	8004f3e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2201      	movs	r2, #1
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fdbd 	bl	8005a88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2201      	movs	r2, #1
 8004f14:	2104      	movs	r1, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fdb6 	bl	8005a88 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0202 	orr.w	r2, r2, #2
 8004f2a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0204 	orr.w	r2, r2, #4
 8004f3a:	60da      	str	r2, [r3, #12]
      break;
 8004f3c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0202 	mvn.w	r2, #2
 8004f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa5b 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa4d 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fa5e 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d020      	beq.n	8005008 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0204 	mvn.w	r2, #4
 8004fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa35 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004ff4:	e005      	b.n	8005002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fa27 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa38 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d020      	beq.n	8005054 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01b      	beq.n	8005054 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0208 	mvn.w	r2, #8
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2204      	movs	r2, #4
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa0f 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa01 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa12 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b00      	cmp	r3, #0
 800505c:	d020      	beq.n	80050a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01b      	beq.n	80050a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0210 	mvn.w	r2, #16
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2208      	movs	r2, #8
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f9e9 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9db 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f9ec 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0201 	mvn.w	r2, #1
 80050bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fd fdf0 	bl	8002ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fdce 	bl	8005c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00c      	beq.n	800510c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f9bd 	bl	8005486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00c      	beq.n	8005130 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0220 	mvn.w	r2, #32
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fda0 	bl	8005c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005152:	2302      	movs	r3, #2
 8005154:	e0ae      	b.n	80052b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	f200 809f 	bhi.w	80052a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005166:	a201      	add	r2, pc, #4	@ (adr r2, 800516c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080052a5 	.word	0x080052a5
 8005174:	080052a5 	.word	0x080052a5
 8005178:	080052a5 	.word	0x080052a5
 800517c:	080051e1 	.word	0x080051e1
 8005180:	080052a5 	.word	0x080052a5
 8005184:	080052a5 	.word	0x080052a5
 8005188:	080052a5 	.word	0x080052a5
 800518c:	08005223 	.word	0x08005223
 8005190:	080052a5 	.word	0x080052a5
 8005194:	080052a5 	.word	0x080052a5
 8005198:	080052a5 	.word	0x080052a5
 800519c:	08005263 	.word	0x08005263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fa24 	bl	80055f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0204 	bic.w	r2, r2, #4
 80051ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6999      	ldr	r1, [r3, #24]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	619a      	str	r2, [r3, #24]
      break;
 80051de:	e064      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fa74 	bl	80056d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6999      	ldr	r1, [r3, #24]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	619a      	str	r2, [r3, #24]
      break;
 8005220:	e043      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fac9 	bl	80057c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0208 	orr.w	r2, r2, #8
 800523c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0204 	bic.w	r2, r2, #4
 800524c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	61da      	str	r2, [r3, #28]
      break;
 8005260:	e023      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fb1d 	bl	80058a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800527c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800528c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69d9      	ldr	r1, [r3, #28]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	021a      	lsls	r2, r3, #8
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	61da      	str	r2, [r3, #28]
      break;
 80052a2:	e002      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
      break;
 80052a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e0b4      	b.n	8005442 <HAL_TIM_ConfigClockSource+0x186>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005310:	d03e      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0xd4>
 8005312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005316:	f200 8087 	bhi.w	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531e:	f000 8086 	beq.w	800542e <HAL_TIM_ConfigClockSource+0x172>
 8005322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005326:	d87f      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b70      	cmp	r3, #112	@ 0x70
 800532a:	d01a      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0xa6>
 800532c:	2b70      	cmp	r3, #112	@ 0x70
 800532e:	d87b      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b60      	cmp	r3, #96	@ 0x60
 8005332:	d050      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005334:	2b60      	cmp	r3, #96	@ 0x60
 8005336:	d877      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b50      	cmp	r3, #80	@ 0x50
 800533a:	d03c      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0xfa>
 800533c:	2b50      	cmp	r3, #80	@ 0x50
 800533e:	d873      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b40      	cmp	r3, #64	@ 0x40
 8005342:	d058      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d86f      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b30      	cmp	r3, #48	@ 0x30
 800534a:	d064      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 800534c:	2b30      	cmp	r3, #48	@ 0x30
 800534e:	d86b      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b20      	cmp	r3, #32
 8005352:	d060      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 8005354:	2b20      	cmp	r3, #32
 8005356:	d867      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d05c      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 800535c:	2b10      	cmp	r3, #16
 800535e:	d05a      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 8005360:	e062      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005372:	f000 fb69 	bl	8005a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	609a      	str	r2, [r3, #8]
      break;
 800538e:	e04f      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053a0:	f000 fb52 	bl	8005a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b2:	609a      	str	r2, [r3, #8]
      break;
 80053b4:	e03c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c2:	461a      	mov	r2, r3
 80053c4:	f000 fac6 	bl	8005954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2150      	movs	r1, #80	@ 0x50
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fb1f 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 80053d4:	e02c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 fae5 	bl	80059b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2160      	movs	r1, #96	@ 0x60
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fb0f 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 80053f4:	e01c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	461a      	mov	r2, r3
 8005404:	f000 faa6 	bl	8005954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2140      	movs	r1, #64	@ 0x40
 800540e:	4618      	mov	r0, r3
 8005410:	f000 faff 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 8005414:	e00c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f000 faf6 	bl	8005a12 <TIM_ITRx_SetConfig>
      break;
 8005426:	e003      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	e000      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800542e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a46      	ldr	r2, [pc, #280]	@ (80055c8 <TIM_Base_SetConfig+0x12c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a43      	ldr	r2, [pc, #268]	@ (80055cc <TIM_Base_SetConfig+0x130>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a42      	ldr	r2, [pc, #264]	@ (80055d0 <TIM_Base_SetConfig+0x134>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a41      	ldr	r2, [pc, #260]	@ (80055d4 <TIM_Base_SetConfig+0x138>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a40      	ldr	r2, [pc, #256]	@ (80055d8 <TIM_Base_SetConfig+0x13c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a35      	ldr	r2, [pc, #212]	@ (80055c8 <TIM_Base_SetConfig+0x12c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fc:	d027      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a32      	ldr	r2, [pc, #200]	@ (80055cc <TIM_Base_SetConfig+0x130>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d023      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a31      	ldr	r2, [pc, #196]	@ (80055d0 <TIM_Base_SetConfig+0x134>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01f      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a30      	ldr	r2, [pc, #192]	@ (80055d4 <TIM_Base_SetConfig+0x138>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2f      	ldr	r2, [pc, #188]	@ (80055d8 <TIM_Base_SetConfig+0x13c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d017      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2e      	ldr	r2, [pc, #184]	@ (80055dc <TIM_Base_SetConfig+0x140>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2d      	ldr	r2, [pc, #180]	@ (80055e0 <TIM_Base_SetConfig+0x144>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00f      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2c      	ldr	r2, [pc, #176]	@ (80055e4 <TIM_Base_SetConfig+0x148>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00b      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2b      	ldr	r2, [pc, #172]	@ (80055e8 <TIM_Base_SetConfig+0x14c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2a      	ldr	r2, [pc, #168]	@ (80055ec <TIM_Base_SetConfig+0x150>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a29      	ldr	r2, [pc, #164]	@ (80055f0 <TIM_Base_SetConfig+0x154>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d108      	bne.n	8005560 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a10      	ldr	r2, [pc, #64]	@ (80055c8 <TIM_Base_SetConfig+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <TIM_Base_SetConfig+0x13c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d105      	bne.n	80055ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f023 0201 	bic.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	611a      	str	r2, [r3, #16]
  }
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40010400 	.word	0x40010400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800
 80055e8:	40001800 	.word	0x40001800
 80055ec:	40001c00 	.word	0x40001c00
 80055f0:	40002000 	.word	0x40002000

080055f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f023 0201 	bic.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0303 	bic.w	r3, r3, #3
 800562a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 0302 	bic.w	r3, r3, #2
 800563c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a20      	ldr	r2, [pc, #128]	@ (80056cc <TIM_OC1_SetConfig+0xd8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC1_SetConfig+0x64>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1f      	ldr	r2, [pc, #124]	@ (80056d0 <TIM_OC1_SetConfig+0xdc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d10c      	bne.n	8005672 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0308 	bic.w	r3, r3, #8
 800565e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 0304 	bic.w	r3, r3, #4
 8005670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a15      	ldr	r2, [pc, #84]	@ (80056cc <TIM_OC1_SetConfig+0xd8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d003      	beq.n	8005682 <TIM_OC1_SetConfig+0x8e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a14      	ldr	r2, [pc, #80]	@ (80056d0 <TIM_OC1_SetConfig+0xdc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d111      	bne.n	80056a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	621a      	str	r2, [r3, #32]
}
 80056c0:	bf00      	nop
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400

080056d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 0210 	bic.w	r2, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800570a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0320 	bic.w	r3, r3, #32
 800571e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a22      	ldr	r2, [pc, #136]	@ (80057b8 <TIM_OC2_SetConfig+0xe4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_OC2_SetConfig+0x68>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a21      	ldr	r2, [pc, #132]	@ (80057bc <TIM_OC2_SetConfig+0xe8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d10d      	bne.n	8005758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a17      	ldr	r2, [pc, #92]	@ (80057b8 <TIM_OC2_SetConfig+0xe4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d003      	beq.n	8005768 <TIM_OC2_SetConfig+0x94>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a16      	ldr	r2, [pc, #88]	@ (80057bc <TIM_OC2_SetConfig+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d113      	bne.n	8005790 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800576e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400

080057c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	021b      	lsls	r3, r3, #8
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a21      	ldr	r2, [pc, #132]	@ (80058a0 <TIM_OC3_SetConfig+0xe0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_OC3_SetConfig+0x66>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a20      	ldr	r2, [pc, #128]	@ (80058a4 <TIM_OC3_SetConfig+0xe4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10d      	bne.n	8005842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800582c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a16      	ldr	r2, [pc, #88]	@ (80058a0 <TIM_OC3_SetConfig+0xe0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC3_SetConfig+0x92>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a15      	ldr	r2, [pc, #84]	@ (80058a4 <TIM_OC3_SetConfig+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d113      	bne.n	800587a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	621a      	str	r2, [r3, #32]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400

080058a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a12      	ldr	r2, [pc, #72]	@ (800594c <TIM_OC4_SetConfig+0xa4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_OC4_SetConfig+0x68>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a11      	ldr	r2, [pc, #68]	@ (8005950 <TIM_OC4_SetConfig+0xa8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d109      	bne.n	8005924 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	019b      	lsls	r3, r3, #6
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800597e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 030a 	bic.w	r3, r3, #10
 8005990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b087      	sub	sp, #28
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 0210 	bic.w	r2, r3, #16
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f043 0307 	orr.w	r3, r3, #7
 8005a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	609a      	str	r2, [r3, #8]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	021a      	lsls	r2, r3, #8
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	609a      	str	r2, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e05a      	b.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	@ (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b38:	d01d      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	@ (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a17      	ldr	r2, [pc, #92]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a15      	ldr	r2, [pc, #84]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10c      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40001800 	.word	0x40001800

08005bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e03d      	b.n	8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e042      	b.n	8005d30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fd fad2 	bl	8003268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	@ 0x24
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 fd07 	bl	80066f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4613      	mov	r3, r2
 8005d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d121      	bne.n	8005d96 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <HAL_UART_Transmit_IT+0x26>
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e01a      	b.n	8005d98 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2221      	movs	r2, #33	@ 0x21
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d90:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e000      	b.n	8005d98 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005d96:	2302      	movs	r3, #2
  }
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d112      	bne.n	8005de4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_UART_Receive_IT+0x26>
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e00b      	b.n	8005de6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 fab0 	bl	8006340 <UART_Start_Receive_IT>
 8005de0:	4603      	mov	r3, r0
 8005de2:	e000      	b.n	8005de6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
  }
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b0ba      	sub	sp, #232	@ 0xe8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10f      	bne.n	8005e56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
 8005e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fb8f 	bl	8006572 <UART_Receive_IT>
      return;
 8005e54:	e25b      	b.n	800630e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80de 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
 8005e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80d1 	beq.w	800601c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
 8005e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eba:	f043 0202 	orr.w	r2, r3, #2
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
 8005ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d011      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
 8005ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0e:	f043 0208 	orr.w	r2, r3, #8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 81f2 	beq.w	8006304 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fb1a 	bl	8006572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <HAL_UART_IRQHandler+0x17a>
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d04f      	beq.n	800600a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa22 	bl	80063b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7a:	2b40      	cmp	r3, #64	@ 0x40
 8005f7c:	d141      	bne.n	8006002 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3314      	adds	r3, #20
 8005fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005faa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1d9      	bne.n	8005f7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d013      	beq.n	8005ffa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80061d0 <HAL_UART_IRQHandler+0x3e0>)
 8005fd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fd fce8 	bl	80039b4 <HAL_DMA_Abort_IT>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d016      	beq.n	8006018 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e00e      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f98a 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00a      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f986 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e006      	b.n	8006018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f982 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006016:	e175      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	bf00      	nop
    return;
 800601a:	e173      	b.n	8006304 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	f040 814f 	bne.w	80062c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8148 	beq.w	80062c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8141 	beq.w	80062c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006062:	2b40      	cmp	r3, #64	@ 0x40
 8006064:	f040 80b6 	bne.w	80061d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8145 	beq.w	8006308 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006086:	429a      	cmp	r2, r3
 8006088:	f080 813e 	bcs.w	8006308 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006092:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800609e:	f000 8088 	beq.w	80061b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1d9      	bne.n	80060a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3314      	adds	r3, #20
 800610e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006112:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006116:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800611a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e1      	bne.n	80060ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800613a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800613c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800614e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006150:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006154:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800615c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e3      	bne.n	800612a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006182:	f023 0310 	bic.w	r3, r3, #16
 8006186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006194:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006196:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800619a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e3      	bne.n	8006170 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fd fb91 	bl	80038d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8ad 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061ce:	e09b      	b.n	8006308 <HAL_UART_IRQHandler+0x518>
 80061d0:	0800647b 	.word	0x0800647b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 808e 	beq.w	800630c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8089 	beq.w	800630c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	330c      	adds	r3, #12
 8006200:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800620a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800621e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006220:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800622c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e3      	bne.n	80061fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	623b      	str	r3, [r7, #32]
   return(result);
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006256:	633a      	str	r2, [r7, #48]	@ 0x30
 8006258:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800625c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e3      	bne.n	8006232 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	60fb      	str	r3, [r7, #12]
   return(result);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0310 	bic.w	r3, r3, #16
 800628e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800629c:	61fa      	str	r2, [r7, #28]
 800629e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	69b9      	ldr	r1, [r7, #24]
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	617b      	str	r3, [r7, #20]
   return(result);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e3      	bne.n	8006278 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f833 	bl	8006328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062c2:	e023      	b.n	800630c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <HAL_UART_IRQHandler+0x4f4>
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8e0 	bl	80064a2 <UART_Transmit_IT>
    return;
 80062e2:	e014      	b.n	800630e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <HAL_UART_IRQHandler+0x51e>
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d008      	beq.n	800630e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f920 	bl	8006542 <UART_EndTransmit_IT>
    return;
 8006302:	e004      	b.n	800630e <HAL_UART_IRQHandler+0x51e>
    return;
 8006304:	bf00      	nop
 8006306:	e002      	b.n	800630e <HAL_UART_IRQHandler+0x51e>
      return;
 8006308:	bf00      	nop
 800630a:	e000      	b.n	800630e <HAL_UART_IRQHandler+0x51e>
      return;
 800630c:	bf00      	nop
  }
}
 800630e:	37e8      	adds	r7, #232	@ 0xe8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	88fa      	ldrh	r2, [r7, #6]
 8006358:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2222      	movs	r2, #34	@ 0x22
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006384:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0201 	orr.w	r2, r2, #1
 8006394:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0220 	orr.w	r2, r2, #32
 80063a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b095      	sub	sp, #84	@ 0x54
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3314      	adds	r3, #20
 800640e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006410:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006412:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e5      	bne.n	80063f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	2b01      	cmp	r3, #1
 800642a:	d119      	bne.n	8006460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60bb      	str	r3, [r7, #8]
   return(result);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	647b      	str	r3, [r7, #68]	@ 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800644c:	61ba      	str	r2, [r7, #24]
 800644e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800646e:	bf00      	nop
 8006470:	3754      	adds	r7, #84	@ 0x54
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff ff3d 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800649a:	bf00      	nop
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b21      	cmp	r3, #33	@ 0x21
 80064b4:	d13e      	bne.n	8006534 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064be:	d114      	bne.n	80064ea <UART_Transmit_IT+0x48>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d110      	bne.n	80064ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	1c9a      	adds	r2, r3, #2
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]
 80064e8:	e008      	b.n	80064fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6211      	str	r1, [r2, #32]
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29b      	uxth	r3, r3
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4619      	mov	r1, r3
 800650a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10f      	bne.n	8006530 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800651e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800652e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b082      	sub	sp, #8
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fa feaa 	bl	80012bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b08c      	sub	sp, #48	@ 0x30
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b22      	cmp	r3, #34	@ 0x22
 8006584:	f040 80ae 	bne.w	80066e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006590:	d117      	bne.n	80065c2 <UART_Receive_IT+0x50>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d113      	bne.n	80065c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ba:	1c9a      	adds	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	@ 0x28
 80065c0:	e026      	b.n	8006610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d4:	d007      	beq.n	80065e6 <UART_Receive_IT+0x74>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <UART_Receive_IT+0x82>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	e008      	b.n	8006606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006600:	b2da      	uxtb	r2, r3
 8006602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4619      	mov	r1, r3
 800661e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006620:	2b00      	cmp	r3, #0
 8006622:	d15d      	bne.n	80066e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0220 	bic.w	r2, r2, #32
 8006632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0201 	bic.w	r2, r2, #1
 8006652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006666:	2b01      	cmp	r3, #1
 8006668:	d135      	bne.n	80066d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	613b      	str	r3, [r7, #16]
   return(result);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f023 0310 	bic.w	r3, r3, #16
 8006686:	627b      	str	r3, [r7, #36]	@ 0x24
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	330c      	adds	r3, #12
 800668e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006690:	623a      	str	r2, [r7, #32]
 8006692:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	69f9      	ldr	r1, [r7, #28]
 8006696:	6a3a      	ldr	r2, [r7, #32]
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	61bb      	str	r3, [r7, #24]
   return(result);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e5      	bne.n	8006670 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0310 	and.w	r3, r3, #16
 80066ae:	2b10      	cmp	r3, #16
 80066b0:	d10a      	bne.n	80066c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fe2a 	bl	8006328 <HAL_UARTEx_RxEventCallback>
 80066d4:	e002      	b.n	80066dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fa fd76 	bl	80011c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e002      	b.n	80066e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	e000      	b.n	80066e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80066e4:	2302      	movs	r3, #2
  }
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3730      	adds	r7, #48	@ 0x30
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f4:	b0c0      	sub	sp, #256	@ 0x100
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670c:	68d9      	ldr	r1, [r3, #12]
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	ea40 0301 	orr.w	r3, r0, r1
 8006718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	431a      	orrs	r2, r3
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	431a      	orrs	r2, r3
 8006730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006748:	f021 010c 	bic.w	r1, r1, #12
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006756:	430b      	orrs	r3, r1
 8006758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800675a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676a:	6999      	ldr	r1, [r3, #24]
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	ea40 0301 	orr.w	r3, r0, r1
 8006776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b8f      	ldr	r3, [pc, #572]	@ (80069bc <UART_SetConfig+0x2cc>)
 8006780:	429a      	cmp	r2, r3
 8006782:	d005      	beq.n	8006790 <UART_SetConfig+0xa0>
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b8d      	ldr	r3, [pc, #564]	@ (80069c0 <UART_SetConfig+0x2d0>)
 800678c:	429a      	cmp	r2, r3
 800678e:	d104      	bne.n	800679a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006790:	f7fe f870 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 8006794:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006798:	e003      	b.n	80067a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800679a:	f7fe f857 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 800679e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ac:	f040 810c 	bne.w	80069c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80067be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80067c2:	4622      	mov	r2, r4
 80067c4:	462b      	mov	r3, r5
 80067c6:	1891      	adds	r1, r2, r2
 80067c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067ca:	415b      	adcs	r3, r3
 80067cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067d2:	4621      	mov	r1, r4
 80067d4:	eb12 0801 	adds.w	r8, r2, r1
 80067d8:	4629      	mov	r1, r5
 80067da:	eb43 0901 	adc.w	r9, r3, r1
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067f2:	4690      	mov	r8, r2
 80067f4:	4699      	mov	r9, r3
 80067f6:	4623      	mov	r3, r4
 80067f8:	eb18 0303 	adds.w	r3, r8, r3
 80067fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006800:	462b      	mov	r3, r5
 8006802:	eb49 0303 	adc.w	r3, r9, r3
 8006806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006816:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800681a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800681e:	460b      	mov	r3, r1
 8006820:	18db      	adds	r3, r3, r3
 8006822:	653b      	str	r3, [r7, #80]	@ 0x50
 8006824:	4613      	mov	r3, r2
 8006826:	eb42 0303 	adc.w	r3, r2, r3
 800682a:	657b      	str	r3, [r7, #84]	@ 0x54
 800682c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006834:	f7fa f99a 	bl	8000b6c <__aeabi_uldivmod>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4b61      	ldr	r3, [pc, #388]	@ (80069c4 <UART_SetConfig+0x2d4>)
 800683e:	fba3 2302 	umull	r2, r3, r3, r2
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	011c      	lsls	r4, r3, #4
 8006846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006850:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006858:	4642      	mov	r2, r8
 800685a:	464b      	mov	r3, r9
 800685c:	1891      	adds	r1, r2, r2
 800685e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006860:	415b      	adcs	r3, r3
 8006862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006868:	4641      	mov	r1, r8
 800686a:	eb12 0a01 	adds.w	sl, r2, r1
 800686e:	4649      	mov	r1, r9
 8006870:	eb43 0b01 	adc.w	fp, r3, r1
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006888:	4692      	mov	sl, r2
 800688a:	469b      	mov	fp, r3
 800688c:	4643      	mov	r3, r8
 800688e:	eb1a 0303 	adds.w	r3, sl, r3
 8006892:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006896:	464b      	mov	r3, r9
 8006898:	eb4b 0303 	adc.w	r3, fp, r3
 800689c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80068b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068b4:	460b      	mov	r3, r1
 80068b6:	18db      	adds	r3, r3, r3
 80068b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ba:	4613      	mov	r3, r2
 80068bc:	eb42 0303 	adc.w	r3, r2, r3
 80068c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068ca:	f7fa f94f 	bl	8000b6c <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4611      	mov	r1, r2
 80068d4:	4b3b      	ldr	r3, [pc, #236]	@ (80069c4 <UART_SetConfig+0x2d4>)
 80068d6:	fba3 2301 	umull	r2, r3, r3, r1
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2264      	movs	r2, #100	@ 0x64
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	1acb      	subs	r3, r1, r3
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068ea:	4b36      	ldr	r3, [pc, #216]	@ (80069c4 <UART_SetConfig+0x2d4>)
 80068ec:	fba3 2302 	umull	r2, r3, r3, r2
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068f8:	441c      	add	r4, r3
 80068fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006904:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800690c:	4642      	mov	r2, r8
 800690e:	464b      	mov	r3, r9
 8006910:	1891      	adds	r1, r2, r2
 8006912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006914:	415b      	adcs	r3, r3
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800691c:	4641      	mov	r1, r8
 800691e:	1851      	adds	r1, r2, r1
 8006920:	6339      	str	r1, [r7, #48]	@ 0x30
 8006922:	4649      	mov	r1, r9
 8006924:	414b      	adcs	r3, r1
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006934:	4659      	mov	r1, fp
 8006936:	00cb      	lsls	r3, r1, #3
 8006938:	4651      	mov	r1, sl
 800693a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693e:	4651      	mov	r1, sl
 8006940:	00ca      	lsls	r2, r1, #3
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	4603      	mov	r3, r0
 8006948:	4642      	mov	r2, r8
 800694a:	189b      	adds	r3, r3, r2
 800694c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006950:	464b      	mov	r3, r9
 8006952:	460a      	mov	r2, r1
 8006954:	eb42 0303 	adc.w	r3, r2, r3
 8006958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006968:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800696c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006970:	460b      	mov	r3, r1
 8006972:	18db      	adds	r3, r3, r3
 8006974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006976:	4613      	mov	r3, r2
 8006978:	eb42 0303 	adc.w	r3, r2, r3
 800697c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800697e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006986:	f7fa f8f1 	bl	8000b6c <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <UART_SetConfig+0x2d4>)
 8006990:	fba3 1302 	umull	r1, r3, r3, r2
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	2164      	movs	r1, #100	@ 0x64
 8006998:	fb01 f303 	mul.w	r3, r1, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	3332      	adds	r3, #50	@ 0x32
 80069a2:	4a08      	ldr	r2, [pc, #32]	@ (80069c4 <UART_SetConfig+0x2d4>)
 80069a4:	fba2 2303 	umull	r2, r3, r2, r3
 80069a8:	095b      	lsrs	r3, r3, #5
 80069aa:	f003 0207 	and.w	r2, r3, #7
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4422      	add	r2, r4
 80069b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069b8:	e106      	b.n	8006bc8 <UART_SetConfig+0x4d8>
 80069ba:	bf00      	nop
 80069bc:	40011000 	.word	0x40011000
 80069c0:	40011400 	.word	0x40011400
 80069c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069da:	4642      	mov	r2, r8
 80069dc:	464b      	mov	r3, r9
 80069de:	1891      	adds	r1, r2, r2
 80069e0:	6239      	str	r1, [r7, #32]
 80069e2:	415b      	adcs	r3, r3
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80069e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069ea:	4641      	mov	r1, r8
 80069ec:	1854      	adds	r4, r2, r1
 80069ee:	4649      	mov	r1, r9
 80069f0:	eb43 0501 	adc.w	r5, r3, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	00eb      	lsls	r3, r5, #3
 80069fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a02:	00e2      	lsls	r2, r4, #3
 8006a04:	4614      	mov	r4, r2
 8006a06:	461d      	mov	r5, r3
 8006a08:	4643      	mov	r3, r8
 8006a0a:	18e3      	adds	r3, r4, r3
 8006a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a10:	464b      	mov	r3, r9
 8006a12:	eb45 0303 	adc.w	r3, r5, r3
 8006a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a36:	4629      	mov	r1, r5
 8006a38:	008b      	lsls	r3, r1, #2
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a40:	4621      	mov	r1, r4
 8006a42:	008a      	lsls	r2, r1, #2
 8006a44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a48:	f7fa f890 	bl	8000b6c <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4b60      	ldr	r3, [pc, #384]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006a52:	fba3 2302 	umull	r2, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	011c      	lsls	r4, r3, #4
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	61b9      	str	r1, [r7, #24]
 8006a74:	415b      	adcs	r3, r3
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	1851      	adds	r1, r2, r1
 8006a80:	6139      	str	r1, [r7, #16]
 8006a82:	4649      	mov	r1, r9
 8006a84:	414b      	adcs	r3, r1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a94:	4659      	mov	r1, fp
 8006a96:	00cb      	lsls	r3, r1, #3
 8006a98:	4651      	mov	r1, sl
 8006a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	00ca      	lsls	r2, r1, #3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	189b      	adds	r3, r3, r2
 8006aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	eb42 0303 	adc.w	r3, r2, r3
 8006ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	008b      	lsls	r3, r1, #2
 8006ad8:	4641      	mov	r1, r8
 8006ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ade:	4641      	mov	r1, r8
 8006ae0:	008a      	lsls	r2, r1, #2
 8006ae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ae6:	f7fa f841 	bl	8000b6c <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	4b38      	ldr	r3, [pc, #224]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006af2:	fba3 2301 	umull	r2, r3, r3, r1
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2264      	movs	r2, #100	@ 0x64
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	1acb      	subs	r3, r1, r3
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	3332      	adds	r3, #50	@ 0x32
 8006b04:	4a33      	ldr	r2, [pc, #204]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b10:	441c      	add	r4, r3
 8006b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b16:	2200      	movs	r2, #0
 8006b18:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b30:	4641      	mov	r1, r8
 8006b32:	1851      	adds	r1, r2, r1
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	4649      	mov	r1, r9
 8006b38:	414b      	adcs	r3, r1
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b48:	4659      	mov	r1, fp
 8006b4a:	00cb      	lsls	r3, r1, #3
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b52:	4651      	mov	r1, sl
 8006b54:	00ca      	lsls	r2, r1, #3
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	189b      	adds	r3, r3, r2
 8006b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b62:	464b      	mov	r3, r9
 8006b64:	460a      	mov	r2, r1
 8006b66:	eb42 0303 	adc.w	r3, r2, r3
 8006b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b76:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b84:	4649      	mov	r1, r9
 8006b86:	008b      	lsls	r3, r1, #2
 8006b88:	4641      	mov	r1, r8
 8006b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b8e:	4641      	mov	r1, r8
 8006b90:	008a      	lsls	r2, r1, #2
 8006b92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b96:	f7f9 ffe9 	bl	8000b6c <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	2164      	movs	r1, #100	@ 0x64
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	3332      	adds	r3, #50	@ 0x32
 8006bb2:	4a08      	ldr	r2, [pc, #32]	@ (8006bd4 <UART_SetConfig+0x4e4>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4422      	add	r2, r4
 8006bc6:	609a      	str	r2, [r3, #8]
}
 8006bc8:	bf00      	nop
 8006bca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd4:	51eb851f 	.word	0x51eb851f

08006bd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bea:	2b84      	cmp	r3, #132	@ 0x84
 8006bec:	d005      	beq.n	8006bfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006bee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3303      	adds	r3, #3
 8006bf8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c0e:	f3ef 8305 	mrs	r3, IPSR
 8006c12:	607b      	str	r3, [r7, #4]
  return(result);
 8006c14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bf14      	ite	ne
 8006c1a:	2301      	movne	r3, #1
 8006c1c:	2300      	moveq	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c30:	f001 f95c 	bl	8007eec <vTaskStartScheduler>
  
  return osOK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3c:	b089      	sub	sp, #36	@ 0x24
 8006c3e:	af04      	add	r7, sp, #16
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d020      	beq.n	8006c8e <osThreadCreate+0x54>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01c      	beq.n	8006c8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685c      	ldr	r4, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691e      	ldr	r6, [r3, #16]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff ffb6 	bl	8006bd8 <makeFreeRtosPriority>
 8006c6c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c76:	9202      	str	r2, [sp, #8]
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	9100      	str	r1, [sp, #0]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	4632      	mov	r2, r6
 8006c80:	4629      	mov	r1, r5
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 ff64 	bl	8007b50 <xTaskCreateStatic>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e01c      	b.n	8006cc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685c      	ldr	r4, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c9a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff ff98 	bl	8006bd8 <makeFreeRtosPriority>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	f107 030c 	add.w	r3, r7, #12
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	9200      	str	r2, [sp, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 ffa9 	bl	8007c10 <xTaskCreate>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e000      	b.n	8006cca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <osDelay+0x16>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	e000      	b.n	8006cea <osDelay+0x18>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 f8c8 	bl	8007e80 <vTaskDelay>
  
  return osOK;
 8006cf0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	2001      	movs	r0, #1
 8006d12:	f000 fab6 	bl	8007282 <xQueueCreateMutexStatic>
 8006d16:	4603      	mov	r3, r0
 8006d18:	e003      	b.n	8006d22 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	f000 fa99 	bl	8007252 <xQueueCreateMutex>
 8006d20:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <osMutexWait+0x18>
    return osErrorParameter;
 8006d40:	2380      	movs	r3, #128	@ 0x80
 8006d42:	e03a      	b.n	8006dba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d103      	bne.n	8006d58 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006d50:	f04f 33ff 	mov.w	r3, #4294967295
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	e009      	b.n	8006d6c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <osMutexWait+0x40>
      ticks = 1;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006d6c:	f7ff ff4c 	bl	8006c08 <inHandlerMode>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d017      	beq.n	8006da6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fd3c 	bl	80077fc <xQueueReceiveFromISR>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d001      	beq.n	8006d8e <osMutexWait+0x62>
      return osErrorOS;
 8006d8a:	23ff      	movs	r3, #255	@ 0xff
 8006d8c:	e015      	b.n	8006dba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d011      	beq.n	8006db8 <osMutexWait+0x8c>
 8006d94:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc4 <osMutexWait+0x98>)
 8006d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	e008      	b.n	8006db8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fc17 	bl	80075dc <xQueueSemaphoreTake>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d001      	beq.n	8006db8 <osMutexWait+0x8c>
    return osErrorOS;
 8006db4:	23ff      	movs	r3, #255	@ 0xff
 8006db6:	e000      	b.n	8006dba <osMutexWait+0x8e>
  }
  
  return osOK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006dd8:	f7ff ff16 	bl	8006c08 <inHandlerMode>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d016      	beq.n	8006e10 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb67 	bl	80074bc <xQueueGiveFromISR>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d001      	beq.n	8006df8 <osMutexRelease+0x30>
      return osErrorOS;
 8006df4:	23ff      	movs	r3, #255	@ 0xff
 8006df6:	e017      	b.n	8006e28 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <osMutexRelease+0x5e>
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <osMutexRelease+0x68>)
 8006e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	e00a      	b.n	8006e26 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006e10:	2300      	movs	r3, #0
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa4e 	bl	80072b8 <xQueueGenericSend>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d001      	beq.n	8006e26 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006e22:	23ff      	movs	r3, #255	@ 0xff
 8006e24:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006e26:	68fb      	ldr	r3, [r7, #12]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f103 0208 	add.w	r2, r3, #8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f103 0208 	add.w	r2, r3, #8
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f103 0208 	add.w	r2, r3, #8
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	601a      	str	r2, [r3, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d103      	bne.n	8006ef6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e00c      	b.n	8006f10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e002      	b.n	8006f04 <vListInsert+0x2e>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d2f6      	bcs.n	8006efe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]
}
 8006f3c:	bf00      	nop
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6892      	ldr	r2, [r2, #8]
 8006f5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6852      	ldr	r2, [r2, #4]
 8006f68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d103      	bne.n	8006f7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	1e5a      	subs	r2, r3, #1
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10b      	bne.n	8006fc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	e7fd      	b.n	8006fc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006fc8:	f001 feee 	bl	8008da8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd4:	68f9      	ldr	r1, [r7, #12]
 8006fd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	68f9      	ldr	r1, [r7, #12]
 8006ffc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ffe:	fb01 f303 	mul.w	r3, r1, r3
 8007002:	441a      	add	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	22ff      	movs	r2, #255	@ 0xff
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	22ff      	movs	r2, #255	@ 0xff
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d114      	bne.n	8007048 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01a      	beq.n	800705c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3310      	adds	r3, #16
 800702a:	4618      	mov	r0, r3
 800702c:	f001 f9a8 	bl	8008380 <xTaskRemoveFromEventList>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d012      	beq.n	800705c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007036:	4b0d      	ldr	r3, [pc, #52]	@ (800706c <xQueueGenericReset+0xd0>)
 8007038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	e009      	b.n	800705c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3310      	adds	r3, #16
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fef1 	bl	8006e34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3324      	adds	r3, #36	@ 0x24
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff feec 	bl	8006e34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800705c:	f001 fed6 	bl	8008e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007060:	2301      	movs	r3, #1
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08e      	sub	sp, #56	@ 0x38
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10b      	bne.n	80070ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <xQueueGenericCreateStatic+0x56>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <xQueueGenericCreateStatic+0x5a>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e000      	b.n	80070cc <xQueueGenericCreateStatic+0x5c>
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	623b      	str	r3, [r7, #32]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <xQueueGenericCreateStatic+0x84>
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <xQueueGenericCreateStatic+0x88>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <xQueueGenericCreateStatic+0x8a>
 80070f8:	2300      	movs	r3, #0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	61fb      	str	r3, [r7, #28]
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	e7fd      	b.n	8007112 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007116:	2348      	movs	r3, #72	@ 0x48
 8007118:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b48      	cmp	r3, #72	@ 0x48
 800711e:	d00b      	beq.n	8007138 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	61bb      	str	r3, [r7, #24]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007138:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00d      	beq.n	8007160 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800714c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f840 	bl	80071e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007162:	4618      	mov	r0, r3
 8007164:	3730      	adds	r7, #48	@ 0x30
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800716a:	b580      	push	{r7, lr}
 800716c:	b08a      	sub	sp, #40	@ 0x28
 800716e:	af02      	add	r7, sp, #8
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	4613      	mov	r3, r2
 8007176:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10b      	bne.n	8007196 <xQueueGenericCreate+0x2c>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	613b      	str	r3, [r7, #16]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	3348      	adds	r3, #72	@ 0x48
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 ff21 	bl	8008fec <pvPortMalloc>
 80071aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d011      	beq.n	80071d6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	3348      	adds	r3, #72	@ 0x48
 80071ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071c4:	79fa      	ldrb	r2, [r7, #7]
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	4613      	mov	r3, r2
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f805 	bl	80071e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071d6:	69bb      	ldr	r3, [r7, #24]
	}
 80071d8:	4618      	mov	r0, r3
 80071da:	3720      	adds	r7, #32
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	e002      	b.n	8007202 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800720e:	2101      	movs	r1, #1
 8007210:	69b8      	ldr	r0, [r7, #24]
 8007212:	f7ff fec3 	bl	8006f9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800721e:	b580      	push	{r7, lr}
 8007220:	b082      	sub	sp, #8
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00e      	beq.n	800724a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800723e:	2300      	movs	r3, #0
 8007240:	2200      	movs	r2, #0
 8007242:	2100      	movs	r1, #0
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f837 	bl	80072b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	4603      	mov	r3, r0
 800725a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	2300      	movs	r3, #0
 8007262:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	461a      	mov	r2, r3
 8007268:	6939      	ldr	r1, [r7, #16]
 800726a:	6978      	ldr	r0, [r7, #20]
 800726c:	f7ff ff7d 	bl	800716a <xQueueGenericCreate>
 8007270:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff ffd3 	bl	800721e <prvInitialiseMutex>

		return xNewQueue;
 8007278:	68fb      	ldr	r3, [r7, #12]
	}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007282:	b580      	push	{r7, lr}
 8007284:	b088      	sub	sp, #32
 8007286:	af02      	add	r7, sp, #8
 8007288:	4603      	mov	r3, r0
 800728a:	6039      	str	r1, [r7, #0]
 800728c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	6939      	ldr	r1, [r7, #16]
 80072a0:	6978      	ldr	r0, [r7, #20]
 80072a2:	f7ff fee5 	bl	8007070 <xQueueGenericCreateStatic>
 80072a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff ffb8 	bl	800721e <prvInitialiseMutex>

		return xNewQueue;
 80072ae:	68fb      	ldr	r3, [r7, #12]
	}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	@ 0x38
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072c6:	2300      	movs	r3, #0
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xQueueGenericSend+0x34>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <xQueueGenericSend+0x42>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <xQueueGenericSend+0x46>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xQueueGenericSend+0x48>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <xQueueGenericSend+0x64>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d103      	bne.n	800732a <xQueueGenericSend+0x72>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <xQueueGenericSend+0x76>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <xQueueGenericSend+0x78>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10b      	bne.n	800734c <xQueueGenericSend+0x94>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	623b      	str	r3, [r7, #32]
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	e7fd      	b.n	8007348 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800734c:	f001 f9d8 	bl	8008700 <xTaskGetSchedulerState>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d102      	bne.n	800735c <xQueueGenericSend+0xa4>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <xQueueGenericSend+0xa8>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <xQueueGenericSend+0xaa>
 8007360:	2300      	movs	r3, #0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10b      	bne.n	800737e <xQueueGenericSend+0xc6>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	61fb      	str	r3, [r7, #28]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800737e:	f001 fd13 	bl	8008da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800738a:	429a      	cmp	r2, r3
 800738c:	d302      	bcc.n	8007394 <xQueueGenericSend+0xdc>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d129      	bne.n	80073e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800739a:	f000 fac9 	bl	8007930 <prvCopyDataToQueue>
 800739e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d010      	beq.n	80073ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	3324      	adds	r3, #36	@ 0x24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 ffe7 	bl	8008380 <xTaskRemoveFromEventList>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d013      	beq.n	80073e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073b8:	4b3f      	ldr	r3, [pc, #252]	@ (80074b8 <xQueueGenericSend+0x200>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	e00a      	b.n	80073e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073d0:	4b39      	ldr	r3, [pc, #228]	@ (80074b8 <xQueueGenericSend+0x200>)
 80073d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073e0:	f001 fd14 	bl	8008e0c <vPortExitCritical>
				return pdPASS;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e063      	b.n	80074b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ee:	f001 fd0d 	bl	8008e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	e05c      	b.n	80074b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073fc:	f107 0314 	add.w	r3, r7, #20
 8007400:	4618      	mov	r0, r3
 8007402:	f001 f821 	bl	8008448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007406:	2301      	movs	r3, #1
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800740a:	f001 fcff 	bl	8008e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800740e:	f000 fdcf 	bl	8007fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007412:	f001 fcc9 	bl	8008da8 <vPortEnterCritical>
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800741c:	b25b      	sxtb	r3, r3
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d103      	bne.n	800742c <xQueueGenericSend+0x174>
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007432:	b25b      	sxtb	r3, r3
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d103      	bne.n	8007442 <xQueueGenericSend+0x18a>
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007442:	f001 fce3 	bl	8008e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007446:	1d3a      	adds	r2, r7, #4
 8007448:	f107 0314 	add.w	r3, r7, #20
 800744c:	4611      	mov	r1, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f001 f810 	bl	8008474 <xTaskCheckForTimeOut>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d124      	bne.n	80074a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800745a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800745c:	f000 fb60 	bl	8007b20 <prvIsQueueFull>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d018      	beq.n	8007498 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	3310      	adds	r3, #16
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f000 ff60 	bl	8008334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007476:	f000 faeb 	bl	8007a50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800747a:	f000 fda7 	bl	8007fcc <xTaskResumeAll>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	f47f af7c 	bne.w	800737e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007486:	4b0c      	ldr	r3, [pc, #48]	@ (80074b8 <xQueueGenericSend+0x200>)
 8007488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	e772      	b.n	800737e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800749a:	f000 fad9 	bl	8007a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800749e:	f000 fd95 	bl	8007fcc <xTaskResumeAll>
 80074a2:	e76c      	b.n	800737e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074a6:	f000 fad3 	bl	8007a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074aa:	f000 fd8f 	bl	8007fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3738      	adds	r7, #56	@ 0x38
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	@ 0x38
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	623b      	str	r3, [r7, #32]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	61fb      	str	r3, [r7, #28]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <xQueueGiveFromISR+0x5c>
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <xQueueGiveFromISR+0x60>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <xQueueGiveFromISR+0x62>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	61bb      	str	r3, [r7, #24]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800753a:	f001 fd15 	bl	8008f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800753e:	f3ef 8211 	mrs	r2, BASEPRI
 8007542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	617a      	str	r2, [r7, #20]
 8007554:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007556:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007558:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007566:	429a      	cmp	r2, r3
 8007568:	d22b      	bcs.n	80075c2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800757c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d112      	bne.n	80075ac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758a:	2b00      	cmp	r3, #0
 800758c:	d016      	beq.n	80075bc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	3324      	adds	r3, #36	@ 0x24
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fef4 	bl	8008380 <xTaskRemoveFromEventList>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00e      	beq.n	80075bc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2201      	movs	r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e007      	b.n	80075bc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075b0:	3301      	adds	r3, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	b25a      	sxtb	r2, r3
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80075bc:	2301      	movs	r3, #1
 80075be:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c0:	e001      	b.n	80075c6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3738      	adds	r7, #56	@ 0x38
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08e      	sub	sp, #56	@ 0x38
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	623b      	str	r3, [r7, #32]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00b      	beq.n	8007630 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	61fb      	str	r3, [r7, #28]
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007630:	f001 f866 	bl	8008700 <xTaskGetSchedulerState>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d102      	bne.n	8007640 <xQueueSemaphoreTake+0x64>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <xQueueSemaphoreTake+0x68>
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <xQueueSemaphoreTake+0x6a>
 8007644:	2300      	movs	r3, #0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10b      	bne.n	8007662 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	61bb      	str	r3, [r7, #24]
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	e7fd      	b.n	800765e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007662:	f001 fba1 	bl	8008da8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d024      	beq.n	80076bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	1e5a      	subs	r2, r3, #1
 8007676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007678:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007682:	f001 f9e9 	bl	8008a58 <pvTaskIncrementMutexHeldCount>
 8007686:	4602      	mov	r2, r0
 8007688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00f      	beq.n	80076b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007696:	3310      	adds	r3, #16
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fe71 	bl	8008380 <xTaskRemoveFromEventList>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076a4:	4b54      	ldr	r3, [pc, #336]	@ (80077f8 <xQueueSemaphoreTake+0x21c>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076b4:	f001 fbaa 	bl	8008e0c <vPortExitCritical>
				return pdPASS;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e098      	b.n	80077ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d112      	bne.n	80076e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	617b      	str	r3, [r7, #20]
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80076e0:	f001 fb94 	bl	8008e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e082      	b.n	80077ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076ee:	f107 030c 	add.w	r3, r7, #12
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fea8 	bl	8008448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076f8:	2301      	movs	r3, #1
 80076fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076fc:	f001 fb86 	bl	8008e0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007700:	f000 fc56 	bl	8007fb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007704:	f001 fb50 	bl	8008da8 <vPortEnterCritical>
 8007708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800770e:	b25b      	sxtb	r3, r3
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007714:	d103      	bne.n	800771e <xQueueSemaphoreTake+0x142>
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800771e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007724:	b25b      	sxtb	r3, r3
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d103      	bne.n	8007734 <xQueueSemaphoreTake+0x158>
 800772c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007734:	f001 fb6a 	bl	8008e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007738:	463a      	mov	r2, r7
 800773a:	f107 030c 	add.w	r3, r7, #12
 800773e:	4611      	mov	r1, r2
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fe97 	bl	8008474 <xTaskCheckForTimeOut>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d132      	bne.n	80077b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800774c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800774e:	f000 f9d1 	bl	8007af4 <prvIsQueueEmpty>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d026      	beq.n	80077a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007760:	f001 fb22 	bl	8008da8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 ffe7 	bl	800873c <xTaskPriorityInherit>
 800776e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007770:	f001 fb4c 	bl	8008e0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007776:	3324      	adds	r3, #36	@ 0x24
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fdd9 	bl	8008334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007782:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007784:	f000 f964 	bl	8007a50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007788:	f000 fc20 	bl	8007fcc <xTaskResumeAll>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	f47f af67 	bne.w	8007662 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007794:	4b18      	ldr	r3, [pc, #96]	@ (80077f8 <xQueueSemaphoreTake+0x21c>)
 8007796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	e75d      	b.n	8007662 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077a8:	f000 f952 	bl	8007a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077ac:	f000 fc0e 	bl	8007fcc <xTaskResumeAll>
 80077b0:	e757      	b.n	8007662 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077b4:	f000 f94c 	bl	8007a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077b8:	f000 fc08 	bl	8007fcc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077be:	f000 f999 	bl	8007af4 <prvIsQueueEmpty>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f43f af4c 	beq.w	8007662 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00d      	beq.n	80077ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80077d0:	f001 faea 	bl	8008da8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80077d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077d6:	f000 f893 	bl	8007900 <prvGetDisinheritPriorityAfterTimeout>
 80077da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80077dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f001 f8a8 	bl	8008938 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80077e8:	f001 fb10 	bl	8008e0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3738      	adds	r7, #56	@ 0x38
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08e      	sub	sp, #56	@ 0x38
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10b      	bne.n	800782a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	623b      	str	r3, [r7, #32]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <xQueueReceiveFromISR+0x3c>
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <xQueueReceiveFromISR+0x40>
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <xQueueReceiveFromISR+0x42>
 800783c:	2300      	movs	r3, #0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	61fb      	str	r3, [r7, #28]
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	e7fd      	b.n	8007856 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800785a:	f001 fb85 	bl	8008f68 <vPortValidateInterruptPriority>
	__asm volatile
 800785e:	f3ef 8211 	mrs	r2, BASEPRI
 8007862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	61ba      	str	r2, [r7, #24]
 8007874:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007876:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007878:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d02f      	beq.n	80078e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800788c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007894:	f000 f8b6 	bl	8007a04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789a:	1e5a      	subs	r2, r3, #1
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80078a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d112      	bne.n	80078d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	3310      	adds	r3, #16
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fd62 	bl	8008380 <xTaskRemoveFromEventList>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e007      	b.n	80078e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80078d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078d4:	3301      	adds	r3, #1
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	b25a      	sxtb	r2, r3
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e4:	e001      	b.n	80078ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f383 8811 	msr	BASEPRI, r3
}
 80078f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3738      	adds	r7, #56	@ 0x38
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d006      	beq.n	800791e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f1c3 0307 	rsb	r3, r3, #7
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e001      	b.n	8007922 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007922:	68fb      	ldr	r3, [r7, #12]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007944:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10d      	bne.n	800796a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d14d      	bne.n	80079f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 ff64 	bl	8008828 <xTaskPriorityDisinherit>
 8007960:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	609a      	str	r2, [r3, #8]
 8007968:	e043      	b.n	80079f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d119      	bne.n	80079a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6858      	ldr	r0, [r3, #4]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007978:	461a      	mov	r2, r3
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	f002 fd80 	bl	800a480 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007988:	441a      	add	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	429a      	cmp	r2, r3
 8007998:	d32b      	bcc.n	80079f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	605a      	str	r2, [r3, #4]
 80079a2:	e026      	b.n	80079f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	68d8      	ldr	r0, [r3, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ac:	461a      	mov	r2, r3
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	f002 fd66 	bl	800a480 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079bc:	425b      	negs	r3, r3
 80079be:	441a      	add	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d207      	bcs.n	80079e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d8:	425b      	negs	r3, r3
 80079da:	441a      	add	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d105      	bne.n	80079f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80079fa:	697b      	ldr	r3, [r7, #20]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d018      	beq.n	8007a48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1e:	441a      	add	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d303      	bcc.n	8007a38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68d9      	ldr	r1, [r3, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a40:	461a      	mov	r2, r3
 8007a42:	6838      	ldr	r0, [r7, #0]
 8007a44:	f002 fd1c 	bl	800a480 <memcpy>
	}
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a58:	f001 f9a6 	bl	8008da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a64:	e011      	b.n	8007a8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d012      	beq.n	8007a94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3324      	adds	r3, #36	@ 0x24
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fc84 	bl	8008380 <xTaskRemoveFromEventList>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a7e:	f000 fd5d 	bl	800853c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dce9      	bgt.n	8007a66 <prvUnlockQueue+0x16>
 8007a92:	e000      	b.n	8007a96 <prvUnlockQueue+0x46>
					break;
 8007a94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	22ff      	movs	r2, #255	@ 0xff
 8007a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007a9e:	f001 f9b5 	bl	8008e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007aa2:	f001 f981 	bl	8008da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aae:	e011      	b.n	8007ad4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d012      	beq.n	8007ade <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3310      	adds	r3, #16
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fc5f 	bl	8008380 <xTaskRemoveFromEventList>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ac8:	f000 fd38 	bl	800853c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	dce9      	bgt.n	8007ab0 <prvUnlockQueue+0x60>
 8007adc:	e000      	b.n	8007ae0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ade:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	22ff      	movs	r2, #255	@ 0xff
 8007ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007ae8:	f001 f990 	bl	8008e0c <vPortExitCritical>
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007afc:	f001 f954 	bl	8008da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e001      	b.n	8007b12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b12:	f001 f97b 	bl	8008e0c <vPortExitCritical>

	return xReturn;
 8007b16:	68fb      	ldr	r3, [r7, #12]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b28:	f001 f93e 	bl	8008da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d102      	bne.n	8007b3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	e001      	b.n	8007b42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b42:	f001 f963 	bl	8008e0c <vPortExitCritical>

	return xReturn;
 8007b46:	68fb      	ldr	r3, [r7, #12]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08e      	sub	sp, #56	@ 0x38
 8007b54:	af04      	add	r7, sp, #16
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	623b      	str	r3, [r7, #32]
}
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	61fb      	str	r3, [r7, #28]
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	e7fd      	b.n	8007b96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b9a:	2354      	movs	r3, #84	@ 0x54
 8007b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2b54      	cmp	r3, #84	@ 0x54
 8007ba2:	d00b      	beq.n	8007bbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	61bb      	str	r3, [r7, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	e7fd      	b.n	8007bb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d01e      	beq.n	8007c02 <xTaskCreateStatic+0xb2>
 8007bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01b      	beq.n	8007c02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9303      	str	r3, [sp, #12]
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	9302      	str	r3, [sp, #8]
 8007be4:	f107 0314 	add.w	r3, r7, #20
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f850 	bl	8007c9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bfc:	f000 f8d6 	bl	8007dac <prvAddNewTaskToReadyList>
 8007c00:	e001      	b.n	8007c06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c06:	697b      	ldr	r3, [r7, #20]
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3728      	adds	r7, #40	@ 0x28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08c      	sub	sp, #48	@ 0x30
 8007c14:	af04      	add	r7, sp, #16
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	603b      	str	r3, [r7, #0]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 f9e1 	bl	8008fec <pvPortMalloc>
 8007c2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00e      	beq.n	8007c50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c32:	2054      	movs	r0, #84	@ 0x54
 8007c34:	f001 f9da 	bl	8008fec <pvPortMalloc>
 8007c38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c46:	e005      	b.n	8007c54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c48:	6978      	ldr	r0, [r7, #20]
 8007c4a:	f001 fa9d 	bl	8009188 <vPortFree>
 8007c4e:	e001      	b.n	8007c54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d017      	beq.n	8007c8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c62:	88fa      	ldrh	r2, [r7, #6]
 8007c64:	2300      	movs	r3, #0
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f80e 	bl	8007c9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c7e:	69f8      	ldr	r0, [r7, #28]
 8007c80:	f000 f894 	bl	8007dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c84:	2301      	movs	r3, #1
 8007c86:	61bb      	str	r3, [r7, #24]
 8007c88:	e002      	b.n	8007c90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c90:	69bb      	ldr	r3, [r7, #24]
	}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3720      	adds	r7, #32
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b088      	sub	sp, #32
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	f023 0307 	bic.w	r3, r3, #7
 8007cc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	617b      	str	r3, [r7, #20]
}
 8007cde:	bf00      	nop
 8007ce0:	bf00      	nop
 8007ce2:	e7fd      	b.n	8007ce0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01f      	beq.n	8007d2a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	e012      	b.n	8007d16 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	7819      	ldrb	r1, [r3, #0]
 8007cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3334      	adds	r3, #52	@ 0x34
 8007d00:	460a      	mov	r2, r1
 8007d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d006      	beq.n	8007d1e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	2b0f      	cmp	r3, #15
 8007d1a:	d9e9      	bls.n	8007cf0 <prvInitialiseNewTask+0x56>
 8007d1c:	e000      	b.n	8007d20 <prvInitialiseNewTask+0x86>
			{
				break;
 8007d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d28:	e003      	b.n	8007d32 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d34:	2b06      	cmp	r3, #6
 8007d36:	d901      	bls.n	8007d3c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d38:	2306      	movs	r3, #6
 8007d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d40:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d46:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff f88e 	bl	8006e74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff f889 	bl	8006e74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f1c3 0207 	rsb	r2, r3, #7
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d76:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	68f9      	ldr	r1, [r7, #12]
 8007d8a:	69b8      	ldr	r0, [r7, #24]
 8007d8c:	f000 fede 	bl	8008b4c <pxPortInitialiseStack>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da2:	bf00      	nop
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007db4:	f000 fff8 	bl	8008da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007db8:	4b2a      	ldr	r3, [pc, #168]	@ (8007e64 <prvAddNewTaskToReadyList+0xb8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	4a29      	ldr	r2, [pc, #164]	@ (8007e64 <prvAddNewTaskToReadyList+0xb8>)
 8007dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dc2:	4b29      	ldr	r3, [pc, #164]	@ (8007e68 <prvAddNewTaskToReadyList+0xbc>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d109      	bne.n	8007dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dca:	4a27      	ldr	r2, [pc, #156]	@ (8007e68 <prvAddNewTaskToReadyList+0xbc>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dd0:	4b24      	ldr	r3, [pc, #144]	@ (8007e64 <prvAddNewTaskToReadyList+0xb8>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d110      	bne.n	8007dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dd8:	f000 fbd4 	bl	8008584 <prvInitialiseTaskLists>
 8007ddc:	e00d      	b.n	8007dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dde:	4b23      	ldr	r3, [pc, #140]	@ (8007e6c <prvAddNewTaskToReadyList+0xc0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007de6:	4b20      	ldr	r3, [pc, #128]	@ (8007e68 <prvAddNewTaskToReadyList+0xbc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d802      	bhi.n	8007dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007df4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e68 <prvAddNewTaskToReadyList+0xbc>)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8007e70 <prvAddNewTaskToReadyList+0xc4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	4a1b      	ldr	r2, [pc, #108]	@ (8007e70 <prvAddNewTaskToReadyList+0xc4>)
 8007e02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	2201      	movs	r2, #1
 8007e0a:	409a      	lsls	r2, r3
 8007e0c:	4b19      	ldr	r3, [pc, #100]	@ (8007e74 <prvAddNewTaskToReadyList+0xc8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	4a18      	ldr	r2, [pc, #96]	@ (8007e74 <prvAddNewTaskToReadyList+0xc8>)
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4a15      	ldr	r2, [pc, #84]	@ (8007e78 <prvAddNewTaskToReadyList+0xcc>)
 8007e24:	441a      	add	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	f7ff f82e 	bl	8006e8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e32:	f000 ffeb 	bl	8008e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <prvAddNewTaskToReadyList+0xc0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00e      	beq.n	8007e5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e68 <prvAddNewTaskToReadyList+0xbc>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d207      	bcs.n	8007e5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e7c <prvAddNewTaskToReadyList+0xd0>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	2000089c 	.word	0x2000089c
 8007e68:	2000079c 	.word	0x2000079c
 8007e6c:	200008a8 	.word	0x200008a8
 8007e70:	200008b8 	.word	0x200008b8
 8007e74:	200008a4 	.word	0x200008a4
 8007e78:	200007a0 	.word	0x200007a0
 8007e7c:	e000ed04 	.word	0xe000ed04

08007e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d018      	beq.n	8007ec4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e92:	4b14      	ldr	r3, [pc, #80]	@ (8007ee4 <vTaskDelay+0x64>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <vTaskDelay+0x32>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	60bb      	str	r3, [r7, #8]
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	e7fd      	b.n	8007eae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007eb2:	f000 f87d 	bl	8007fb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fde1 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ebe:	f000 f885 	bl	8007fcc <xTaskResumeAll>
 8007ec2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007eca:	4b07      	ldr	r3, [pc, #28]	@ (8007ee8 <vTaskDelay+0x68>)
 8007ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200008c4 	.word	0x200008c4
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	@ 0x28
 8007ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007efa:	463a      	mov	r2, r7
 8007efc:	1d39      	adds	r1, r7, #4
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f9 fe36 	bl	8001b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	9202      	str	r2, [sp, #8]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	2300      	movs	r3, #0
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	460a      	mov	r2, r1
 8007f1a:	491f      	ldr	r1, [pc, #124]	@ (8007f98 <vTaskStartScheduler+0xac>)
 8007f1c:	481f      	ldr	r0, [pc, #124]	@ (8007f9c <vTaskStartScheduler+0xb0>)
 8007f1e:	f7ff fe17 	bl	8007b50 <xTaskCreateStatic>
 8007f22:	4603      	mov	r3, r0
 8007f24:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa0 <vTaskStartScheduler+0xb4>)
 8007f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f28:	4b1d      	ldr	r3, [pc, #116]	@ (8007fa0 <vTaskStartScheduler+0xb4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f30:	2301      	movs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e001      	b.n	8007f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d116      	bne.n	8007f6e <vTaskStartScheduler+0x82>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
}
 8007f52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f54:	4b13      	ldr	r3, [pc, #76]	@ (8007fa4 <vTaskStartScheduler+0xb8>)
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f5c:	4b12      	ldr	r3, [pc, #72]	@ (8007fa8 <vTaskStartScheduler+0xbc>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f62:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <vTaskStartScheduler+0xc0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f68:	f000 fe7a 	bl	8008c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f6c:	e00f      	b.n	8007f8e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f74:	d10b      	bne.n	8007f8e <vTaskStartScheduler+0xa2>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60fb      	str	r3, [r7, #12]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <vTaskStartScheduler+0x9e>
}
 8007f8e:	bf00      	nop
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	0800a500 	.word	0x0800a500
 8007f9c:	08008555 	.word	0x08008555
 8007fa0:	200008c0 	.word	0x200008c0
 8007fa4:	200008bc 	.word	0x200008bc
 8007fa8:	200008a8 	.word	0x200008a8
 8007fac:	200008a0 	.word	0x200008a0

08007fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fb4:	4b04      	ldr	r3, [pc, #16]	@ (8007fc8 <vTaskSuspendAll+0x18>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	4a03      	ldr	r2, [pc, #12]	@ (8007fc8 <vTaskSuspendAll+0x18>)
 8007fbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007fbe:	bf00      	nop
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	200008c4 	.word	0x200008c4

08007fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fda:	4b42      	ldr	r3, [pc, #264]	@ (80080e4 <xTaskResumeAll+0x118>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10b      	bne.n	8007ffa <xTaskResumeAll+0x2e>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	603b      	str	r3, [r7, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	e7fd      	b.n	8007ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ffa:	f000 fed5 	bl	8008da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ffe:	4b39      	ldr	r3, [pc, #228]	@ (80080e4 <xTaskResumeAll+0x118>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3b01      	subs	r3, #1
 8008004:	4a37      	ldr	r2, [pc, #220]	@ (80080e4 <xTaskResumeAll+0x118>)
 8008006:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008008:	4b36      	ldr	r3, [pc, #216]	@ (80080e4 <xTaskResumeAll+0x118>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d161      	bne.n	80080d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008010:	4b35      	ldr	r3, [pc, #212]	@ (80080e8 <xTaskResumeAll+0x11c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d05d      	beq.n	80080d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008018:	e02e      	b.n	8008078 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800801a:	4b34      	ldr	r3, [pc, #208]	@ (80080ec <xTaskResumeAll+0x120>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3318      	adds	r3, #24
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe ff8e 	bl	8006f48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3304      	adds	r3, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe ff89 	bl	8006f48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	2201      	movs	r2, #1
 800803c:	409a      	lsls	r2, r3
 800803e:	4b2c      	ldr	r3, [pc, #176]	@ (80080f0 <xTaskResumeAll+0x124>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4313      	orrs	r3, r2
 8008044:	4a2a      	ldr	r2, [pc, #168]	@ (80080f0 <xTaskResumeAll+0x124>)
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4a27      	ldr	r2, [pc, #156]	@ (80080f4 <xTaskResumeAll+0x128>)
 8008056:	441a      	add	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3304      	adds	r3, #4
 800805c:	4619      	mov	r1, r3
 800805e:	4610      	mov	r0, r2
 8008060:	f7fe ff15 	bl	8006e8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008068:	4b23      	ldr	r3, [pc, #140]	@ (80080f8 <xTaskResumeAll+0x12c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806e:	429a      	cmp	r2, r3
 8008070:	d302      	bcc.n	8008078 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008072:	4b22      	ldr	r3, [pc, #136]	@ (80080fc <xTaskResumeAll+0x130>)
 8008074:	2201      	movs	r2, #1
 8008076:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008078:	4b1c      	ldr	r3, [pc, #112]	@ (80080ec <xTaskResumeAll+0x120>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1cc      	bne.n	800801a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008086:	f000 fb1b 	bl	80086c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800808a:	4b1d      	ldr	r3, [pc, #116]	@ (8008100 <xTaskResumeAll+0x134>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d010      	beq.n	80080b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008096:	f000 f837 	bl	8008108 <xTaskIncrementTick>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80080a0:	4b16      	ldr	r3, [pc, #88]	@ (80080fc <xTaskResumeAll+0x130>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f1      	bne.n	8008096 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80080b2:	4b13      	ldr	r3, [pc, #76]	@ (8008100 <xTaskResumeAll+0x134>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080b8:	4b10      	ldr	r3, [pc, #64]	@ (80080fc <xTaskResumeAll+0x130>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008104 <xTaskResumeAll+0x138>)
 80080c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080d4:	f000 fe9a 	bl	8008e0c <vPortExitCritical>

	return xAlreadyYielded;
 80080d8:	68bb      	ldr	r3, [r7, #8]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200008c4 	.word	0x200008c4
 80080e8:	2000089c 	.word	0x2000089c
 80080ec:	2000085c 	.word	0x2000085c
 80080f0:	200008a4 	.word	0x200008a4
 80080f4:	200007a0 	.word	0x200007a0
 80080f8:	2000079c 	.word	0x2000079c
 80080fc:	200008b0 	.word	0x200008b0
 8008100:	200008ac 	.word	0x200008ac
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008112:	4b4f      	ldr	r3, [pc, #316]	@ (8008250 <xTaskIncrementTick+0x148>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f040 808f 	bne.w	800823a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800811c:	4b4d      	ldr	r3, [pc, #308]	@ (8008254 <xTaskIncrementTick+0x14c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3301      	adds	r3, #1
 8008122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008124:	4a4b      	ldr	r2, [pc, #300]	@ (8008254 <xTaskIncrementTick+0x14c>)
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d121      	bne.n	8008174 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008130:	4b49      	ldr	r3, [pc, #292]	@ (8008258 <xTaskIncrementTick+0x150>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <xTaskIncrementTick+0x4a>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	603b      	str	r3, [r7, #0]
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	e7fd      	b.n	800814e <xTaskIncrementTick+0x46>
 8008152:	4b41      	ldr	r3, [pc, #260]	@ (8008258 <xTaskIncrementTick+0x150>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	4b40      	ldr	r3, [pc, #256]	@ (800825c <xTaskIncrementTick+0x154>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a3e      	ldr	r2, [pc, #248]	@ (8008258 <xTaskIncrementTick+0x150>)
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	4a3e      	ldr	r2, [pc, #248]	@ (800825c <xTaskIncrementTick+0x154>)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	4b3e      	ldr	r3, [pc, #248]	@ (8008260 <xTaskIncrementTick+0x158>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3301      	adds	r3, #1
 800816c:	4a3c      	ldr	r2, [pc, #240]	@ (8008260 <xTaskIncrementTick+0x158>)
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	f000 faa6 	bl	80086c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008174:	4b3b      	ldr	r3, [pc, #236]	@ (8008264 <xTaskIncrementTick+0x15c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	429a      	cmp	r2, r3
 800817c:	d348      	bcc.n	8008210 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800817e:	4b36      	ldr	r3, [pc, #216]	@ (8008258 <xTaskIncrementTick+0x150>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008188:	4b36      	ldr	r3, [pc, #216]	@ (8008264 <xTaskIncrementTick+0x15c>)
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	601a      	str	r2, [r3, #0]
					break;
 8008190:	e03e      	b.n	8008210 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008192:	4b31      	ldr	r3, [pc, #196]	@ (8008258 <xTaskIncrementTick+0x150>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d203      	bcs.n	80081b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081aa:	4a2e      	ldr	r2, [pc, #184]	@ (8008264 <xTaskIncrementTick+0x15c>)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081b0:	e02e      	b.n	8008210 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fec6 	bl	8006f48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d004      	beq.n	80081ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3318      	adds	r3, #24
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe febd 	bl	8006f48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	2201      	movs	r2, #1
 80081d4:	409a      	lsls	r2, r3
 80081d6:	4b24      	ldr	r3, [pc, #144]	@ (8008268 <xTaskIncrementTick+0x160>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4313      	orrs	r3, r2
 80081dc:	4a22      	ldr	r2, [pc, #136]	@ (8008268 <xTaskIncrementTick+0x160>)
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4a1f      	ldr	r2, [pc, #124]	@ (800826c <xTaskIncrementTick+0x164>)
 80081ee:	441a      	add	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f7fe fe49 	bl	8006e8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008200:	4b1b      	ldr	r3, [pc, #108]	@ (8008270 <xTaskIncrementTick+0x168>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008206:	429a      	cmp	r2, r3
 8008208:	d3b9      	bcc.n	800817e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800820e:	e7b6      	b.n	800817e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008210:	4b17      	ldr	r3, [pc, #92]	@ (8008270 <xTaskIncrementTick+0x168>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008216:	4915      	ldr	r1, [pc, #84]	@ (800826c <xTaskIncrementTick+0x164>)
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	440b      	add	r3, r1
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d901      	bls.n	800822c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800822c:	4b11      	ldr	r3, [pc, #68]	@ (8008274 <xTaskIncrementTick+0x16c>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008234:	2301      	movs	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e004      	b.n	8008244 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800823a:	4b0f      	ldr	r3, [pc, #60]	@ (8008278 <xTaskIncrementTick+0x170>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	4a0d      	ldr	r2, [pc, #52]	@ (8008278 <xTaskIncrementTick+0x170>)
 8008242:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008244:	697b      	ldr	r3, [r7, #20]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	200008c4 	.word	0x200008c4
 8008254:	200008a0 	.word	0x200008a0
 8008258:	20000854 	.word	0x20000854
 800825c:	20000858 	.word	0x20000858
 8008260:	200008b4 	.word	0x200008b4
 8008264:	200008bc 	.word	0x200008bc
 8008268:	200008a4 	.word	0x200008a4
 800826c:	200007a0 	.word	0x200007a0
 8008270:	2000079c 	.word	0x2000079c
 8008274:	200008b0 	.word	0x200008b0
 8008278:	200008ac 	.word	0x200008ac

0800827c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008282:	4b27      	ldr	r3, [pc, #156]	@ (8008320 <vTaskSwitchContext+0xa4>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800828a:	4b26      	ldr	r3, [pc, #152]	@ (8008324 <vTaskSwitchContext+0xa8>)
 800828c:	2201      	movs	r2, #1
 800828e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008290:	e040      	b.n	8008314 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008292:	4b24      	ldr	r3, [pc, #144]	@ (8008324 <vTaskSwitchContext+0xa8>)
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008298:	4b23      	ldr	r3, [pc, #140]	@ (8008328 <vTaskSwitchContext+0xac>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	fab3 f383 	clz	r3, r3
 80082a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80082a6:	7afb      	ldrb	r3, [r7, #11]
 80082a8:	f1c3 031f 	rsb	r3, r3, #31
 80082ac:	617b      	str	r3, [r7, #20]
 80082ae:	491f      	ldr	r1, [pc, #124]	@ (800832c <vTaskSwitchContext+0xb0>)
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10b      	bne.n	80082da <vTaskSwitchContext+0x5e>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	607b      	str	r3, [r7, #4]
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop
 80082d8:	e7fd      	b.n	80082d6 <vTaskSwitchContext+0x5a>
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4a11      	ldr	r2, [pc, #68]	@ (800832c <vTaskSwitchContext+0xb0>)
 80082e6:	4413      	add	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	3308      	adds	r3, #8
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d104      	bne.n	800830a <vTaskSwitchContext+0x8e>
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4a07      	ldr	r2, [pc, #28]	@ (8008330 <vTaskSwitchContext+0xb4>)
 8008312:	6013      	str	r3, [r2, #0]
}
 8008314:	bf00      	nop
 8008316:	371c      	adds	r7, #28
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	200008c4 	.word	0x200008c4
 8008324:	200008b0 	.word	0x200008b0
 8008328:	200008a4 	.word	0x200008a4
 800832c:	200007a0 	.word	0x200007a0
 8008330:	2000079c 	.word	0x2000079c

08008334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10b      	bne.n	800835c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	60fb      	str	r3, [r7, #12]
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	e7fd      	b.n	8008358 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800835c:	4b07      	ldr	r3, [pc, #28]	@ (800837c <vTaskPlaceOnEventList+0x48>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3318      	adds	r3, #24
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fe fdb6 	bl	8006ed6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800836a:	2101      	movs	r1, #1
 800836c:	6838      	ldr	r0, [r7, #0]
 800836e:	f000 fb87 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
}
 8008372:	bf00      	nop
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	2000079c 	.word	0x2000079c

08008380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10b      	bne.n	80083ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	60fb      	str	r3, [r7, #12]
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	e7fd      	b.n	80083aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3318      	adds	r3, #24
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fdc8 	bl	8006f48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008430 <xTaskRemoveFromEventList+0xb0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11c      	bne.n	80083fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fdbf 	bl	8006f48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	2201      	movs	r2, #1
 80083d0:	409a      	lsls	r2, r3
 80083d2:	4b18      	ldr	r3, [pc, #96]	@ (8008434 <xTaskRemoveFromEventList+0xb4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	4a16      	ldr	r2, [pc, #88]	@ (8008434 <xTaskRemoveFromEventList+0xb4>)
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4a13      	ldr	r2, [pc, #76]	@ (8008438 <xTaskRemoveFromEventList+0xb8>)
 80083ea:	441a      	add	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4619      	mov	r1, r3
 80083f2:	4610      	mov	r0, r2
 80083f4:	f7fe fd4b 	bl	8006e8e <vListInsertEnd>
 80083f8:	e005      	b.n	8008406 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	3318      	adds	r3, #24
 80083fe:	4619      	mov	r1, r3
 8008400:	480e      	ldr	r0, [pc, #56]	@ (800843c <xTaskRemoveFromEventList+0xbc>)
 8008402:	f7fe fd44 	bl	8006e8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800840a:	4b0d      	ldr	r3, [pc, #52]	@ (8008440 <xTaskRemoveFromEventList+0xc0>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008410:	429a      	cmp	r2, r3
 8008412:	d905      	bls.n	8008420 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008414:	2301      	movs	r3, #1
 8008416:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008418:	4b0a      	ldr	r3, [pc, #40]	@ (8008444 <xTaskRemoveFromEventList+0xc4>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	e001      	b.n	8008424 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008424:	697b      	ldr	r3, [r7, #20]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200008c4 	.word	0x200008c4
 8008434:	200008a4 	.word	0x200008a4
 8008438:	200007a0 	.word	0x200007a0
 800843c:	2000085c 	.word	0x2000085c
 8008440:	2000079c 	.word	0x2000079c
 8008444:	200008b0 	.word	0x200008b0

08008448 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008450:	4b06      	ldr	r3, [pc, #24]	@ (800846c <vTaskInternalSetTimeOutState+0x24>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008458:	4b05      	ldr	r3, [pc, #20]	@ (8008470 <vTaskInternalSetTimeOutState+0x28>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	605a      	str	r2, [r3, #4]
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	200008b4 	.word	0x200008b4
 8008470:	200008a0 	.word	0x200008a0

08008474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10b      	bne.n	800849c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	613b      	str	r3, [r7, #16]
}
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	e7fd      	b.n	8008498 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10b      	bne.n	80084ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60fb      	str	r3, [r7, #12]
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	e7fd      	b.n	80084b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80084ba:	f000 fc75 	bl	8008da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084be:	4b1d      	ldr	r3, [pc, #116]	@ (8008534 <xTaskCheckForTimeOut+0xc0>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d102      	bne.n	80084de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	e023      	b.n	8008526 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b15      	ldr	r3, [pc, #84]	@ (8008538 <xTaskCheckForTimeOut+0xc4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d007      	beq.n	80084fa <xTaskCheckForTimeOut+0x86>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d302      	bcc.n	80084fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084f4:	2301      	movs	r3, #1
 80084f6:	61fb      	str	r3, [r7, #28]
 80084f8:	e015      	b.n	8008526 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	429a      	cmp	r2, r3
 8008502:	d20b      	bcs.n	800851c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff ff99 	bl	8008448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008516:	2300      	movs	r3, #0
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	e004      	b.n	8008526 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008522:	2301      	movs	r3, #1
 8008524:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008526:	f000 fc71 	bl	8008e0c <vPortExitCritical>

	return xReturn;
 800852a:	69fb      	ldr	r3, [r7, #28]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3720      	adds	r7, #32
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200008a0 	.word	0x200008a0
 8008538:	200008b4 	.word	0x200008b4

0800853c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008540:	4b03      	ldr	r3, [pc, #12]	@ (8008550 <vTaskMissedYield+0x14>)
 8008542:	2201      	movs	r2, #1
 8008544:	601a      	str	r2, [r3, #0]
}
 8008546:	bf00      	nop
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	200008b0 	.word	0x200008b0

08008554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800855c:	f000 f852 	bl	8008604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008560:	4b06      	ldr	r3, [pc, #24]	@ (800857c <prvIdleTask+0x28>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d9f9      	bls.n	800855c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008568:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <prvIdleTask+0x2c>)
 800856a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008578:	e7f0      	b.n	800855c <prvIdleTask+0x8>
 800857a:	bf00      	nop
 800857c:	200007a0 	.word	0x200007a0
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800858a:	2300      	movs	r3, #0
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	e00c      	b.n	80085aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4a12      	ldr	r2, [pc, #72]	@ (80085e4 <prvInitialiseTaskLists+0x60>)
 800859c:	4413      	add	r3, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fc48 	bl	8006e34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3301      	adds	r3, #1
 80085a8:	607b      	str	r3, [r7, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b06      	cmp	r3, #6
 80085ae:	d9ef      	bls.n	8008590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085b0:	480d      	ldr	r0, [pc, #52]	@ (80085e8 <prvInitialiseTaskLists+0x64>)
 80085b2:	f7fe fc3f 	bl	8006e34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085b6:	480d      	ldr	r0, [pc, #52]	@ (80085ec <prvInitialiseTaskLists+0x68>)
 80085b8:	f7fe fc3c 	bl	8006e34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085bc:	480c      	ldr	r0, [pc, #48]	@ (80085f0 <prvInitialiseTaskLists+0x6c>)
 80085be:	f7fe fc39 	bl	8006e34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085c2:	480c      	ldr	r0, [pc, #48]	@ (80085f4 <prvInitialiseTaskLists+0x70>)
 80085c4:	f7fe fc36 	bl	8006e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085c8:	480b      	ldr	r0, [pc, #44]	@ (80085f8 <prvInitialiseTaskLists+0x74>)
 80085ca:	f7fe fc33 	bl	8006e34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085ce:	4b0b      	ldr	r3, [pc, #44]	@ (80085fc <prvInitialiseTaskLists+0x78>)
 80085d0:	4a05      	ldr	r2, [pc, #20]	@ (80085e8 <prvInitialiseTaskLists+0x64>)
 80085d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008600 <prvInitialiseTaskLists+0x7c>)
 80085d6:	4a05      	ldr	r2, [pc, #20]	@ (80085ec <prvInitialiseTaskLists+0x68>)
 80085d8:	601a      	str	r2, [r3, #0]
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	200007a0 	.word	0x200007a0
 80085e8:	2000082c 	.word	0x2000082c
 80085ec:	20000840 	.word	0x20000840
 80085f0:	2000085c 	.word	0x2000085c
 80085f4:	20000870 	.word	0x20000870
 80085f8:	20000888 	.word	0x20000888
 80085fc:	20000854 	.word	0x20000854
 8008600:	20000858 	.word	0x20000858

08008604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800860a:	e019      	b.n	8008640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800860c:	f000 fbcc 	bl	8008da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008610:	4b10      	ldr	r3, [pc, #64]	@ (8008654 <prvCheckTasksWaitingTermination+0x50>)
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3304      	adds	r3, #4
 800861c:	4618      	mov	r0, r3
 800861e:	f7fe fc93 	bl	8006f48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008622:	4b0d      	ldr	r3, [pc, #52]	@ (8008658 <prvCheckTasksWaitingTermination+0x54>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3b01      	subs	r3, #1
 8008628:	4a0b      	ldr	r2, [pc, #44]	@ (8008658 <prvCheckTasksWaitingTermination+0x54>)
 800862a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800862c:	4b0b      	ldr	r3, [pc, #44]	@ (800865c <prvCheckTasksWaitingTermination+0x58>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3b01      	subs	r3, #1
 8008632:	4a0a      	ldr	r2, [pc, #40]	@ (800865c <prvCheckTasksWaitingTermination+0x58>)
 8008634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008636:	f000 fbe9 	bl	8008e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f810 	bl	8008660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008640:	4b06      	ldr	r3, [pc, #24]	@ (800865c <prvCheckTasksWaitingTermination+0x58>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e1      	bne.n	800860c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000870 	.word	0x20000870
 8008658:	2000089c 	.word	0x2000089c
 800865c:	20000884 	.word	0x20000884

08008660 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800866e:	2b00      	cmp	r3, #0
 8008670:	d108      	bne.n	8008684 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fd86 	bl	8009188 <vPortFree>
				vPortFree( pxTCB );
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fd83 	bl	8009188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008682:	e019      	b.n	80086b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800868a:	2b01      	cmp	r3, #1
 800868c:	d103      	bne.n	8008696 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fd7a 	bl	8009188 <vPortFree>
	}
 8008694:	e010      	b.n	80086b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800869c:	2b02      	cmp	r3, #2
 800869e:	d00b      	beq.n	80086b8 <prvDeleteTCB+0x58>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	60fb      	str	r3, [r7, #12]
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <prvDeleteTCB+0x54>
	}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086c6:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <prvResetNextTaskUnblockTime+0x38>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086d0:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <prvResetNextTaskUnblockTime+0x3c>)
 80086d2:	f04f 32ff 	mov.w	r2, #4294967295
 80086d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086d8:	e008      	b.n	80086ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086da:	4b07      	ldr	r3, [pc, #28]	@ (80086f8 <prvResetNextTaskUnblockTime+0x38>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	4a04      	ldr	r2, [pc, #16]	@ (80086fc <prvResetNextTaskUnblockTime+0x3c>)
 80086ea:	6013      	str	r3, [r2, #0]
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	20000854 	.word	0x20000854
 80086fc:	200008bc 	.word	0x200008bc

08008700 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008706:	4b0b      	ldr	r3, [pc, #44]	@ (8008734 <xTaskGetSchedulerState+0x34>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800870e:	2301      	movs	r3, #1
 8008710:	607b      	str	r3, [r7, #4]
 8008712:	e008      	b.n	8008726 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008714:	4b08      	ldr	r3, [pc, #32]	@ (8008738 <xTaskGetSchedulerState+0x38>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800871c:	2302      	movs	r3, #2
 800871e:	607b      	str	r3, [r7, #4]
 8008720:	e001      	b.n	8008726 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008722:	2300      	movs	r3, #0
 8008724:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008726:	687b      	ldr	r3, [r7, #4]
	}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	200008a8 	.word	0x200008a8
 8008738:	200008c4 	.word	0x200008c4

0800873c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d05e      	beq.n	8008810 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008756:	4b31      	ldr	r3, [pc, #196]	@ (800881c <xTaskPriorityInherit+0xe0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875c:	429a      	cmp	r2, r3
 800875e:	d24e      	bcs.n	80087fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	db06      	blt.n	8008776 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008768:	4b2c      	ldr	r3, [pc, #176]	@ (800881c <xTaskPriorityInherit+0xe0>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876e:	f1c3 0207 	rsb	r2, r3, #7
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6959      	ldr	r1, [r3, #20]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4a26      	ldr	r2, [pc, #152]	@ (8008820 <xTaskPriorityInherit+0xe4>)
 8008788:	4413      	add	r3, r2
 800878a:	4299      	cmp	r1, r3
 800878c:	d12f      	bne.n	80087ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	3304      	adds	r3, #4
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fbd8 	bl	8006f48 <uxListRemove>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10a      	bne.n	80087b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	2201      	movs	r2, #1
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	43da      	mvns	r2, r3
 80087aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008824 <xTaskPriorityInherit+0xe8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4013      	ands	r3, r2
 80087b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008824 <xTaskPriorityInherit+0xe8>)
 80087b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087b4:	4b19      	ldr	r3, [pc, #100]	@ (800881c <xTaskPriorityInherit+0xe0>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	2201      	movs	r2, #1
 80087c4:	409a      	lsls	r2, r3
 80087c6:	4b17      	ldr	r3, [pc, #92]	@ (8008824 <xTaskPriorityInherit+0xe8>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	4a15      	ldr	r2, [pc, #84]	@ (8008824 <xTaskPriorityInherit+0xe8>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4a10      	ldr	r2, [pc, #64]	@ (8008820 <xTaskPriorityInherit+0xe4>)
 80087de:	441a      	add	r2, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe fb51 	bl	8006e8e <vListInsertEnd>
 80087ec:	e004      	b.n	80087f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087ee:	4b0b      	ldr	r3, [pc, #44]	@ (800881c <xTaskPriorityInherit+0xe0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e008      	b.n	8008810 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008802:	4b06      	ldr	r3, [pc, #24]	@ (800881c <xTaskPriorityInherit+0xe0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	429a      	cmp	r2, r3
 800880a:	d201      	bcs.n	8008810 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800880c:	2301      	movs	r3, #1
 800880e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008810:	68fb      	ldr	r3, [r7, #12]
	}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	2000079c 	.word	0x2000079c
 8008820:	200007a0 	.word	0x200007a0
 8008824:	200008a4 	.word	0x200008a4

08008828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008834:	2300      	movs	r3, #0
 8008836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d070      	beq.n	8008920 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800883e:	4b3b      	ldr	r3, [pc, #236]	@ (800892c <xTaskPriorityDisinherit+0x104>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	429a      	cmp	r2, r3
 8008846:	d00b      	beq.n	8008860 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	60fb      	str	r3, [r7, #12]
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10b      	bne.n	8008880 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	60bb      	str	r3, [r7, #8]
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	e7fd      	b.n	800887c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008884:	1e5a      	subs	r2, r3, #1
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008892:	429a      	cmp	r2, r3
 8008894:	d044      	beq.n	8008920 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800889a:	2b00      	cmp	r3, #0
 800889c:	d140      	bne.n	8008920 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fb50 	bl	8006f48 <uxListRemove>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d115      	bne.n	80088da <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b2:	491f      	ldr	r1, [pc, #124]	@ (8008930 <xTaskPriorityDisinherit+0x108>)
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <xTaskPriorityDisinherit+0xb2>
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c8:	2201      	movs	r2, #1
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	43da      	mvns	r2, r3
 80088d0:	4b18      	ldr	r3, [pc, #96]	@ (8008934 <xTaskPriorityDisinherit+0x10c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4013      	ands	r3, r2
 80088d6:	4a17      	ldr	r2, [pc, #92]	@ (8008934 <xTaskPriorityDisinherit+0x10c>)
 80088d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	f1c3 0207 	rsb	r2, r3, #7
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f2:	2201      	movs	r2, #1
 80088f4:	409a      	lsls	r2, r3
 80088f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008934 <xTaskPriorityDisinherit+0x10c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008934 <xTaskPriorityDisinherit+0x10c>)
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4a08      	ldr	r2, [pc, #32]	@ (8008930 <xTaskPriorityDisinherit+0x108>)
 800890e:	441a      	add	r2, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	3304      	adds	r3, #4
 8008914:	4619      	mov	r1, r3
 8008916:	4610      	mov	r0, r2
 8008918:	f7fe fab9 	bl	8006e8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800891c:	2301      	movs	r3, #1
 800891e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008920:	697b      	ldr	r3, [r7, #20]
	}
 8008922:	4618      	mov	r0, r3
 8008924:	3718      	adds	r7, #24
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	2000079c 	.word	0x2000079c
 8008930:	200007a0 	.word	0x200007a0
 8008934:	200008a4 	.word	0x200008a4

08008938 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008946:	2301      	movs	r3, #1
 8008948:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d079      	beq.n	8008a44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60fb      	str	r3, [r7, #12]
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d902      	bls.n	8008980 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	e002      	b.n	8008986 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008984:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	429a      	cmp	r2, r3
 800898e:	d059      	beq.n	8008a44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	429a      	cmp	r2, r3
 8008998:	d154      	bne.n	8008a44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800899a:	4b2c      	ldr	r3, [pc, #176]	@ (8008a4c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d10b      	bne.n	80089bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60bb      	str	r3, [r7, #8]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	69fa      	ldr	r2, [r7, #28]
 80089c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	db04      	blt.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f1c3 0207 	rsb	r2, r3, #7
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	6959      	ldr	r1, [r3, #20]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4a19      	ldr	r2, [pc, #100]	@ (8008a50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80089ea:	4413      	add	r3, r2
 80089ec:	4299      	cmp	r1, r3
 80089ee:	d129      	bne.n	8008a44 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fe faa7 	bl	8006f48 <uxListRemove>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	2201      	movs	r2, #1
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	43da      	mvns	r2, r3
 8008a0c:	4b11      	ldr	r3, [pc, #68]	@ (8008a54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4013      	ands	r3, r2
 8008a12:	4a10      	ldr	r2, [pc, #64]	@ (8008a54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a14:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	409a      	lsls	r2, r3
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	4a0b      	ldr	r2, [pc, #44]	@ (8008a54 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4a06      	ldr	r2, [pc, #24]	@ (8008a50 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008a36:	441a      	add	r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	f7fe fa25 	bl	8006e8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a44:	bf00      	nop
 8008a46:	3720      	adds	r7, #32
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	2000079c 	.word	0x2000079c
 8008a50:	200007a0 	.word	0x200007a0
 8008a54:	200008a4 	.word	0x200008a4

08008a58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a64:	4b05      	ldr	r3, [pc, #20]	@ (8008a7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a6a:	3201      	adds	r2, #1
 8008a6c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008a6e:	4b03      	ldr	r3, [pc, #12]	@ (8008a7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a70:	681b      	ldr	r3, [r3, #0]
	}
 8008a72:	4618      	mov	r0, r3
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	2000079c 	.word	0x2000079c

08008a80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a8a:	4b29      	ldr	r3, [pc, #164]	@ (8008b30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a90:	4b28      	ldr	r3, [pc, #160]	@ (8008b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fa56 	bl	8006f48 <uxListRemove>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008aa2:	4b24      	ldr	r3, [pc, #144]	@ (8008b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	43da      	mvns	r2, r3
 8008ab0:	4b21      	ldr	r3, [pc, #132]	@ (8008b38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	4a20      	ldr	r2, [pc, #128]	@ (8008b38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ab8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	d10a      	bne.n	8008ad8 <prvAddCurrentTaskToDelayedList+0x58>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d007      	beq.n	8008ad8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	481a      	ldr	r0, [pc, #104]	@ (8008b3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008ad2:	f7fe f9dc 	bl	8006e8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ad6:	e026      	b.n	8008b26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ae0:	4b14      	ldr	r3, [pc, #80]	@ (8008b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d209      	bcs.n	8008b04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008af0:	4b13      	ldr	r3, [pc, #76]	@ (8008b40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f7fe f9ea 	bl	8006ed6 <vListInsert>
}
 8008b02:	e010      	b.n	8008b26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b04:	4b0f      	ldr	r3, [pc, #60]	@ (8008b44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4b0a      	ldr	r3, [pc, #40]	@ (8008b34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f7fe f9e0 	bl	8006ed6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b16:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d202      	bcs.n	8008b26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b20:	4a09      	ldr	r2, [pc, #36]	@ (8008b48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6013      	str	r3, [r2, #0]
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200008a0 	.word	0x200008a0
 8008b34:	2000079c 	.word	0x2000079c
 8008b38:	200008a4 	.word	0x200008a4
 8008b3c:	20000888 	.word	0x20000888
 8008b40:	20000858 	.word	0x20000858
 8008b44:	20000854 	.word	0x20000854
 8008b48:	200008bc 	.word	0x200008bc

08008b4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3b04      	subs	r3, #4
 8008b5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3b04      	subs	r3, #4
 8008b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f023 0201 	bic.w	r2, r3, #1
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3b04      	subs	r3, #4
 8008b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb0 <pxPortInitialiseStack+0x64>)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b14      	subs	r3, #20
 8008b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3b04      	subs	r3, #4
 8008b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f06f 0202 	mvn.w	r2, #2
 8008b9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3b20      	subs	r3, #32
 8008ba0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	08008bb5 	.word	0x08008bb5

08008bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bbe:	4b13      	ldr	r3, [pc, #76]	@ (8008c0c <prvTaskExitError+0x58>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc6:	d00b      	beq.n	8008be0 <prvTaskExitError+0x2c>
	__asm volatile
 8008bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	60fb      	str	r3, [r7, #12]
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <prvTaskExitError+0x28>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60bb      	str	r3, [r7, #8]
}
 8008bf2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bf4:	bf00      	nop
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0fc      	beq.n	8008bf6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000010 	.word	0x20000010

08008c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c10:	4b07      	ldr	r3, [pc, #28]	@ (8008c30 <pxCurrentTCBConst2>)
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	6808      	ldr	r0, [r1, #0]
 8008c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f380 8809 	msr	PSP, r0
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	4770      	bx	lr
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst2>:
 8008c30:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c38:	4808      	ldr	r0, [pc, #32]	@ (8008c5c <prvPortStartFirstTask+0x24>)
 8008c3a:	6800      	ldr	r0, [r0, #0]
 8008c3c:	6800      	ldr	r0, [r0, #0]
 8008c3e:	f380 8808 	msr	MSP, r0
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8814 	msr	CONTROL, r0
 8008c4a:	b662      	cpsie	i
 8008c4c:	b661      	cpsie	f
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	df00      	svc	0
 8008c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c5a:	bf00      	nop
 8008c5c:	e000ed08 	.word	0xe000ed08

08008c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c66:	4b47      	ldr	r3, [pc, #284]	@ (8008d84 <xPortStartScheduler+0x124>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a47      	ldr	r2, [pc, #284]	@ (8008d88 <xPortStartScheduler+0x128>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10b      	bne.n	8008c88 <xPortStartScheduler+0x28>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c88:	4b3e      	ldr	r3, [pc, #248]	@ (8008d84 <xPortStartScheduler+0x124>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d8c <xPortStartScheduler+0x12c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d10b      	bne.n	8008caa <xPortStartScheduler+0x4a>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60fb      	str	r3, [r7, #12]
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	e7fd      	b.n	8008ca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008caa:	4b39      	ldr	r3, [pc, #228]	@ (8008d90 <xPortStartScheduler+0x130>)
 8008cac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	22ff      	movs	r2, #255	@ 0xff
 8008cba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	4b31      	ldr	r3, [pc, #196]	@ (8008d94 <xPortStartScheduler+0x134>)
 8008cd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cd2:	4b31      	ldr	r3, [pc, #196]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cd8:	e009      	b.n	8008cee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008cda:	4b2f      	ldr	r3, [pc, #188]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008ce2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cf6:	2b80      	cmp	r3, #128	@ 0x80
 8008cf8:	d0ef      	beq.n	8008cda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cfa:	4b27      	ldr	r3, [pc, #156]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f1c3 0307 	rsb	r3, r3, #7
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d00b      	beq.n	8008d1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	60bb      	str	r3, [r7, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	4a1c      	ldr	r2, [pc, #112]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d28:	4b1b      	ldr	r3, [pc, #108]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d30:	4a19      	ldr	r2, [pc, #100]	@ (8008d98 <xPortStartScheduler+0x138>)
 8008d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d3c:	4b17      	ldr	r3, [pc, #92]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d48:	4b14      	ldr	r3, [pc, #80]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a13      	ldr	r2, [pc, #76]	@ (8008d9c <xPortStartScheduler+0x13c>)
 8008d4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d54:	f000 f8da 	bl	8008f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d58:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <xPortStartScheduler+0x140>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d5e:	f000 f8f9 	bl	8008f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d62:	4b10      	ldr	r3, [pc, #64]	@ (8008da4 <xPortStartScheduler+0x144>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a0f      	ldr	r2, [pc, #60]	@ (8008da4 <xPortStartScheduler+0x144>)
 8008d68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d6e:	f7ff ff63 	bl	8008c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d72:	f7ff fa83 	bl	800827c <vTaskSwitchContext>
	prvTaskExitError();
 8008d76:	f7ff ff1d 	bl	8008bb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	e000ed00 	.word	0xe000ed00
 8008d88:	410fc271 	.word	0x410fc271
 8008d8c:	410fc270 	.word	0x410fc270
 8008d90:	e000e400 	.word	0xe000e400
 8008d94:	200008c8 	.word	0x200008c8
 8008d98:	200008cc 	.word	0x200008cc
 8008d9c:	e000ed20 	.word	0xe000ed20
 8008da0:	20000010 	.word	0x20000010
 8008da4:	e000ef34 	.word	0xe000ef34

08008da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <vPortEnterCritical+0x5c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8008e04 <vPortEnterCritical+0x5c>)
 8008dca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <vPortEnterCritical+0x5c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d110      	bne.n	8008df6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e08 <vPortEnterCritical+0x60>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00b      	beq.n	8008df6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	603b      	str	r3, [r7, #0]
}
 8008df0:	bf00      	nop
 8008df2:	bf00      	nop
 8008df4:	e7fd      	b.n	8008df2 <vPortEnterCritical+0x4a>
	}
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000010 	.word	0x20000010
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e12:	4b12      	ldr	r3, [pc, #72]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <vPortExitCritical+0x26>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	607b      	str	r3, [r7, #4]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e32:	4b0a      	ldr	r3, [pc, #40]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	4a08      	ldr	r2, [pc, #32]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e3c:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <vPortExitCritical+0x50>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <vPortExitCritical+0x44>
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20000010 	.word	0x20000010

08008e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e60:	f3ef 8009 	mrs	r0, PSP
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	4b15      	ldr	r3, [pc, #84]	@ (8008ec0 <pxCurrentTCBConst>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	f01e 0f10 	tst.w	lr, #16
 8008e70:	bf08      	it	eq
 8008e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7a:	6010      	str	r0, [r2, #0]
 8008e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e84:	f380 8811 	msr	BASEPRI, r0
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f7ff f9f4 	bl	800827c <vTaskSwitchContext>
 8008e94:	f04f 0000 	mov.w	r0, #0
 8008e98:	f380 8811 	msr	BASEPRI, r0
 8008e9c:	bc09      	pop	{r0, r3}
 8008e9e:	6819      	ldr	r1, [r3, #0]
 8008ea0:	6808      	ldr	r0, [r1, #0]
 8008ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea6:	f01e 0f10 	tst.w	lr, #16
 8008eaa:	bf08      	it	eq
 8008eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008eb0:	f380 8809 	msr	PSP, r0
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w

08008ec0 <pxCurrentTCBConst>:
 8008ec0:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop

08008ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	607b      	str	r3, [r7, #4]
}
 8008ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ee2:	f7ff f911 	bl	8008108 <xTaskIncrementTick>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eec:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <SysTick_Handler+0x40>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f383 8811 	msr	BASEPRI, r3
}
 8008efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f10:	4b0b      	ldr	r3, [pc, #44]	@ (8008f40 <vPortSetupTimerInterrupt+0x34>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <vPortSetupTimerInterrupt+0x38>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f48 <vPortSetupTimerInterrupt+0x3c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0a      	ldr	r2, [pc, #40]	@ (8008f4c <vPortSetupTimerInterrupt+0x40>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	099b      	lsrs	r3, r3, #6
 8008f28:	4a09      	ldr	r2, [pc, #36]	@ (8008f50 <vPortSetupTimerInterrupt+0x44>)
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f2e:	4b04      	ldr	r3, [pc, #16]	@ (8008f40 <vPortSetupTimerInterrupt+0x34>)
 8008f30:	2207      	movs	r2, #7
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	e000e010 	.word	0xe000e010
 8008f44:	e000e018 	.word	0xe000e018
 8008f48:	20000004 	.word	0x20000004
 8008f4c:	10624dd3 	.word	0x10624dd3
 8008f50:	e000e014 	.word	0xe000e014

08008f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f64 <vPortEnableVFP+0x10>
 8008f58:	6801      	ldr	r1, [r0, #0]
 8008f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f5e:	6001      	str	r1, [r0, #0]
 8008f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f62:	bf00      	nop
 8008f64:	e000ed88 	.word	0xe000ed88

08008f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f6e:	f3ef 8305 	mrs	r3, IPSR
 8008f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d915      	bls.n	8008fa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f7a:	4a18      	ldr	r2, [pc, #96]	@ (8008fdc <vPortValidateInterruptPriority+0x74>)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f84:	4b16      	ldr	r3, [pc, #88]	@ (8008fe0 <vPortValidateInterruptPriority+0x78>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	7afa      	ldrb	r2, [r7, #11]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d20b      	bcs.n	8008fa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	e7fd      	b.n	8008fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe4 <vPortValidateInterruptPriority+0x7c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fae:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <vPortValidateInterruptPriority+0x80>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d90b      	bls.n	8008fce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	603b      	str	r3, [r7, #0]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vPortValidateInterruptPriority+0x62>
	}
 8008fce:	bf00      	nop
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	e000e3f0 	.word	0xe000e3f0
 8008fe0:	200008c8 	.word	0x200008c8
 8008fe4:	e000ed0c 	.word	0xe000ed0c
 8008fe8:	200008cc 	.word	0x200008cc

08008fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	@ 0x28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ff8:	f7fe ffda 	bl	8007fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8009170 <pvPortMalloc+0x184>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009004:	f000 f924 	bl	8009250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009008:	4b5a      	ldr	r3, [pc, #360]	@ (8009174 <pvPortMalloc+0x188>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4013      	ands	r3, r2
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 8095 	bne.w	8009140 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01e      	beq.n	800905a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800901c:	2208      	movs	r2, #8
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4413      	add	r3, r2
 8009022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	2b00      	cmp	r3, #0
 800902c:	d015      	beq.n	800905a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f023 0307 	bic.w	r3, r3, #7
 8009034:	3308      	adds	r3, #8
 8009036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f003 0307 	and.w	r3, r3, #7
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <pvPortMalloc+0x6e>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	617b      	str	r3, [r7, #20]
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d06f      	beq.n	8009140 <pvPortMalloc+0x154>
 8009060:	4b45      	ldr	r3, [pc, #276]	@ (8009178 <pvPortMalloc+0x18c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	429a      	cmp	r2, r3
 8009068:	d86a      	bhi.n	8009140 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800906a:	4b44      	ldr	r3, [pc, #272]	@ (800917c <pvPortMalloc+0x190>)
 800906c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800906e:	4b43      	ldr	r3, [pc, #268]	@ (800917c <pvPortMalloc+0x190>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009074:	e004      	b.n	8009080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	429a      	cmp	r2, r3
 8009088:	d903      	bls.n	8009092 <pvPortMalloc+0xa6>
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1f1      	bne.n	8009076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009092:	4b37      	ldr	r3, [pc, #220]	@ (8009170 <pvPortMalloc+0x184>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009098:	429a      	cmp	r2, r3
 800909a:	d051      	beq.n	8009140 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2208      	movs	r2, #8
 80090a2:	4413      	add	r3, r2
 80090a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	6a3b      	ldr	r3, [r7, #32]
 80090ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	1ad2      	subs	r2, r2, r3
 80090b6:	2308      	movs	r3, #8
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d920      	bls.n	8009100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4413      	add	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00b      	beq.n	80090e8 <pvPortMalloc+0xfc>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	613b      	str	r3, [r7, #16]
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	e7fd      	b.n	80090e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090fa:	69b8      	ldr	r0, [r7, #24]
 80090fc:	f000 f90a 	bl	8009314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009100:	4b1d      	ldr	r3, [pc, #116]	@ (8009178 <pvPortMalloc+0x18c>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	4a1b      	ldr	r2, [pc, #108]	@ (8009178 <pvPortMalloc+0x18c>)
 800910c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800910e:	4b1a      	ldr	r3, [pc, #104]	@ (8009178 <pvPortMalloc+0x18c>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b1b      	ldr	r3, [pc, #108]	@ (8009180 <pvPortMalloc+0x194>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d203      	bcs.n	8009122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800911a:	4b17      	ldr	r3, [pc, #92]	@ (8009178 <pvPortMalloc+0x18c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a18      	ldr	r2, [pc, #96]	@ (8009180 <pvPortMalloc+0x194>)
 8009120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	4b13      	ldr	r3, [pc, #76]	@ (8009174 <pvPortMalloc+0x188>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	431a      	orrs	r2, r3
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009136:	4b13      	ldr	r3, [pc, #76]	@ (8009184 <pvPortMalloc+0x198>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3301      	adds	r3, #1
 800913c:	4a11      	ldr	r2, [pc, #68]	@ (8009184 <pvPortMalloc+0x198>)
 800913e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009140:	f7fe ff44 	bl	8007fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <pvPortMalloc+0x17a>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	60fb      	str	r3, [r7, #12]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <pvPortMalloc+0x176>
	return pvReturn;
 8009166:	69fb      	ldr	r3, [r7, #28]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3728      	adds	r7, #40	@ 0x28
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	200044d8 	.word	0x200044d8
 8009174:	200044ec 	.word	0x200044ec
 8009178:	200044dc 	.word	0x200044dc
 800917c:	200044d0 	.word	0x200044d0
 8009180:	200044e0 	.word	0x200044e0
 8009184:	200044e4 	.word	0x200044e4

08009188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d04f      	beq.n	800923a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800919a:	2308      	movs	r3, #8
 800919c:	425b      	negs	r3, r3
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4413      	add	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	4b25      	ldr	r3, [pc, #148]	@ (8009244 <vPortFree+0xbc>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4013      	ands	r3, r2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10b      	bne.n	80091ce <vPortFree+0x46>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	60fb      	str	r3, [r7, #12]
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	e7fd      	b.n	80091ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00b      	beq.n	80091ee <vPortFree+0x66>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	60bb      	str	r3, [r7, #8]
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	e7fd      	b.n	80091ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	4b14      	ldr	r3, [pc, #80]	@ (8009244 <vPortFree+0xbc>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4013      	ands	r3, r2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01e      	beq.n	800923a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d11a      	bne.n	800923a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	4b0e      	ldr	r3, [pc, #56]	@ (8009244 <vPortFree+0xbc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	43db      	mvns	r3, r3
 800920e:	401a      	ands	r2, r3
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009214:	f7fe fecc 	bl	8007fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <vPortFree+0xc0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4413      	add	r3, r2
 8009222:	4a09      	ldr	r2, [pc, #36]	@ (8009248 <vPortFree+0xc0>)
 8009224:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f000 f874 	bl	8009314 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800922c:	4b07      	ldr	r3, [pc, #28]	@ (800924c <vPortFree+0xc4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	4a06      	ldr	r2, [pc, #24]	@ (800924c <vPortFree+0xc4>)
 8009234:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009236:	f7fe fec9 	bl	8007fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800923a:	bf00      	nop
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	200044ec 	.word	0x200044ec
 8009248:	200044dc 	.word	0x200044dc
 800924c:	200044e8 	.word	0x200044e8

08009250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009256:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800925a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800925c:	4b27      	ldr	r3, [pc, #156]	@ (80092fc <prvHeapInit+0xac>)
 800925e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00c      	beq.n	8009284 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3307      	adds	r3, #7
 800926e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0307 	bic.w	r3, r3, #7
 8009276:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	4a1f      	ldr	r2, [pc, #124]	@ (80092fc <prvHeapInit+0xac>)
 8009280:	4413      	add	r3, r2
 8009282:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009288:	4a1d      	ldr	r2, [pc, #116]	@ (8009300 <prvHeapInit+0xb0>)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800928e:	4b1c      	ldr	r3, [pc, #112]	@ (8009300 <prvHeapInit+0xb0>)
 8009290:	2200      	movs	r2, #0
 8009292:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	4413      	add	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800929c:	2208      	movs	r2, #8
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a15      	ldr	r2, [pc, #84]	@ (8009304 <prvHeapInit+0xb4>)
 80092b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092b2:	4b14      	ldr	r3, [pc, #80]	@ (8009304 <prvHeapInit+0xb4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ba:	4b12      	ldr	r3, [pc, #72]	@ (8009304 <prvHeapInit+0xb4>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	1ad2      	subs	r2, r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009304 <prvHeapInit+0xb4>)
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009308 <prvHeapInit+0xb8>)
 80092de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a09      	ldr	r2, [pc, #36]	@ (800930c <prvHeapInit+0xbc>)
 80092e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092e8:	4b09      	ldr	r3, [pc, #36]	@ (8009310 <prvHeapInit+0xc0>)
 80092ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092ee:	601a      	str	r2, [r3, #0]
}
 80092f0:	bf00      	nop
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	200008d0 	.word	0x200008d0
 8009300:	200044d0 	.word	0x200044d0
 8009304:	200044d8 	.word	0x200044d8
 8009308:	200044e0 	.word	0x200044e0
 800930c:	200044dc 	.word	0x200044dc
 8009310:	200044ec 	.word	0x200044ec

08009314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800931c:	4b28      	ldr	r3, [pc, #160]	@ (80093c0 <prvInsertBlockIntoFreeList+0xac>)
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e002      	b.n	8009328 <prvInsertBlockIntoFreeList+0x14>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	429a      	cmp	r2, r3
 8009330:	d8f7      	bhi.n	8009322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	4413      	add	r3, r2
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	429a      	cmp	r2, r3
 8009342:	d108      	bne.n	8009356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	441a      	add	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	441a      	add	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d118      	bne.n	800939c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b15      	ldr	r3, [pc, #84]	@ (80093c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d00d      	beq.n	8009392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	441a      	add	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	e008      	b.n	80093a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009392:	4b0c      	ldr	r3, [pc, #48]	@ (80093c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	e003      	b.n	80093a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d002      	beq.n	80093b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b2:	bf00      	nop
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	200044d0 	.word	0x200044d0
 80093c4:	200044d8 	.word	0x200044d8

080093c8 <cos>:
 80093c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ca:	ec53 2b10 	vmov	r2, r3, d0
 80093ce:	4826      	ldr	r0, [pc, #152]	@ (8009468 <cos+0xa0>)
 80093d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80093d4:	4281      	cmp	r1, r0
 80093d6:	d806      	bhi.n	80093e6 <cos+0x1e>
 80093d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009460 <cos+0x98>
 80093dc:	b005      	add	sp, #20
 80093de:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e2:	f000 b845 	b.w	8009470 <__kernel_cos>
 80093e6:	4821      	ldr	r0, [pc, #132]	@ (800946c <cos+0xa4>)
 80093e8:	4281      	cmp	r1, r0
 80093ea:	d908      	bls.n	80093fe <cos+0x36>
 80093ec:	4610      	mov	r0, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	f7f6 fef2 	bl	80001d8 <__aeabi_dsub>
 80093f4:	ec41 0b10 	vmov	d0, r0, r1
 80093f8:	b005      	add	sp, #20
 80093fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80093fe:	4668      	mov	r0, sp
 8009400:	f000 f9ba 	bl	8009778 <__ieee754_rem_pio2>
 8009404:	f000 0003 	and.w	r0, r0, #3
 8009408:	2801      	cmp	r0, #1
 800940a:	d00b      	beq.n	8009424 <cos+0x5c>
 800940c:	2802      	cmp	r0, #2
 800940e:	d015      	beq.n	800943c <cos+0x74>
 8009410:	b9d8      	cbnz	r0, 800944a <cos+0x82>
 8009412:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009416:	ed9d 0b00 	vldr	d0, [sp]
 800941a:	f000 f829 	bl	8009470 <__kernel_cos>
 800941e:	ec51 0b10 	vmov	r0, r1, d0
 8009422:	e7e7      	b.n	80093f4 <cos+0x2c>
 8009424:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009428:	ed9d 0b00 	vldr	d0, [sp]
 800942c:	f000 f8e8 	bl	8009600 <__kernel_sin>
 8009430:	ec53 2b10 	vmov	r2, r3, d0
 8009434:	4610      	mov	r0, r2
 8009436:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800943a:	e7db      	b.n	80093f4 <cos+0x2c>
 800943c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009440:	ed9d 0b00 	vldr	d0, [sp]
 8009444:	f000 f814 	bl	8009470 <__kernel_cos>
 8009448:	e7f2      	b.n	8009430 <cos+0x68>
 800944a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800944e:	ed9d 0b00 	vldr	d0, [sp]
 8009452:	2001      	movs	r0, #1
 8009454:	f000 f8d4 	bl	8009600 <__kernel_sin>
 8009458:	e7e1      	b.n	800941e <cos+0x56>
 800945a:	bf00      	nop
 800945c:	f3af 8000 	nop.w
	...
 8009468:	3fe921fb 	.word	0x3fe921fb
 800946c:	7fefffff 	.word	0x7fefffff

08009470 <__kernel_cos>:
 8009470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	ec57 6b10 	vmov	r6, r7, d0
 8009478:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800947c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009480:	ed8d 1b00 	vstr	d1, [sp]
 8009484:	d206      	bcs.n	8009494 <__kernel_cos+0x24>
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f7 faf7 	bl	8000a7c <__aeabi_d2iz>
 800948e:	2800      	cmp	r0, #0
 8009490:	f000 8088 	beq.w	80095a4 <__kernel_cos+0x134>
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f7 f854 	bl	8000548 <__aeabi_dmul>
 80094a0:	4b51      	ldr	r3, [pc, #324]	@ (80095e8 <__kernel_cos+0x178>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	f7f7 f84e 	bl	8000548 <__aeabi_dmul>
 80094ac:	a340      	add	r3, pc, #256	@ (adr r3, 80095b0 <__kernel_cos+0x140>)
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	4682      	mov	sl, r0
 80094b4:	468b      	mov	fp, r1
 80094b6:	4620      	mov	r0, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f7 f845 	bl	8000548 <__aeabi_dmul>
 80094be:	a33e      	add	r3, pc, #248	@ (adr r3, 80095b8 <__kernel_cos+0x148>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f7f6 fe8a 	bl	80001dc <__adddf3>
 80094c8:	4622      	mov	r2, r4
 80094ca:	462b      	mov	r3, r5
 80094cc:	f7f7 f83c 	bl	8000548 <__aeabi_dmul>
 80094d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80095c0 <__kernel_cos+0x150>)
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	f7f6 fe7f 	bl	80001d8 <__aeabi_dsub>
 80094da:	4622      	mov	r2, r4
 80094dc:	462b      	mov	r3, r5
 80094de:	f7f7 f833 	bl	8000548 <__aeabi_dmul>
 80094e2:	a339      	add	r3, pc, #228	@ (adr r3, 80095c8 <__kernel_cos+0x158>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	f7f6 fe78 	bl	80001dc <__adddf3>
 80094ec:	4622      	mov	r2, r4
 80094ee:	462b      	mov	r3, r5
 80094f0:	f7f7 f82a 	bl	8000548 <__aeabi_dmul>
 80094f4:	a336      	add	r3, pc, #216	@ (adr r3, 80095d0 <__kernel_cos+0x160>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7f6 fe6d 	bl	80001d8 <__aeabi_dsub>
 80094fe:	4622      	mov	r2, r4
 8009500:	462b      	mov	r3, r5
 8009502:	f7f7 f821 	bl	8000548 <__aeabi_dmul>
 8009506:	a334      	add	r3, pc, #208	@ (adr r3, 80095d8 <__kernel_cos+0x168>)
 8009508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950c:	f7f6 fe66 	bl	80001dc <__adddf3>
 8009510:	4622      	mov	r2, r4
 8009512:	462b      	mov	r3, r5
 8009514:	f7f7 f818 	bl	8000548 <__aeabi_dmul>
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	f7f7 f814 	bl	8000548 <__aeabi_dmul>
 8009520:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009524:	4604      	mov	r4, r0
 8009526:	460d      	mov	r5, r1
 8009528:	4630      	mov	r0, r6
 800952a:	4639      	mov	r1, r7
 800952c:	f7f7 f80c 	bl	8000548 <__aeabi_dmul>
 8009530:	460b      	mov	r3, r1
 8009532:	4602      	mov	r2, r0
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	f7f6 fe4e 	bl	80001d8 <__aeabi_dsub>
 800953c:	4b2b      	ldr	r3, [pc, #172]	@ (80095ec <__kernel_cos+0x17c>)
 800953e:	4598      	cmp	r8, r3
 8009540:	4606      	mov	r6, r0
 8009542:	460f      	mov	r7, r1
 8009544:	d810      	bhi.n	8009568 <__kernel_cos+0xf8>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4650      	mov	r0, sl
 800954c:	4659      	mov	r1, fp
 800954e:	f7f6 fe43 	bl	80001d8 <__aeabi_dsub>
 8009552:	460b      	mov	r3, r1
 8009554:	4926      	ldr	r1, [pc, #152]	@ (80095f0 <__kernel_cos+0x180>)
 8009556:	4602      	mov	r2, r0
 8009558:	2000      	movs	r0, #0
 800955a:	f7f6 fe3d 	bl	80001d8 <__aeabi_dsub>
 800955e:	ec41 0b10 	vmov	d0, r0, r1
 8009562:	b003      	add	sp, #12
 8009564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009568:	4b22      	ldr	r3, [pc, #136]	@ (80095f4 <__kernel_cos+0x184>)
 800956a:	4921      	ldr	r1, [pc, #132]	@ (80095f0 <__kernel_cos+0x180>)
 800956c:	4598      	cmp	r8, r3
 800956e:	bf8c      	ite	hi
 8009570:	4d21      	ldrhi	r5, [pc, #132]	@ (80095f8 <__kernel_cos+0x188>)
 8009572:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009576:	2400      	movs	r4, #0
 8009578:	4622      	mov	r2, r4
 800957a:	462b      	mov	r3, r5
 800957c:	2000      	movs	r0, #0
 800957e:	f7f6 fe2b 	bl	80001d8 <__aeabi_dsub>
 8009582:	4622      	mov	r2, r4
 8009584:	4680      	mov	r8, r0
 8009586:	4689      	mov	r9, r1
 8009588:	462b      	mov	r3, r5
 800958a:	4650      	mov	r0, sl
 800958c:	4659      	mov	r1, fp
 800958e:	f7f6 fe23 	bl	80001d8 <__aeabi_dsub>
 8009592:	4632      	mov	r2, r6
 8009594:	463b      	mov	r3, r7
 8009596:	f7f6 fe1f 	bl	80001d8 <__aeabi_dsub>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	e7da      	b.n	800955a <__kernel_cos+0xea>
 80095a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80095e0 <__kernel_cos+0x170>
 80095a8:	e7db      	b.n	8009562 <__kernel_cos+0xf2>
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w
 80095b0:	be8838d4 	.word	0xbe8838d4
 80095b4:	bda8fae9 	.word	0xbda8fae9
 80095b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80095bc:	3e21ee9e 	.word	0x3e21ee9e
 80095c0:	809c52ad 	.word	0x809c52ad
 80095c4:	3e927e4f 	.word	0x3e927e4f
 80095c8:	19cb1590 	.word	0x19cb1590
 80095cc:	3efa01a0 	.word	0x3efa01a0
 80095d0:	16c15177 	.word	0x16c15177
 80095d4:	3f56c16c 	.word	0x3f56c16c
 80095d8:	5555554c 	.word	0x5555554c
 80095dc:	3fa55555 	.word	0x3fa55555
 80095e0:	00000000 	.word	0x00000000
 80095e4:	3ff00000 	.word	0x3ff00000
 80095e8:	3fe00000 	.word	0x3fe00000
 80095ec:	3fd33332 	.word	0x3fd33332
 80095f0:	3ff00000 	.word	0x3ff00000
 80095f4:	3fe90000 	.word	0x3fe90000
 80095f8:	3fd20000 	.word	0x3fd20000
 80095fc:	00000000 	.word	0x00000000

08009600 <__kernel_sin>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	ec55 4b10 	vmov	r4, r5, d0
 8009608:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800960c:	b085      	sub	sp, #20
 800960e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009612:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009616:	4680      	mov	r8, r0
 8009618:	d205      	bcs.n	8009626 <__kernel_sin+0x26>
 800961a:	4620      	mov	r0, r4
 800961c:	4629      	mov	r1, r5
 800961e:	f7f7 fa2d 	bl	8000a7c <__aeabi_d2iz>
 8009622:	2800      	cmp	r0, #0
 8009624:	d052      	beq.n	80096cc <__kernel_sin+0xcc>
 8009626:	4622      	mov	r2, r4
 8009628:	462b      	mov	r3, r5
 800962a:	4620      	mov	r0, r4
 800962c:	4629      	mov	r1, r5
 800962e:	f7f6 ff8b 	bl	8000548 <__aeabi_dmul>
 8009632:	4682      	mov	sl, r0
 8009634:	468b      	mov	fp, r1
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4620      	mov	r0, r4
 800963c:	4629      	mov	r1, r5
 800963e:	f7f6 ff83 	bl	8000548 <__aeabi_dmul>
 8009642:	a342      	add	r3, pc, #264	@ (adr r3, 800974c <__kernel_sin+0x14c>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	e9cd 0100 	strd	r0, r1, [sp]
 800964c:	4650      	mov	r0, sl
 800964e:	4659      	mov	r1, fp
 8009650:	f7f6 ff7a 	bl	8000548 <__aeabi_dmul>
 8009654:	a33f      	add	r3, pc, #252	@ (adr r3, 8009754 <__kernel_sin+0x154>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 fdbd 	bl	80001d8 <__aeabi_dsub>
 800965e:	4652      	mov	r2, sl
 8009660:	465b      	mov	r3, fp
 8009662:	f7f6 ff71 	bl	8000548 <__aeabi_dmul>
 8009666:	a33d      	add	r3, pc, #244	@ (adr r3, 800975c <__kernel_sin+0x15c>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f6 fdb6 	bl	80001dc <__adddf3>
 8009670:	4652      	mov	r2, sl
 8009672:	465b      	mov	r3, fp
 8009674:	f7f6 ff68 	bl	8000548 <__aeabi_dmul>
 8009678:	a33a      	add	r3, pc, #232	@ (adr r3, 8009764 <__kernel_sin+0x164>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f7f6 fdab 	bl	80001d8 <__aeabi_dsub>
 8009682:	4652      	mov	r2, sl
 8009684:	465b      	mov	r3, fp
 8009686:	f7f6 ff5f 	bl	8000548 <__aeabi_dmul>
 800968a:	a338      	add	r3, pc, #224	@ (adr r3, 800976c <__kernel_sin+0x16c>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 fda4 	bl	80001dc <__adddf3>
 8009694:	4606      	mov	r6, r0
 8009696:	460f      	mov	r7, r1
 8009698:	f1b8 0f00 	cmp.w	r8, #0
 800969c:	d11b      	bne.n	80096d6 <__kernel_sin+0xd6>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4650      	mov	r0, sl
 80096a4:	4659      	mov	r1, fp
 80096a6:	f7f6 ff4f 	bl	8000548 <__aeabi_dmul>
 80096aa:	a325      	add	r3, pc, #148	@ (adr r3, 8009740 <__kernel_sin+0x140>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fd92 	bl	80001d8 <__aeabi_dsub>
 80096b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096b8:	f7f6 ff46 	bl	8000548 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4620      	mov	r0, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	f7f6 fd8a 	bl	80001dc <__adddf3>
 80096c8:	4604      	mov	r4, r0
 80096ca:	460d      	mov	r5, r1
 80096cc:	ec45 4b10 	vmov	d0, r4, r5
 80096d0:	b005      	add	sp, #20
 80096d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096da:	4b1b      	ldr	r3, [pc, #108]	@ (8009748 <__kernel_sin+0x148>)
 80096dc:	2200      	movs	r2, #0
 80096de:	f7f6 ff33 	bl	8000548 <__aeabi_dmul>
 80096e2:	4632      	mov	r2, r6
 80096e4:	4680      	mov	r8, r0
 80096e6:	4689      	mov	r9, r1
 80096e8:	463b      	mov	r3, r7
 80096ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096ee:	f7f6 ff2b 	bl	8000548 <__aeabi_dmul>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4640      	mov	r0, r8
 80096f8:	4649      	mov	r1, r9
 80096fa:	f7f6 fd6d 	bl	80001d8 <__aeabi_dsub>
 80096fe:	4652      	mov	r2, sl
 8009700:	465b      	mov	r3, fp
 8009702:	f7f6 ff21 	bl	8000548 <__aeabi_dmul>
 8009706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800970a:	f7f6 fd65 	bl	80001d8 <__aeabi_dsub>
 800970e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009740 <__kernel_sin+0x140>)
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	4606      	mov	r6, r0
 8009716:	460f      	mov	r7, r1
 8009718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800971c:	f7f6 ff14 	bl	8000548 <__aeabi_dmul>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4630      	mov	r0, r6
 8009726:	4639      	mov	r1, r7
 8009728:	f7f6 fd58 	bl	80001dc <__adddf3>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4620      	mov	r0, r4
 8009732:	4629      	mov	r1, r5
 8009734:	f7f6 fd50 	bl	80001d8 <__aeabi_dsub>
 8009738:	e7c6      	b.n	80096c8 <__kernel_sin+0xc8>
 800973a:	bf00      	nop
 800973c:	f3af 8000 	nop.w
 8009740:	55555549 	.word	0x55555549
 8009744:	3fc55555 	.word	0x3fc55555
 8009748:	3fe00000 	.word	0x3fe00000
 800974c:	5acfd57c 	.word	0x5acfd57c
 8009750:	3de5d93a 	.word	0x3de5d93a
 8009754:	8a2b9ceb 	.word	0x8a2b9ceb
 8009758:	3e5ae5e6 	.word	0x3e5ae5e6
 800975c:	57b1fe7d 	.word	0x57b1fe7d
 8009760:	3ec71de3 	.word	0x3ec71de3
 8009764:	19c161d5 	.word	0x19c161d5
 8009768:	3f2a01a0 	.word	0x3f2a01a0
 800976c:	1110f8a6 	.word	0x1110f8a6
 8009770:	3f811111 	.word	0x3f811111
 8009774:	00000000 	.word	0x00000000

08009778 <__ieee754_rem_pio2>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	ec57 6b10 	vmov	r6, r7, d0
 8009780:	4bc5      	ldr	r3, [pc, #788]	@ (8009a98 <__ieee754_rem_pio2+0x320>)
 8009782:	b08d      	sub	sp, #52	@ 0x34
 8009784:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009788:	4598      	cmp	r8, r3
 800978a:	4604      	mov	r4, r0
 800978c:	9704      	str	r7, [sp, #16]
 800978e:	d807      	bhi.n	80097a0 <__ieee754_rem_pio2+0x28>
 8009790:	2200      	movs	r2, #0
 8009792:	2300      	movs	r3, #0
 8009794:	ed80 0b00 	vstr	d0, [r0]
 8009798:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800979c:	2500      	movs	r5, #0
 800979e:	e028      	b.n	80097f2 <__ieee754_rem_pio2+0x7a>
 80097a0:	4bbe      	ldr	r3, [pc, #760]	@ (8009a9c <__ieee754_rem_pio2+0x324>)
 80097a2:	4598      	cmp	r8, r3
 80097a4:	d878      	bhi.n	8009898 <__ieee754_rem_pio2+0x120>
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	4dbd      	ldr	r5, [pc, #756]	@ (8009aa0 <__ieee754_rem_pio2+0x328>)
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	4630      	mov	r0, r6
 80097ae:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009a60 <__ieee754_rem_pio2+0x2e8>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	4639      	mov	r1, r7
 80097b6:	dd38      	ble.n	800982a <__ieee754_rem_pio2+0xb2>
 80097b8:	f7f6 fd0e 	bl	80001d8 <__aeabi_dsub>
 80097bc:	45a8      	cmp	r8, r5
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	d01a      	beq.n	80097fa <__ieee754_rem_pio2+0x82>
 80097c4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009a68 <__ieee754_rem_pio2+0x2f0>)
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	f7f6 fd05 	bl	80001d8 <__aeabi_dsub>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4680      	mov	r8, r0
 80097d4:	4689      	mov	r9, r1
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 fcfd 	bl	80001d8 <__aeabi_dsub>
 80097de:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009a68 <__ieee754_rem_pio2+0x2f0>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f7f6 fcf8 	bl	80001d8 <__aeabi_dsub>
 80097e8:	e9c4 8900 	strd	r8, r9, [r4]
 80097ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097f0:	2501      	movs	r5, #1
 80097f2:	4628      	mov	r0, r5
 80097f4:	b00d      	add	sp, #52	@ 0x34
 80097f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fa:	a39d      	add	r3, pc, #628	@ (adr r3, 8009a70 <__ieee754_rem_pio2+0x2f8>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 fcea 	bl	80001d8 <__aeabi_dsub>
 8009804:	a39c      	add	r3, pc, #624	@ (adr r3, 8009a78 <__ieee754_rem_pio2+0x300>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	f7f6 fce3 	bl	80001d8 <__aeabi_dsub>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4680      	mov	r8, r0
 8009818:	4689      	mov	r9, r1
 800981a:	4630      	mov	r0, r6
 800981c:	4639      	mov	r1, r7
 800981e:	f7f6 fcdb 	bl	80001d8 <__aeabi_dsub>
 8009822:	a395      	add	r3, pc, #596	@ (adr r3, 8009a78 <__ieee754_rem_pio2+0x300>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	e7dc      	b.n	80097e4 <__ieee754_rem_pio2+0x6c>
 800982a:	f7f6 fcd7 	bl	80001dc <__adddf3>
 800982e:	45a8      	cmp	r8, r5
 8009830:	4606      	mov	r6, r0
 8009832:	460f      	mov	r7, r1
 8009834:	d018      	beq.n	8009868 <__ieee754_rem_pio2+0xf0>
 8009836:	a38c      	add	r3, pc, #560	@ (adr r3, 8009a68 <__ieee754_rem_pio2+0x2f0>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f7f6 fcce 	bl	80001dc <__adddf3>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4680      	mov	r8, r0
 8009846:	4689      	mov	r9, r1
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f6 fcc4 	bl	80001d8 <__aeabi_dsub>
 8009850:	a385      	add	r3, pc, #532	@ (adr r3, 8009a68 <__ieee754_rem_pio2+0x2f0>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	f7f6 fcc1 	bl	80001dc <__adddf3>
 800985a:	f04f 35ff 	mov.w	r5, #4294967295
 800985e:	e9c4 8900 	strd	r8, r9, [r4]
 8009862:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009866:	e7c4      	b.n	80097f2 <__ieee754_rem_pio2+0x7a>
 8009868:	a381      	add	r3, pc, #516	@ (adr r3, 8009a70 <__ieee754_rem_pio2+0x2f8>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fcb5 	bl	80001dc <__adddf3>
 8009872:	a381      	add	r3, pc, #516	@ (adr r3, 8009a78 <__ieee754_rem_pio2+0x300>)
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	4606      	mov	r6, r0
 800987a:	460f      	mov	r7, r1
 800987c:	f7f6 fcae 	bl	80001dc <__adddf3>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4680      	mov	r8, r0
 8009886:	4689      	mov	r9, r1
 8009888:	4630      	mov	r0, r6
 800988a:	4639      	mov	r1, r7
 800988c:	f7f6 fca4 	bl	80001d8 <__aeabi_dsub>
 8009890:	a379      	add	r3, pc, #484	@ (adr r3, 8009a78 <__ieee754_rem_pio2+0x300>)
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	e7de      	b.n	8009856 <__ieee754_rem_pio2+0xde>
 8009898:	4b82      	ldr	r3, [pc, #520]	@ (8009aa4 <__ieee754_rem_pio2+0x32c>)
 800989a:	4598      	cmp	r8, r3
 800989c:	f200 80d1 	bhi.w	8009a42 <__ieee754_rem_pio2+0x2ca>
 80098a0:	f000 f966 	bl	8009b70 <fabs>
 80098a4:	ec57 6b10 	vmov	r6, r7, d0
 80098a8:	a375      	add	r3, pc, #468	@ (adr r3, 8009a80 <__ieee754_rem_pio2+0x308>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	4630      	mov	r0, r6
 80098b0:	4639      	mov	r1, r7
 80098b2:	f7f6 fe49 	bl	8000548 <__aeabi_dmul>
 80098b6:	4b7c      	ldr	r3, [pc, #496]	@ (8009aa8 <__ieee754_rem_pio2+0x330>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	f7f6 fc8f 	bl	80001dc <__adddf3>
 80098be:	f7f7 f8dd 	bl	8000a7c <__aeabi_d2iz>
 80098c2:	4605      	mov	r5, r0
 80098c4:	f7f6 fdd6 	bl	8000474 <__aeabi_i2d>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098d0:	a363      	add	r3, pc, #396	@ (adr r3, 8009a60 <__ieee754_rem_pio2+0x2e8>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fe37 	bl	8000548 <__aeabi_dmul>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	f7f6 fc79 	bl	80001d8 <__aeabi_dsub>
 80098e6:	a360      	add	r3, pc, #384	@ (adr r3, 8009a68 <__ieee754_rem_pio2+0x2f0>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	4682      	mov	sl, r0
 80098ee:	468b      	mov	fp, r1
 80098f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098f4:	f7f6 fe28 	bl	8000548 <__aeabi_dmul>
 80098f8:	2d1f      	cmp	r5, #31
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	dc0c      	bgt.n	800991a <__ieee754_rem_pio2+0x1a2>
 8009900:	4b6a      	ldr	r3, [pc, #424]	@ (8009aac <__ieee754_rem_pio2+0x334>)
 8009902:	1e6a      	subs	r2, r5, #1
 8009904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009908:	4543      	cmp	r3, r8
 800990a:	d006      	beq.n	800991a <__ieee754_rem_pio2+0x1a2>
 800990c:	4632      	mov	r2, r6
 800990e:	463b      	mov	r3, r7
 8009910:	4650      	mov	r0, sl
 8009912:	4659      	mov	r1, fp
 8009914:	f7f6 fc60 	bl	80001d8 <__aeabi_dsub>
 8009918:	e00e      	b.n	8009938 <__ieee754_rem_pio2+0x1c0>
 800991a:	463b      	mov	r3, r7
 800991c:	4632      	mov	r2, r6
 800991e:	4650      	mov	r0, sl
 8009920:	4659      	mov	r1, fp
 8009922:	f7f6 fc59 	bl	80001d8 <__aeabi_dsub>
 8009926:	ea4f 5328 	mov.w	r3, r8, asr #20
 800992a:	9305      	str	r3, [sp, #20]
 800992c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009930:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009934:	2b10      	cmp	r3, #16
 8009936:	dc02      	bgt.n	800993e <__ieee754_rem_pio2+0x1c6>
 8009938:	e9c4 0100 	strd	r0, r1, [r4]
 800993c:	e039      	b.n	80099b2 <__ieee754_rem_pio2+0x23a>
 800993e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009a70 <__ieee754_rem_pio2+0x2f8>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009948:	f7f6 fdfe 	bl	8000548 <__aeabi_dmul>
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4650      	mov	r0, sl
 8009956:	4659      	mov	r1, fp
 8009958:	f7f6 fc3e 	bl	80001d8 <__aeabi_dsub>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	4680      	mov	r8, r0
 8009962:	4689      	mov	r9, r1
 8009964:	4650      	mov	r0, sl
 8009966:	4659      	mov	r1, fp
 8009968:	f7f6 fc36 	bl	80001d8 <__aeabi_dsub>
 800996c:	4632      	mov	r2, r6
 800996e:	463b      	mov	r3, r7
 8009970:	f7f6 fc32 	bl	80001d8 <__aeabi_dsub>
 8009974:	a340      	add	r3, pc, #256	@ (adr r3, 8009a78 <__ieee754_rem_pio2+0x300>)
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	4606      	mov	r6, r0
 800997c:	460f      	mov	r7, r1
 800997e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009982:	f7f6 fde1 	bl	8000548 <__aeabi_dmul>
 8009986:	4632      	mov	r2, r6
 8009988:	463b      	mov	r3, r7
 800998a:	f7f6 fc25 	bl	80001d8 <__aeabi_dsub>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4606      	mov	r6, r0
 8009994:	460f      	mov	r7, r1
 8009996:	4640      	mov	r0, r8
 8009998:	4649      	mov	r1, r9
 800999a:	f7f6 fc1d 	bl	80001d8 <__aeabi_dsub>
 800999e:	9a05      	ldr	r2, [sp, #20]
 80099a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	2b31      	cmp	r3, #49	@ 0x31
 80099a8:	dc20      	bgt.n	80099ec <__ieee754_rem_pio2+0x274>
 80099aa:	e9c4 0100 	strd	r0, r1, [r4]
 80099ae:	46c2      	mov	sl, r8
 80099b0:	46cb      	mov	fp, r9
 80099b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80099b6:	4650      	mov	r0, sl
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	4659      	mov	r1, fp
 80099be:	f7f6 fc0b 	bl	80001d8 <__aeabi_dsub>
 80099c2:	463b      	mov	r3, r7
 80099c4:	4632      	mov	r2, r6
 80099c6:	f7f6 fc07 	bl	80001d8 <__aeabi_dsub>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099d2:	f6bf af0e 	bge.w	80097f2 <__ieee754_rem_pio2+0x7a>
 80099d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099e0:	f8c4 8000 	str.w	r8, [r4]
 80099e4:	60a0      	str	r0, [r4, #8]
 80099e6:	60e3      	str	r3, [r4, #12]
 80099e8:	426d      	negs	r5, r5
 80099ea:	e702      	b.n	80097f2 <__ieee754_rem_pio2+0x7a>
 80099ec:	a326      	add	r3, pc, #152	@ (adr r3, 8009a88 <__ieee754_rem_pio2+0x310>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099f6:	f7f6 fda7 	bl	8000548 <__aeabi_dmul>
 80099fa:	4606      	mov	r6, r0
 80099fc:	460f      	mov	r7, r1
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4640      	mov	r0, r8
 8009a04:	4649      	mov	r1, r9
 8009a06:	f7f6 fbe7 	bl	80001d8 <__aeabi_dsub>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4682      	mov	sl, r0
 8009a10:	468b      	mov	fp, r1
 8009a12:	4640      	mov	r0, r8
 8009a14:	4649      	mov	r1, r9
 8009a16:	f7f6 fbdf 	bl	80001d8 <__aeabi_dsub>
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	f7f6 fbdb 	bl	80001d8 <__aeabi_dsub>
 8009a22:	a31b      	add	r3, pc, #108	@ (adr r3, 8009a90 <__ieee754_rem_pio2+0x318>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	4606      	mov	r6, r0
 8009a2a:	460f      	mov	r7, r1
 8009a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a30:	f7f6 fd8a 	bl	8000548 <__aeabi_dmul>
 8009a34:	4632      	mov	r2, r6
 8009a36:	463b      	mov	r3, r7
 8009a38:	f7f6 fbce 	bl	80001d8 <__aeabi_dsub>
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	460f      	mov	r7, r1
 8009a40:	e764      	b.n	800990c <__ieee754_rem_pio2+0x194>
 8009a42:	4b1b      	ldr	r3, [pc, #108]	@ (8009ab0 <__ieee754_rem_pio2+0x338>)
 8009a44:	4598      	cmp	r8, r3
 8009a46:	d935      	bls.n	8009ab4 <__ieee754_rem_pio2+0x33c>
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f6 fbc2 	bl	80001d8 <__aeabi_dsub>
 8009a54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a58:	e9c4 0100 	strd	r0, r1, [r4]
 8009a5c:	e69e      	b.n	800979c <__ieee754_rem_pio2+0x24>
 8009a5e:	bf00      	nop
 8009a60:	54400000 	.word	0x54400000
 8009a64:	3ff921fb 	.word	0x3ff921fb
 8009a68:	1a626331 	.word	0x1a626331
 8009a6c:	3dd0b461 	.word	0x3dd0b461
 8009a70:	1a600000 	.word	0x1a600000
 8009a74:	3dd0b461 	.word	0x3dd0b461
 8009a78:	2e037073 	.word	0x2e037073
 8009a7c:	3ba3198a 	.word	0x3ba3198a
 8009a80:	6dc9c883 	.word	0x6dc9c883
 8009a84:	3fe45f30 	.word	0x3fe45f30
 8009a88:	2e000000 	.word	0x2e000000
 8009a8c:	3ba3198a 	.word	0x3ba3198a
 8009a90:	252049c1 	.word	0x252049c1
 8009a94:	397b839a 	.word	0x397b839a
 8009a98:	3fe921fb 	.word	0x3fe921fb
 8009a9c:	4002d97b 	.word	0x4002d97b
 8009aa0:	3ff921fb 	.word	0x3ff921fb
 8009aa4:	413921fb 	.word	0x413921fb
 8009aa8:	3fe00000 	.word	0x3fe00000
 8009aac:	0800a520 	.word	0x0800a520
 8009ab0:	7fefffff 	.word	0x7fefffff
 8009ab4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009ab8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009abc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	460f      	mov	r7, r1
 8009ac4:	f7f6 ffda 	bl	8000a7c <__aeabi_d2iz>
 8009ac8:	f7f6 fcd4 	bl	8000474 <__aeabi_i2d>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ad8:	f7f6 fb7e 	bl	80001d8 <__aeabi_dsub>
 8009adc:	4b22      	ldr	r3, [pc, #136]	@ (8009b68 <__ieee754_rem_pio2+0x3f0>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f7f6 fd32 	bl	8000548 <__aeabi_dmul>
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	f7f6 ffc8 	bl	8000a7c <__aeabi_d2iz>
 8009aec:	f7f6 fcc2 	bl	8000474 <__aeabi_i2d>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009afc:	f7f6 fb6c 	bl	80001d8 <__aeabi_dsub>
 8009b00:	4b19      	ldr	r3, [pc, #100]	@ (8009b68 <__ieee754_rem_pio2+0x3f0>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fd20 	bl	8000548 <__aeabi_dmul>
 8009b08:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009b0c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009b10:	f04f 0803 	mov.w	r8, #3
 8009b14:	2600      	movs	r6, #0
 8009b16:	2700      	movs	r7, #0
 8009b18:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009b1c:	4632      	mov	r2, r6
 8009b1e:	463b      	mov	r3, r7
 8009b20:	46c2      	mov	sl, r8
 8009b22:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b26:	f7f6 ff77 	bl	8000a18 <__aeabi_dcmpeq>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d1f4      	bne.n	8009b18 <__ieee754_rem_pio2+0x3a0>
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b6c <__ieee754_rem_pio2+0x3f4>)
 8009b30:	9301      	str	r3, [sp, #4]
 8009b32:	2302      	movs	r3, #2
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	462a      	mov	r2, r5
 8009b38:	4653      	mov	r3, sl
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	a806      	add	r0, sp, #24
 8009b3e:	f000 f81f 	bl	8009b80 <__kernel_rem_pio2>
 8009b42:	9b04      	ldr	r3, [sp, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	4605      	mov	r5, r0
 8009b48:	f6bf ae53 	bge.w	80097f2 <__ieee754_rem_pio2+0x7a>
 8009b4c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009b50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b54:	e9c4 2300 	strd	r2, r3, [r4]
 8009b58:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009b5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b60:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009b64:	e740      	b.n	80099e8 <__ieee754_rem_pio2+0x270>
 8009b66:	bf00      	nop
 8009b68:	41700000 	.word	0x41700000
 8009b6c:	0800a5a0 	.word	0x0800a5a0

08009b70 <fabs>:
 8009b70:	ec51 0b10 	vmov	r0, r1, d0
 8009b74:	4602      	mov	r2, r0
 8009b76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b7a:	ec43 2b10 	vmov	d0, r2, r3
 8009b7e:	4770      	bx	lr

08009b80 <__kernel_rem_pio2>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	ed2d 8b02 	vpush	{d8}
 8009b88:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009b8c:	f112 0f14 	cmn.w	r2, #20
 8009b90:	9306      	str	r3, [sp, #24]
 8009b92:	9104      	str	r1, [sp, #16]
 8009b94:	4bbe      	ldr	r3, [pc, #760]	@ (8009e90 <__kernel_rem_pio2+0x310>)
 8009b96:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009b98:	9008      	str	r0, [sp, #32]
 8009b9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	9b06      	ldr	r3, [sp, #24]
 8009ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ba6:	bfa8      	it	ge
 8009ba8:	1ed4      	subge	r4, r2, #3
 8009baa:	9305      	str	r3, [sp, #20]
 8009bac:	bfb2      	itee	lt
 8009bae:	2400      	movlt	r4, #0
 8009bb0:	2318      	movge	r3, #24
 8009bb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8009bb6:	f06f 0317 	mvn.w	r3, #23
 8009bba:	fb04 3303 	mla	r3, r4, r3, r3
 8009bbe:	eb03 0b02 	add.w	fp, r3, r2
 8009bc2:	9b00      	ldr	r3, [sp, #0]
 8009bc4:	9a05      	ldr	r2, [sp, #20]
 8009bc6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009e80 <__kernel_rem_pio2+0x300>
 8009bca:	eb03 0802 	add.w	r8, r3, r2
 8009bce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009bd0:	1aa7      	subs	r7, r4, r2
 8009bd2:	ae20      	add	r6, sp, #128	@ 0x80
 8009bd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009bd8:	2500      	movs	r5, #0
 8009bda:	4545      	cmp	r5, r8
 8009bdc:	dd13      	ble.n	8009c06 <__kernel_rem_pio2+0x86>
 8009bde:	9b06      	ldr	r3, [sp, #24]
 8009be0:	aa20      	add	r2, sp, #128	@ 0x80
 8009be2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009be6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	4598      	cmp	r8, r3
 8009bf2:	dc31      	bgt.n	8009c58 <__kernel_rem_pio2+0xd8>
 8009bf4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009e80 <__kernel_rem_pio2+0x300>
 8009bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c00:	462f      	mov	r7, r5
 8009c02:	2600      	movs	r6, #0
 8009c04:	e01b      	b.n	8009c3e <__kernel_rem_pio2+0xbe>
 8009c06:	42ef      	cmn	r7, r5
 8009c08:	d407      	bmi.n	8009c1a <__kernel_rem_pio2+0x9a>
 8009c0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009c0e:	f7f6 fc31 	bl	8000474 <__aeabi_i2d>
 8009c12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c16:	3501      	adds	r5, #1
 8009c18:	e7df      	b.n	8009bda <__kernel_rem_pio2+0x5a>
 8009c1a:	ec51 0b18 	vmov	r0, r1, d8
 8009c1e:	e7f8      	b.n	8009c12 <__kernel_rem_pio2+0x92>
 8009c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009c28:	f7f6 fc8e 	bl	8000548 <__aeabi_dmul>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c34:	f7f6 fad2 	bl	80001dc <__adddf3>
 8009c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c3c:	3601      	adds	r6, #1
 8009c3e:	9b05      	ldr	r3, [sp, #20]
 8009c40:	429e      	cmp	r6, r3
 8009c42:	f1a7 0708 	sub.w	r7, r7, #8
 8009c46:	ddeb      	ble.n	8009c20 <__kernel_rem_pio2+0xa0>
 8009c48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c4c:	f108 0801 	add.w	r8, r8, #1
 8009c50:	ecaa 7b02 	vstmia	sl!, {d7}
 8009c54:	3508      	adds	r5, #8
 8009c56:	e7ca      	b.n	8009bee <__kernel_rem_pio2+0x6e>
 8009c58:	9b00      	ldr	r3, [sp, #0]
 8009c5a:	f8dd 8000 	ldr.w	r8, [sp]
 8009c5e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c64:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c66:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009c68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009c72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c74:	ab98      	add	r3, sp, #608	@ 0x260
 8009c76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c7a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009c7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c82:	ac0c      	add	r4, sp, #48	@ 0x30
 8009c84:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c86:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009c8a:	46a1      	mov	r9, r4
 8009c8c:	46c2      	mov	sl, r8
 8009c8e:	f1ba 0f00 	cmp.w	sl, #0
 8009c92:	f1a5 0508 	sub.w	r5, r5, #8
 8009c96:	dc77      	bgt.n	8009d88 <__kernel_rem_pio2+0x208>
 8009c98:	4658      	mov	r0, fp
 8009c9a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009c9e:	f000 fac7 	bl	800a230 <scalbn>
 8009ca2:	ec57 6b10 	vmov	r6, r7, d0
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009cac:	4630      	mov	r0, r6
 8009cae:	4639      	mov	r1, r7
 8009cb0:	f7f6 fc4a 	bl	8000548 <__aeabi_dmul>
 8009cb4:	ec41 0b10 	vmov	d0, r0, r1
 8009cb8:	f000 fb3a 	bl	800a330 <floor>
 8009cbc:	4b75      	ldr	r3, [pc, #468]	@ (8009e94 <__kernel_rem_pio2+0x314>)
 8009cbe:	ec51 0b10 	vmov	r0, r1, d0
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f7f6 fc40 	bl	8000548 <__aeabi_dmul>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 fa82 	bl	80001d8 <__aeabi_dsub>
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	f7f6 fed0 	bl	8000a7c <__aeabi_d2iz>
 8009cdc:	9002      	str	r0, [sp, #8]
 8009cde:	f7f6 fbc9 	bl	8000474 <__aeabi_i2d>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	4639      	mov	r1, r7
 8009cea:	f7f6 fa75 	bl	80001d8 <__aeabi_dsub>
 8009cee:	f1bb 0f00 	cmp.w	fp, #0
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	460f      	mov	r7, r1
 8009cf6:	dd6c      	ble.n	8009dd2 <__kernel_rem_pio2+0x252>
 8009cf8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009cfc:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cfe:	9d02      	ldr	r5, [sp, #8]
 8009d00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d04:	f1cb 0018 	rsb	r0, fp, #24
 8009d08:	fa43 f200 	asr.w	r2, r3, r0
 8009d0c:	4415      	add	r5, r2
 8009d0e:	4082      	lsls	r2, r0
 8009d10:	1a9b      	subs	r3, r3, r2
 8009d12:	aa0c      	add	r2, sp, #48	@ 0x30
 8009d14:	9502      	str	r5, [sp, #8]
 8009d16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009d1a:	f1cb 0217 	rsb	r2, fp, #23
 8009d1e:	fa43 f902 	asr.w	r9, r3, r2
 8009d22:	f1b9 0f00 	cmp.w	r9, #0
 8009d26:	dd64      	ble.n	8009df2 <__kernel_rem_pio2+0x272>
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	9302      	str	r3, [sp, #8]
 8009d30:	4615      	mov	r5, r2
 8009d32:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009d36:	4590      	cmp	r8, r2
 8009d38:	f300 80b8 	bgt.w	8009eac <__kernel_rem_pio2+0x32c>
 8009d3c:	f1bb 0f00 	cmp.w	fp, #0
 8009d40:	dd07      	ble.n	8009d52 <__kernel_rem_pio2+0x1d2>
 8009d42:	f1bb 0f01 	cmp.w	fp, #1
 8009d46:	f000 80bf 	beq.w	8009ec8 <__kernel_rem_pio2+0x348>
 8009d4a:	f1bb 0f02 	cmp.w	fp, #2
 8009d4e:	f000 80c6 	beq.w	8009ede <__kernel_rem_pio2+0x35e>
 8009d52:	f1b9 0f02 	cmp.w	r9, #2
 8009d56:	d14c      	bne.n	8009df2 <__kernel_rem_pio2+0x272>
 8009d58:	4632      	mov	r2, r6
 8009d5a:	463b      	mov	r3, r7
 8009d5c:	494e      	ldr	r1, [pc, #312]	@ (8009e98 <__kernel_rem_pio2+0x318>)
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f7f6 fa3a 	bl	80001d8 <__aeabi_dsub>
 8009d64:	4606      	mov	r6, r0
 8009d66:	460f      	mov	r7, r1
 8009d68:	2d00      	cmp	r5, #0
 8009d6a:	d042      	beq.n	8009df2 <__kernel_rem_pio2+0x272>
 8009d6c:	4658      	mov	r0, fp
 8009d6e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009e88 <__kernel_rem_pio2+0x308>
 8009d72:	f000 fa5d 	bl	800a230 <scalbn>
 8009d76:	4630      	mov	r0, r6
 8009d78:	4639      	mov	r1, r7
 8009d7a:	ec53 2b10 	vmov	r2, r3, d0
 8009d7e:	f7f6 fa2b 	bl	80001d8 <__aeabi_dsub>
 8009d82:	4606      	mov	r6, r0
 8009d84:	460f      	mov	r7, r1
 8009d86:	e034      	b.n	8009df2 <__kernel_rem_pio2+0x272>
 8009d88:	4b44      	ldr	r3, [pc, #272]	@ (8009e9c <__kernel_rem_pio2+0x31c>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d90:	f7f6 fbda 	bl	8000548 <__aeabi_dmul>
 8009d94:	f7f6 fe72 	bl	8000a7c <__aeabi_d2iz>
 8009d98:	f7f6 fb6c 	bl	8000474 <__aeabi_i2d>
 8009d9c:	4b40      	ldr	r3, [pc, #256]	@ (8009ea0 <__kernel_rem_pio2+0x320>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	4606      	mov	r6, r0
 8009da2:	460f      	mov	r7, r1
 8009da4:	f7f6 fbd0 	bl	8000548 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db0:	f7f6 fa12 	bl	80001d8 <__aeabi_dsub>
 8009db4:	f7f6 fe62 	bl	8000a7c <__aeabi_d2iz>
 8009db8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dbc:	f849 0b04 	str.w	r0, [r9], #4
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7f6 fa0a 	bl	80001dc <__adddf3>
 8009dc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd0:	e75d      	b.n	8009c8e <__kernel_rem_pio2+0x10e>
 8009dd2:	d107      	bne.n	8009de4 <__kernel_rem_pio2+0x264>
 8009dd4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009dd8:	aa0c      	add	r2, sp, #48	@ 0x30
 8009dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dde:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009de2:	e79e      	b.n	8009d22 <__kernel_rem_pio2+0x1a2>
 8009de4:	4b2f      	ldr	r3, [pc, #188]	@ (8009ea4 <__kernel_rem_pio2+0x324>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	f7f6 fe34 	bl	8000a54 <__aeabi_dcmpge>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d143      	bne.n	8009e78 <__kernel_rem_pio2+0x2f8>
 8009df0:	4681      	mov	r9, r0
 8009df2:	2200      	movs	r2, #0
 8009df4:	2300      	movs	r3, #0
 8009df6:	4630      	mov	r0, r6
 8009df8:	4639      	mov	r1, r7
 8009dfa:	f7f6 fe0d 	bl	8000a18 <__aeabi_dcmpeq>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f000 80bf 	beq.w	8009f82 <__kernel_rem_pio2+0x402>
 8009e04:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e08:	2200      	movs	r2, #0
 8009e0a:	9900      	ldr	r1, [sp, #0]
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	da6e      	bge.n	8009eee <__kernel_rem_pio2+0x36e>
 8009e10:	2a00      	cmp	r2, #0
 8009e12:	f000 8089 	beq.w	8009f28 <__kernel_rem_pio2+0x3a8>
 8009e16:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e1c:	f1ab 0b18 	sub.w	fp, fp, #24
 8009e20:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d0f6      	beq.n	8009e16 <__kernel_rem_pio2+0x296>
 8009e28:	4658      	mov	r0, fp
 8009e2a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009e88 <__kernel_rem_pio2+0x308>
 8009e2e:	f000 f9ff 	bl	800a230 <scalbn>
 8009e32:	f108 0301 	add.w	r3, r8, #1
 8009e36:	00da      	lsls	r2, r3, #3
 8009e38:	9205      	str	r2, [sp, #20]
 8009e3a:	ec55 4b10 	vmov	r4, r5, d0
 8009e3e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009e40:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009e9c <__kernel_rem_pio2+0x31c>
 8009e44:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009e48:	4646      	mov	r6, r8
 8009e4a:	f04f 0a00 	mov.w	sl, #0
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	f280 80cf 	bge.w	8009ff2 <__kernel_rem_pio2+0x472>
 8009e54:	4644      	mov	r4, r8
 8009e56:	2c00      	cmp	r4, #0
 8009e58:	f2c0 80fd 	blt.w	800a056 <__kernel_rem_pio2+0x4d6>
 8009e5c:	4b12      	ldr	r3, [pc, #72]	@ (8009ea8 <__kernel_rem_pio2+0x328>)
 8009e5e:	461f      	mov	r7, r3
 8009e60:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009e62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e66:	9306      	str	r3, [sp, #24]
 8009e68:	f04f 0a00 	mov.w	sl, #0
 8009e6c:	f04f 0b00 	mov.w	fp, #0
 8009e70:	2600      	movs	r6, #0
 8009e72:	eba8 0504 	sub.w	r5, r8, r4
 8009e76:	e0e2      	b.n	800a03e <__kernel_rem_pio2+0x4be>
 8009e78:	f04f 0902 	mov.w	r9, #2
 8009e7c:	e754      	b.n	8009d28 <__kernel_rem_pio2+0x1a8>
 8009e7e:	bf00      	nop
	...
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	0800a6e8 	.word	0x0800a6e8
 8009e94:	40200000 	.word	0x40200000
 8009e98:	3ff00000 	.word	0x3ff00000
 8009e9c:	3e700000 	.word	0x3e700000
 8009ea0:	41700000 	.word	0x41700000
 8009ea4:	3fe00000 	.word	0x3fe00000
 8009ea8:	0800a6a8 	.word	0x0800a6a8
 8009eac:	f854 3b04 	ldr.w	r3, [r4], #4
 8009eb0:	b945      	cbnz	r5, 8009ec4 <__kernel_rem_pio2+0x344>
 8009eb2:	b123      	cbz	r3, 8009ebe <__kernel_rem_pio2+0x33e>
 8009eb4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009eb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	3201      	adds	r2, #1
 8009ec0:	461d      	mov	r5, r3
 8009ec2:	e738      	b.n	8009d36 <__kernel_rem_pio2+0x1b6>
 8009ec4:	1acb      	subs	r3, r1, r3
 8009ec6:	e7f7      	b.n	8009eb8 <__kernel_rem_pio2+0x338>
 8009ec8:	f108 32ff 	add.w	r2, r8, #4294967295
 8009ecc:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ed6:	a90c      	add	r1, sp, #48	@ 0x30
 8009ed8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009edc:	e739      	b.n	8009d52 <__kernel_rem_pio2+0x1d2>
 8009ede:	f108 32ff 	add.w	r2, r8, #4294967295
 8009ee2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009eec:	e7f3      	b.n	8009ed6 <__kernel_rem_pio2+0x356>
 8009eee:	a90c      	add	r1, sp, #48	@ 0x30
 8009ef0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	e787      	b.n	8009e0a <__kernel_rem_pio2+0x28a>
 8009efa:	3401      	adds	r4, #1
 8009efc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	d0fa      	beq.n	8009efa <__kernel_rem_pio2+0x37a>
 8009f04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f0a:	eb0d 0503 	add.w	r5, sp, r3
 8009f0e:	9b06      	ldr	r3, [sp, #24]
 8009f10:	aa20      	add	r2, sp, #128	@ 0x80
 8009f12:	4443      	add	r3, r8
 8009f14:	f108 0701 	add.w	r7, r8, #1
 8009f18:	3d98      	subs	r5, #152	@ 0x98
 8009f1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009f1e:	4444      	add	r4, r8
 8009f20:	42bc      	cmp	r4, r7
 8009f22:	da04      	bge.n	8009f2e <__kernel_rem_pio2+0x3ae>
 8009f24:	46a0      	mov	r8, r4
 8009f26:	e6a2      	b.n	8009c6e <__kernel_rem_pio2+0xee>
 8009f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f2a:	2401      	movs	r4, #1
 8009f2c:	e7e6      	b.n	8009efc <__kernel_rem_pio2+0x37c>
 8009f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009f34:	f7f6 fa9e 	bl	8000474 <__aeabi_i2d>
 8009f38:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a200 <__kernel_rem_pio2+0x680>
 8009f3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f48:	46b2      	mov	sl, r6
 8009f4a:	f04f 0800 	mov.w	r8, #0
 8009f4e:	9b05      	ldr	r3, [sp, #20]
 8009f50:	4598      	cmp	r8, r3
 8009f52:	dd05      	ble.n	8009f60 <__kernel_rem_pio2+0x3e0>
 8009f54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f58:	3701      	adds	r7, #1
 8009f5a:	eca5 7b02 	vstmia	r5!, {d7}
 8009f5e:	e7df      	b.n	8009f20 <__kernel_rem_pio2+0x3a0>
 8009f60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009f64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009f68:	f7f6 faee 	bl	8000548 <__aeabi_dmul>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f74:	f7f6 f932 	bl	80001dc <__adddf3>
 8009f78:	f108 0801 	add.w	r8, r8, #1
 8009f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f80:	e7e5      	b.n	8009f4e <__kernel_rem_pio2+0x3ce>
 8009f82:	f1cb 0000 	rsb	r0, fp, #0
 8009f86:	ec47 6b10 	vmov	d0, r6, r7
 8009f8a:	f000 f951 	bl	800a230 <scalbn>
 8009f8e:	ec55 4b10 	vmov	r4, r5, d0
 8009f92:	4b9d      	ldr	r3, [pc, #628]	@ (800a208 <__kernel_rem_pio2+0x688>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 fd5b 	bl	8000a54 <__aeabi_dcmpge>
 8009f9e:	b300      	cbz	r0, 8009fe2 <__kernel_rem_pio2+0x462>
 8009fa0:	4b9a      	ldr	r3, [pc, #616]	@ (800a20c <__kernel_rem_pio2+0x68c>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7f6 face 	bl	8000548 <__aeabi_dmul>
 8009fac:	f7f6 fd66 	bl	8000a7c <__aeabi_d2iz>
 8009fb0:	4606      	mov	r6, r0
 8009fb2:	f7f6 fa5f 	bl	8000474 <__aeabi_i2d>
 8009fb6:	4b94      	ldr	r3, [pc, #592]	@ (800a208 <__kernel_rem_pio2+0x688>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f7f6 fac5 	bl	8000548 <__aeabi_dmul>
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7f6 f907 	bl	80001d8 <__aeabi_dsub>
 8009fca:	f7f6 fd57 	bl	8000a7c <__aeabi_d2iz>
 8009fce:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fd0:	f10b 0b18 	add.w	fp, fp, #24
 8009fd4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009fd8:	f108 0801 	add.w	r8, r8, #1
 8009fdc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009fe0:	e722      	b.n	8009e28 <__kernel_rem_pio2+0x2a8>
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 fd49 	bl	8000a7c <__aeabi_d2iz>
 8009fea:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009ff0:	e71a      	b.n	8009e28 <__kernel_rem_pio2+0x2a8>
 8009ff2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ff4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009ff8:	f7f6 fa3c 	bl	8000474 <__aeabi_i2d>
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	462b      	mov	r3, r5
 800a000:	f7f6 faa2 	bl	8000548 <__aeabi_dmul>
 800a004:	4652      	mov	r2, sl
 800a006:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a00a:	465b      	mov	r3, fp
 800a00c:	4620      	mov	r0, r4
 800a00e:	4629      	mov	r1, r5
 800a010:	f7f6 fa9a 	bl	8000548 <__aeabi_dmul>
 800a014:	3e01      	subs	r6, #1
 800a016:	4604      	mov	r4, r0
 800a018:	460d      	mov	r5, r1
 800a01a:	e718      	b.n	8009e4e <__kernel_rem_pio2+0x2ce>
 800a01c:	9906      	ldr	r1, [sp, #24]
 800a01e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a022:	9106      	str	r1, [sp, #24]
 800a024:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a028:	f7f6 fa8e 	bl	8000548 <__aeabi_dmul>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4650      	mov	r0, sl
 800a032:	4659      	mov	r1, fp
 800a034:	f7f6 f8d2 	bl	80001dc <__adddf3>
 800a038:	3601      	adds	r6, #1
 800a03a:	4682      	mov	sl, r0
 800a03c:	468b      	mov	fp, r1
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	429e      	cmp	r6, r3
 800a042:	dc01      	bgt.n	800a048 <__kernel_rem_pio2+0x4c8>
 800a044:	42b5      	cmp	r5, r6
 800a046:	dae9      	bge.n	800a01c <__kernel_rem_pio2+0x49c>
 800a048:	ab48      	add	r3, sp, #288	@ 0x120
 800a04a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a04e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a052:	3c01      	subs	r4, #1
 800a054:	e6ff      	b.n	8009e56 <__kernel_rem_pio2+0x2d6>
 800a056:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a058:	2b02      	cmp	r3, #2
 800a05a:	dc0b      	bgt.n	800a074 <__kernel_rem_pio2+0x4f4>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	dc39      	bgt.n	800a0d4 <__kernel_rem_pio2+0x554>
 800a060:	d05d      	beq.n	800a11e <__kernel_rem_pio2+0x59e>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	f003 0007 	and.w	r0, r3, #7
 800a068:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a06c:	ecbd 8b02 	vpop	{d8}
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a076:	2b03      	cmp	r3, #3
 800a078:	d1f3      	bne.n	800a062 <__kernel_rem_pio2+0x4e2>
 800a07a:	9b05      	ldr	r3, [sp, #20]
 800a07c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a080:	eb0d 0403 	add.w	r4, sp, r3
 800a084:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a088:	4625      	mov	r5, r4
 800a08a:	46c2      	mov	sl, r8
 800a08c:	f1ba 0f00 	cmp.w	sl, #0
 800a090:	f1a5 0508 	sub.w	r5, r5, #8
 800a094:	dc6b      	bgt.n	800a16e <__kernel_rem_pio2+0x5ee>
 800a096:	4645      	mov	r5, r8
 800a098:	2d01      	cmp	r5, #1
 800a09a:	f1a4 0408 	sub.w	r4, r4, #8
 800a09e:	f300 8087 	bgt.w	800a1b0 <__kernel_rem_pio2+0x630>
 800a0a2:	9c05      	ldr	r4, [sp, #20]
 800a0a4:	ab48      	add	r3, sp, #288	@ 0x120
 800a0a6:	441c      	add	r4, r3
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	f1b8 0f01 	cmp.w	r8, #1
 800a0b0:	f300 809c 	bgt.w	800a1ec <__kernel_rem_pio2+0x66c>
 800a0b4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a0b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	f040 80a6 	bne.w	800a210 <__kernel_rem_pio2+0x690>
 800a0c4:	9b04      	ldr	r3, [sp, #16]
 800a0c6:	e9c3 7800 	strd	r7, r8, [r3]
 800a0ca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a0ce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a0d2:	e7c6      	b.n	800a062 <__kernel_rem_pio2+0x4e2>
 800a0d4:	9d05      	ldr	r5, [sp, #20]
 800a0d6:	ab48      	add	r3, sp, #288	@ 0x120
 800a0d8:	441d      	add	r5, r3
 800a0da:	4644      	mov	r4, r8
 800a0dc:	2000      	movs	r0, #0
 800a0de:	2100      	movs	r1, #0
 800a0e0:	2c00      	cmp	r4, #0
 800a0e2:	da35      	bge.n	800a150 <__kernel_rem_pio2+0x5d0>
 800a0e4:	f1b9 0f00 	cmp.w	r9, #0
 800a0e8:	d038      	beq.n	800a15c <__kernel_rem_pio2+0x5dc>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0f0:	9c04      	ldr	r4, [sp, #16]
 800a0f2:	e9c4 2300 	strd	r2, r3, [r4]
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a0fe:	f7f6 f86b 	bl	80001d8 <__aeabi_dsub>
 800a102:	ad4a      	add	r5, sp, #296	@ 0x128
 800a104:	2401      	movs	r4, #1
 800a106:	45a0      	cmp	r8, r4
 800a108:	da2b      	bge.n	800a162 <__kernel_rem_pio2+0x5e2>
 800a10a:	f1b9 0f00 	cmp.w	r9, #0
 800a10e:	d002      	beq.n	800a116 <__kernel_rem_pio2+0x596>
 800a110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a114:	4619      	mov	r1, r3
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a11c:	e7a1      	b.n	800a062 <__kernel_rem_pio2+0x4e2>
 800a11e:	9c05      	ldr	r4, [sp, #20]
 800a120:	ab48      	add	r3, sp, #288	@ 0x120
 800a122:	441c      	add	r4, r3
 800a124:	2000      	movs	r0, #0
 800a126:	2100      	movs	r1, #0
 800a128:	f1b8 0f00 	cmp.w	r8, #0
 800a12c:	da09      	bge.n	800a142 <__kernel_rem_pio2+0x5c2>
 800a12e:	f1b9 0f00 	cmp.w	r9, #0
 800a132:	d002      	beq.n	800a13a <__kernel_rem_pio2+0x5ba>
 800a134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a138:	4619      	mov	r1, r3
 800a13a:	9b04      	ldr	r3, [sp, #16]
 800a13c:	e9c3 0100 	strd	r0, r1, [r3]
 800a140:	e78f      	b.n	800a062 <__kernel_rem_pio2+0x4e2>
 800a142:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a146:	f7f6 f849 	bl	80001dc <__adddf3>
 800a14a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a14e:	e7eb      	b.n	800a128 <__kernel_rem_pio2+0x5a8>
 800a150:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a154:	f7f6 f842 	bl	80001dc <__adddf3>
 800a158:	3c01      	subs	r4, #1
 800a15a:	e7c1      	b.n	800a0e0 <__kernel_rem_pio2+0x560>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	e7c6      	b.n	800a0f0 <__kernel_rem_pio2+0x570>
 800a162:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a166:	f7f6 f839 	bl	80001dc <__adddf3>
 800a16a:	3401      	adds	r4, #1
 800a16c:	e7cb      	b.n	800a106 <__kernel_rem_pio2+0x586>
 800a16e:	ed95 7b00 	vldr	d7, [r5]
 800a172:	ed8d 7b00 	vstr	d7, [sp]
 800a176:	ed95 7b02 	vldr	d7, [r5, #8]
 800a17a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a17e:	ec53 2b17 	vmov	r2, r3, d7
 800a182:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a186:	f7f6 f829 	bl	80001dc <__adddf3>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4606      	mov	r6, r0
 800a190:	460f      	mov	r7, r1
 800a192:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a196:	f7f6 f81f 	bl	80001d8 <__aeabi_dsub>
 800a19a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a19e:	f7f6 f81d 	bl	80001dc <__adddf3>
 800a1a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1a6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a1aa:	e9c5 6700 	strd	r6, r7, [r5]
 800a1ae:	e76d      	b.n	800a08c <__kernel_rem_pio2+0x50c>
 800a1b0:	ed94 7b00 	vldr	d7, [r4]
 800a1b4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a1b8:	ec51 0b17 	vmov	r0, r1, d7
 800a1bc:	4652      	mov	r2, sl
 800a1be:	465b      	mov	r3, fp
 800a1c0:	ed8d 7b00 	vstr	d7, [sp]
 800a1c4:	f7f6 f80a 	bl	80001dc <__adddf3>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1d4:	f7f6 f800 	bl	80001d8 <__aeabi_dsub>
 800a1d8:	4652      	mov	r2, sl
 800a1da:	465b      	mov	r3, fp
 800a1dc:	f7f5 fffe 	bl	80001dc <__adddf3>
 800a1e0:	3d01      	subs	r5, #1
 800a1e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1e6:	e9c4 6700 	strd	r6, r7, [r4]
 800a1ea:	e755      	b.n	800a098 <__kernel_rem_pio2+0x518>
 800a1ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1f0:	f7f5 fff4 	bl	80001dc <__adddf3>
 800a1f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1f8:	e758      	b.n	800a0ac <__kernel_rem_pio2+0x52c>
 800a1fa:	bf00      	nop
 800a1fc:	f3af 8000 	nop.w
	...
 800a208:	41700000 	.word	0x41700000
 800a20c:	3e700000 	.word	0x3e700000
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	9a04      	ldr	r2, [sp, #16]
 800a214:	601f      	str	r7, [r3, #0]
 800a216:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a21a:	605c      	str	r4, [r3, #4]
 800a21c:	609d      	str	r5, [r3, #8]
 800a21e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a222:	60d3      	str	r3, [r2, #12]
 800a224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a228:	6110      	str	r0, [r2, #16]
 800a22a:	6153      	str	r3, [r2, #20]
 800a22c:	e719      	b.n	800a062 <__kernel_rem_pio2+0x4e2>
 800a22e:	bf00      	nop

0800a230 <scalbn>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	ec55 4b10 	vmov	r4, r5, d0
 800a236:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a23a:	4606      	mov	r6, r0
 800a23c:	462b      	mov	r3, r5
 800a23e:	b991      	cbnz	r1, 800a266 <scalbn+0x36>
 800a240:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a244:	4323      	orrs	r3, r4
 800a246:	d03d      	beq.n	800a2c4 <scalbn+0x94>
 800a248:	4b35      	ldr	r3, [pc, #212]	@ (800a320 <scalbn+0xf0>)
 800a24a:	4620      	mov	r0, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	2200      	movs	r2, #0
 800a250:	f7f6 f97a 	bl	8000548 <__aeabi_dmul>
 800a254:	4b33      	ldr	r3, [pc, #204]	@ (800a324 <scalbn+0xf4>)
 800a256:	429e      	cmp	r6, r3
 800a258:	4604      	mov	r4, r0
 800a25a:	460d      	mov	r5, r1
 800a25c:	da0f      	bge.n	800a27e <scalbn+0x4e>
 800a25e:	a328      	add	r3, pc, #160	@ (adr r3, 800a300 <scalbn+0xd0>)
 800a260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a264:	e01e      	b.n	800a2a4 <scalbn+0x74>
 800a266:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a26a:	4291      	cmp	r1, r2
 800a26c:	d10b      	bne.n	800a286 <scalbn+0x56>
 800a26e:	4622      	mov	r2, r4
 800a270:	4620      	mov	r0, r4
 800a272:	4629      	mov	r1, r5
 800a274:	f7f5 ffb2 	bl	80001dc <__adddf3>
 800a278:	4604      	mov	r4, r0
 800a27a:	460d      	mov	r5, r1
 800a27c:	e022      	b.n	800a2c4 <scalbn+0x94>
 800a27e:	460b      	mov	r3, r1
 800a280:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a284:	3936      	subs	r1, #54	@ 0x36
 800a286:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a28a:	4296      	cmp	r6, r2
 800a28c:	dd0d      	ble.n	800a2aa <scalbn+0x7a>
 800a28e:	2d00      	cmp	r5, #0
 800a290:	a11d      	add	r1, pc, #116	@ (adr r1, 800a308 <scalbn+0xd8>)
 800a292:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a296:	da02      	bge.n	800a29e <scalbn+0x6e>
 800a298:	a11d      	add	r1, pc, #116	@ (adr r1, 800a310 <scalbn+0xe0>)
 800a29a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a29e:	a31a      	add	r3, pc, #104	@ (adr r3, 800a308 <scalbn+0xd8>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 f950 	bl	8000548 <__aeabi_dmul>
 800a2a8:	e7e6      	b.n	800a278 <scalbn+0x48>
 800a2aa:	1872      	adds	r2, r6, r1
 800a2ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a2b0:	428a      	cmp	r2, r1
 800a2b2:	dcec      	bgt.n	800a28e <scalbn+0x5e>
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	dd08      	ble.n	800a2ca <scalbn+0x9a>
 800a2b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a2bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a2c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2c4:	ec45 4b10 	vmov	d0, r4, r5
 800a2c8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a2ce:	da08      	bge.n	800a2e2 <scalbn+0xb2>
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	a10b      	add	r1, pc, #44	@ (adr r1, 800a300 <scalbn+0xd0>)
 800a2d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d8:	dac1      	bge.n	800a25e <scalbn+0x2e>
 800a2da:	a10f      	add	r1, pc, #60	@ (adr r1, 800a318 <scalbn+0xe8>)
 800a2dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2e0:	e7bd      	b.n	800a25e <scalbn+0x2e>
 800a2e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a2e6:	3236      	adds	r2, #54	@ 0x36
 800a2e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a2ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <scalbn+0xf8>)
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	e7d4      	b.n	800a2a4 <scalbn+0x74>
 800a2fa:	bf00      	nop
 800a2fc:	f3af 8000 	nop.w
 800a300:	c2f8f359 	.word	0xc2f8f359
 800a304:	01a56e1f 	.word	0x01a56e1f
 800a308:	8800759c 	.word	0x8800759c
 800a30c:	7e37e43c 	.word	0x7e37e43c
 800a310:	8800759c 	.word	0x8800759c
 800a314:	fe37e43c 	.word	0xfe37e43c
 800a318:	c2f8f359 	.word	0xc2f8f359
 800a31c:	81a56e1f 	.word	0x81a56e1f
 800a320:	43500000 	.word	0x43500000
 800a324:	ffff3cb0 	.word	0xffff3cb0
 800a328:	3c900000 	.word	0x3c900000
 800a32c:	00000000 	.word	0x00000000

0800a330 <floor>:
 800a330:	ec51 0b10 	vmov	r0, r1, d0
 800a334:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a340:	2e13      	cmp	r6, #19
 800a342:	460c      	mov	r4, r1
 800a344:	4605      	mov	r5, r0
 800a346:	4680      	mov	r8, r0
 800a348:	dc34      	bgt.n	800a3b4 <floor+0x84>
 800a34a:	2e00      	cmp	r6, #0
 800a34c:	da17      	bge.n	800a37e <floor+0x4e>
 800a34e:	a332      	add	r3, pc, #200	@ (adr r3, 800a418 <floor+0xe8>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f5 ff42 	bl	80001dc <__adddf3>
 800a358:	2200      	movs	r2, #0
 800a35a:	2300      	movs	r3, #0
 800a35c:	f7f6 fb84 	bl	8000a68 <__aeabi_dcmpgt>
 800a360:	b150      	cbz	r0, 800a378 <floor+0x48>
 800a362:	2c00      	cmp	r4, #0
 800a364:	da55      	bge.n	800a412 <floor+0xe2>
 800a366:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a36a:	432c      	orrs	r4, r5
 800a36c:	2500      	movs	r5, #0
 800a36e:	42ac      	cmp	r4, r5
 800a370:	4c2b      	ldr	r4, [pc, #172]	@ (800a420 <floor+0xf0>)
 800a372:	bf08      	it	eq
 800a374:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	e023      	b.n	800a3c6 <floor+0x96>
 800a37e:	4f29      	ldr	r7, [pc, #164]	@ (800a424 <floor+0xf4>)
 800a380:	4137      	asrs	r7, r6
 800a382:	ea01 0307 	and.w	r3, r1, r7
 800a386:	4303      	orrs	r3, r0
 800a388:	d01d      	beq.n	800a3c6 <floor+0x96>
 800a38a:	a323      	add	r3, pc, #140	@ (adr r3, 800a418 <floor+0xe8>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 ff24 	bl	80001dc <__adddf3>
 800a394:	2200      	movs	r2, #0
 800a396:	2300      	movs	r3, #0
 800a398:	f7f6 fb66 	bl	8000a68 <__aeabi_dcmpgt>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0eb      	beq.n	800a378 <floor+0x48>
 800a3a0:	2c00      	cmp	r4, #0
 800a3a2:	bfbe      	ittt	lt
 800a3a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a3a8:	4133      	asrlt	r3, r6
 800a3aa:	18e4      	addlt	r4, r4, r3
 800a3ac:	ea24 0407 	bic.w	r4, r4, r7
 800a3b0:	2500      	movs	r5, #0
 800a3b2:	e7e1      	b.n	800a378 <floor+0x48>
 800a3b4:	2e33      	cmp	r6, #51	@ 0x33
 800a3b6:	dd0a      	ble.n	800a3ce <floor+0x9e>
 800a3b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a3bc:	d103      	bne.n	800a3c6 <floor+0x96>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	f7f5 ff0b 	bl	80001dc <__adddf3>
 800a3c6:	ec41 0b10 	vmov	d0, r0, r1
 800a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a3d2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3d6:	40df      	lsrs	r7, r3
 800a3d8:	4207      	tst	r7, r0
 800a3da:	d0f4      	beq.n	800a3c6 <floor+0x96>
 800a3dc:	a30e      	add	r3, pc, #56	@ (adr r3, 800a418 <floor+0xe8>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f5 fefb 	bl	80001dc <__adddf3>
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f7f6 fb3d 	bl	8000a68 <__aeabi_dcmpgt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d0c2      	beq.n	800a378 <floor+0x48>
 800a3f2:	2c00      	cmp	r4, #0
 800a3f4:	da0a      	bge.n	800a40c <floor+0xdc>
 800a3f6:	2e14      	cmp	r6, #20
 800a3f8:	d101      	bne.n	800a3fe <floor+0xce>
 800a3fa:	3401      	adds	r4, #1
 800a3fc:	e006      	b.n	800a40c <floor+0xdc>
 800a3fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a402:	2301      	movs	r3, #1
 800a404:	40b3      	lsls	r3, r6
 800a406:	441d      	add	r5, r3
 800a408:	4545      	cmp	r5, r8
 800a40a:	d3f6      	bcc.n	800a3fa <floor+0xca>
 800a40c:	ea25 0507 	bic.w	r5, r5, r7
 800a410:	e7b2      	b.n	800a378 <floor+0x48>
 800a412:	2500      	movs	r5, #0
 800a414:	462c      	mov	r4, r5
 800a416:	e7af      	b.n	800a378 <floor+0x48>
 800a418:	8800759c 	.word	0x8800759c
 800a41c:	7e37e43c 	.word	0x7e37e43c
 800a420:	bff00000 	.word	0xbff00000
 800a424:	000fffff 	.word	0x000fffff

0800a428 <memset>:
 800a428:	4402      	add	r2, r0
 800a42a:	4603      	mov	r3, r0
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d100      	bne.n	800a432 <memset+0xa>
 800a430:	4770      	bx	lr
 800a432:	f803 1b01 	strb.w	r1, [r3], #1
 800a436:	e7f9      	b.n	800a42c <memset+0x4>

0800a438 <__libc_init_array>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	4d0d      	ldr	r5, [pc, #52]	@ (800a470 <__libc_init_array+0x38>)
 800a43c:	4c0d      	ldr	r4, [pc, #52]	@ (800a474 <__libc_init_array+0x3c>)
 800a43e:	1b64      	subs	r4, r4, r5
 800a440:	10a4      	asrs	r4, r4, #2
 800a442:	2600      	movs	r6, #0
 800a444:	42a6      	cmp	r6, r4
 800a446:	d109      	bne.n	800a45c <__libc_init_array+0x24>
 800a448:	4d0b      	ldr	r5, [pc, #44]	@ (800a478 <__libc_init_array+0x40>)
 800a44a:	4c0c      	ldr	r4, [pc, #48]	@ (800a47c <__libc_init_array+0x44>)
 800a44c:	f000 f826 	bl	800a49c <_init>
 800a450:	1b64      	subs	r4, r4, r5
 800a452:	10a4      	asrs	r4, r4, #2
 800a454:	2600      	movs	r6, #0
 800a456:	42a6      	cmp	r6, r4
 800a458:	d105      	bne.n	800a466 <__libc_init_array+0x2e>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a460:	4798      	blx	r3
 800a462:	3601      	adds	r6, #1
 800a464:	e7ee      	b.n	800a444 <__libc_init_array+0xc>
 800a466:	f855 3b04 	ldr.w	r3, [r5], #4
 800a46a:	4798      	blx	r3
 800a46c:	3601      	adds	r6, #1
 800a46e:	e7f2      	b.n	800a456 <__libc_init_array+0x1e>
 800a470:	0800a700 	.word	0x0800a700
 800a474:	0800a700 	.word	0x0800a700
 800a478:	0800a700 	.word	0x0800a700
 800a47c:	0800a708 	.word	0x0800a708

0800a480 <memcpy>:
 800a480:	440a      	add	r2, r1
 800a482:	4291      	cmp	r1, r2
 800a484:	f100 33ff 	add.w	r3, r0, #4294967295
 800a488:	d100      	bne.n	800a48c <memcpy+0xc>
 800a48a:	4770      	bx	lr
 800a48c:	b510      	push	{r4, lr}
 800a48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a496:	4291      	cmp	r1, r2
 800a498:	d1f9      	bne.n	800a48e <memcpy+0xe>
 800a49a:	bd10      	pop	{r4, pc}

0800a49c <_init>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr

0800a4a8 <_fini>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	bf00      	nop
 800a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ae:	bc08      	pop	{r3}
 800a4b0:	469e      	mov	lr, r3
 800a4b2:	4770      	bx	lr
